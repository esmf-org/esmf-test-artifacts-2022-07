<SPAN <PRE>       subroutine ESMF_Initialize(configFilename, &amp;
<SPAN          defaultCalKind, defaultDefaultLogFilename, defaultLogFilename, &amp;
<SPAN          defaultLogAppendFlag, logAppendFlag, defaultLogKindFlag, logKindFlag, &amp;
<SPAN          mpiCommunicator,  ioUnitLBound, ioUnitUBound, &amp;
<SPAN          defaultGlobalResourceControl, globalResourceControl, config, vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character(len=*),        intent(in),  optional :: configFilename
<SPAN        type(ESMF_CalKind_Flag), intent(in),  optional :: defaultCalKind
<SPAN        character(len=*),        intent(in),  optional :: defaultDefaultLogFilename
<SPAN        character(len=*),        intent(in),  optional :: defaultLogFilename
<SPAN        logical,                 intent(in),  optional :: defaultLogAppendFlag
<SPAN        logical,                 intent(in),  optional :: logAppendFlag
<SPAN        type(ESMF_LogKind_Flag), intent(in),  optional :: defaultLogKindFlag
<SPAN        type(ESMF_LogKind_Flag), intent(in),  optional :: logKindFlag
<SPAN        integer,                 intent(in),  optional :: mpiCommunicator
<SPAN        integer,                 intent(in),  optional :: ioUnitLBound
<SPAN        integer,                 intent(in),  optional :: ioUnitUBound
<SPAN        logical,                 intent(in),  optional :: defaultGlobalResourceControl
<SPAN        logical,                 intent(in),  optional :: globalResourceControl
<SPAN        type(ESMF_Config),       intent(out), optional :: config
<SPAN        type(ESMF_VM),           intent(out), optional :: vm
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>logAppendFlag</TT> to allow specifying that the existing
<SPAN                 log files will be overwritten.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.2.0</STRONG></DT>
<SPAN <DD>Added argument <TT>globalResourceControl</TT> to support ESMF-aware
<SPAN                 threading and resource control on the global VM level.
<SPAN <BR>
<SPAN Added argument <TT>config</TT> to return default handle to the
<SPAN                 defaultConfig.
<SPAN <BR>
<SPAN Renamed argument <TT>defaultConfigFilename</TT> to
<SPAN                 <TT>configFilename</TT>, in order to clarify that provided settings
<SPAN                 in the Config file are <EM>not</EM> defaults, but final
<SPAN                 overrides.
<SPAN <BR>
<SPAN Introduce <TT>default</TT> prefixed arguments:
<SPAN                 <TT>defaultDefaultLogFilename</TT>,
<SPAN                 <TT>defaultLogAppendFlag</TT>, <TT>defaultLogKindFlag</TT>,
<SPAN                 <TT>defaultGlobalResourceControl</TT>. These arguments allow
<SPAN                 specification of defaults for the associated settings. This
<SPAN                 default can be overridden via the associated argument, without
<SPAN                 the extra <TT>default</TT> prefix, either specified in the call, or
<SPAN                 within the specified Config file.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_InitializePreMPI(rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     function ESMF_IsInitialized(rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_IsInitialized
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     function ESMF_IsFinalized(rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_IsFinalized
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_Finalize(endflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_End_Flag), intent(in), optional  :: endflag
<SPAN        integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     interface assignment(=)
<SPAN      gridcomp1 = gridcomp2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp) :: gridcomp1
<SPAN      type(ESMF_GridComp) :: gridcomp2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN      if (gridcomp1 == gridcomp2) then ... endif
<SPAN                OR
<SPAN      result = (gridcomp1 == gridcomp2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(in) :: gridcomp1
<SPAN      type(ESMF_GridComp), intent(in) :: gridcomp2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (gridcomp1 /= gridcomp2) then ... endif
<SPAN                OR
<SPAN      result = (gridcomp1 /= gridcomp2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(in) :: gridcomp1
<SPAN      type(ESMF_GridComp), intent(in) :: gridcomp2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive function ESMF_GridCompCreate(grid, gridList, &amp;
<SPAN      mesh, meshList, locstream, locstreamList, xgrid, xgridList, &amp;
<SPAN      config, configFile, clock, petList, contextflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_GridComp) :: ESMF_GridCompCreate
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Grid),         intent(in),    optional :: grid
<SPAN      type(ESMF_Grid),         intent(in),    optional :: gridList(:)
<SPAN      type(ESMF_Mesh),         intent(in),    optional :: mesh
<SPAN      type(ESMF_Mesh),         intent(in),    optional :: meshList(:)
<SPAN      type(ESMF_LocStream),    intent(in),    optional :: locstream
<SPAN      type(ESMF_LocStream),    intent(in),    optional :: locstreamList(:)
<SPAN      type(ESMF_XGrid),        intent(in),    optional :: xgrid
<SPAN      type(ESMF_XGrid),        intent(in),    optional :: xgridList(:)
<SPAN      type(ESMF_Config),       intent(in),    optional :: config
<SPAN      character(len=*),        intent(in),    optional :: configFile
<SPAN      type(ESMF_Clock),        intent(in),    optional :: clock
<SPAN      integer,                 intent(in),    optional :: petList(:)
<SPAN      type(ESMF_Context_Flag), intent(in),    optional :: contextflag
<SPAN      character(len=*),        intent(in),    optional :: name
<SPAN      integer,                 intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added arguments <TT>gridList</TT>, <TT>mesh</TT>, <TT>meshList</TT>,
<SPAN      <TT>locstream</TT>, <TT>locstreamList</TT>, <TT>xgrid</TT>, and <TT>xgridList</TT>.
<SPAN      These arguments add support for holding references to multiple geom objects,
<SPAN      either of the same type, or different type, in the same
<SPAN      <TT>ESMF_GridComp</TT> object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_GridCompDestroy(gridcomp, &amp;
<SPAN      timeout, timeoutFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(inout)          :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(in),   optional :: timeout
<SPAN      logical,             intent(out),  optional :: timeoutFlag
<SPAN      integer,             intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_GridCompFinalize(gridcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, phase, timeout, timeoutFlag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp),  intent(inout)           :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: phase
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: userRc
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_GridCompGet(gridcomp, &amp;
<SPAN      gridIsPresent, grid, gridList, meshIsPresent, mesh, meshList, &amp;
<SPAN      locstreamIsPresent, locstream, locstreamList, xgridIsPresent, &amp;
<SPAN      xgrid, xgridList, importStateIsPresent, importState, &amp;
<SPAN      exportStateIsPresent, exportState, configIsPresent, config, &amp;
<SPAN      configFileIsPresent, configFile, clockIsPresent, clock, localPet, &amp;
<SPAN      petCount, contextflag, currentMethod, currentPhase, comptype, &amp;
<SPAN      vmIsPresent, vm, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp),           intent(in)            :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                       intent(out), optional :: gridIsPresent
<SPAN      type(ESMF_Grid),               intent(out), optional :: grid
<SPAN      type(ESMF_Grid), allocatable,  intent(out), optional :: gridList(:)
<SPAN      logical,                       intent(out), optional :: meshIsPresent
<SPAN      type(ESMF_Mesh),               intent(out), optional :: mesh
<SPAN      type(ESMF_Mesh), allocatable,  intent(out), optional :: meshList(:)
<SPAN      logical,                       intent(out), optional :: locstreamIsPresent
<SPAN      type(ESMF_LocStream),          intent(out), optional :: locstream
<SPAN      type(ESMF_LocStream), allocatable, intent(out), optional :: locstreamList(:)
<SPAN      logical,                       intent(out), optional :: xgridIsPresent
<SPAN      type(ESMF_XGrid),              intent(out), optional :: xgrid
<SPAN      type(ESMF_XGrid), allocatable, intent(out), optional :: xgridList(:)
<SPAN      logical,                       intent(out), optional :: importStateIsPresent
<SPAN      type(ESMF_State),              intent(out), optional :: importState
<SPAN      logical,                       intent(out), optional :: exportStateIsPresent
<SPAN      type(ESMF_State),              intent(out), optional :: exportState
<SPAN      logical,                       intent(out), optional :: configIsPresent
<SPAN      type(ESMF_Config),             intent(out), optional :: config
<SPAN      logical,                       intent(out), optional :: configFileIsPresent
<SPAN      character(len=*),              intent(out), optional :: configFile
<SPAN      logical,                       intent(out), optional :: clockIsPresent
<SPAN      type(ESMF_Clock),              intent(out), optional :: clock
<SPAN      integer,                       intent(out), optional :: localPet
<SPAN      integer,                       intent(out), optional :: petCount
<SPAN      type(ESMF_Context_Flag),       intent(out), optional :: contextflag
<SPAN      type(ESMF_Method_Flag),        intent(out), optional :: currentMethod
<SPAN      integer,                       intent(out), optional :: currentPhase
<SPAN      type(ESMF_CompType_Flag),      intent(out), optional :: comptype
<SPAN      logical,                       intent(out), optional :: vmIsPresent
<SPAN      type(ESMF_VM),                 intent(out), optional :: vm
<SPAN      character(len=*),              intent(out), optional :: name
<SPAN      integer,                       intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added arguments <TT>gridList</TT>, <TT>meshIsPresent</TT>, <TT>mesh</TT>,
<SPAN      <TT>meshList</TT>, <TT>locstreamIsPresent</TT>, <TT>locstream</TT>,
<SPAN      <TT>locstreamList</TT>, <TT>xgridIsPresent</TT>, <TT>xgrid</TT>, and <TT>xgridList</TT>.
<SPAN      These arguments add support for accessing references to multiple geom objects,
<SPAN      either of the same type, or different type, associated with the same
<SPAN      <TT>ESMF_GridComp</TT> object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_GridCompGetInternalState(gridcomp, wrappedDataPointer, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)             :: gridcomp
<SPAN      type(wrapper)                   :: wrappedDataPointer
<SPAN      integer,            intent(out) :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_GridCompInitialize(gridcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, phase, timeout, timeoutFlag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp),  intent(inout)           :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: phase
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: userRc
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_GridCompIsCreated(gridcomp, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_GridCompIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(in)            :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   recursive function ESMF_GridCompIsPetLocal(gridcomp, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_GridCompIsPetLocal
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(in)            :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_GridCompPrint(gridcomp, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(in)            :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_GridCompReadRestart(gridcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, phase, timeout, timeoutFlag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp),  intent(inout)           :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: phase
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: userRc
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_GridCompRun(gridcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, phase, timeout, timeoutFlag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp),  intent(inout)           :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: phase
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: userRc
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_GridCompServiceLoop(gridcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, port, timeout, timeoutFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp),  intent(inout)           :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: port
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_GridCompSet(gridcomp, grid, gridList, &amp;
<SPAN      mesh, meshList, locstream, locstreamList, xgrid, xgridList, &amp;
<SPAN      config, configFile, clock, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp),    intent(inout)         :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Grid),        intent(in),  optional :: grid
<SPAN      type(ESMF_Grid),        intent(in),  optional :: gridList(:)
<SPAN      type(ESMF_Mesh),        intent(in),  optional :: mesh
<SPAN      type(ESMF_Mesh),        intent(in),  optional :: meshList(:)
<SPAN      type(ESMF_LocStream),   intent(in),  optional :: locstream
<SPAN      type(ESMF_LocStream),   intent(in),  optional :: locstreamList(:)
<SPAN      type(ESMF_XGrid),       intent(in),  optional :: xgrid
<SPAN      type(ESMF_XGrid),       intent(in),  optional :: xgridList(:)
<SPAN      type(ESMF_Config),      intent(in),  optional :: config
<SPAN      character(len=*),       intent(in),  optional :: configFile
<SPAN      type(ESMF_Clock),       intent(in),  optional :: clock
<SPAN      character(len=*),       intent(in),  optional :: name
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added arguments <TT>gridList</TT>, <TT>mesh</TT>, <TT>meshList</TT>,
<SPAN      <TT>locstream</TT>, <TT>locstreamList</TT>, <TT>xgrid</TT>, and <TT>xgridList</TT>.
<SPAN      These arguments add support for holding references to multiple geom objects,
<SPAN      either of the same type, or different type, in the same
<SPAN      <TT>ESMF_GridComp</TT> object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_GridCompSetEntryPoint(gridcomp, methodflag, &amp;
<SPAN      userRoutine, phase, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp),    intent(inout)         :: gridcomp
<SPAN      type(ESMF_Method_Flag), intent(in)            :: methodflag
<SPAN      interface
<SPAN        subroutine userRoutine(gridcomp, importState, exportState, clock, rc)
<SPAN          use ESMF_CompMod
<SPAN          use ESMF_StateMod
<SPAN          use ESMF_ClockMod
<SPAN          implicit none
<SPAN          type(ESMF_GridComp)         :: gridcomp     ! must not be optional
<SPAN          type(ESMF_State)            :: importState  ! must not be optional
<SPAN          type(ESMF_State)            :: exportState  ! must not be optional
<SPAN          type(ESMF_Clock)            :: clock        ! must not be optional
<SPAN          integer, intent(out)        :: rc           ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(in),  optional :: phase
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_GridCompSetInternalState(gridcomp, wrappedDataPointer, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)             :: gridcomp
<SPAN      type(wrapper)                   :: wrappedDataPointer
<SPAN      integer,            intent(out) :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_GridCompSetServices(gridcomp, &amp;
<SPAN      userRoutine, userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(inout)         :: gridcomp
<SPAN      interface
<SPAN        subroutine userRoutine(gridcomp, rc)
<SPAN          use ESMF_CompMod
<SPAN          implicit none
<SPAN          type(ESMF_GridComp)        :: gridcomp ! must not be optional
<SPAN          integer, intent(out)       :: rc       ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: userRc
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridCompSetServices()
<SPAN    recursive subroutine ESMF_GridCompSetServicesShObj(gridcomp, userRoutine, &amp;
<SPAN      sharedObj, userRoutineFound, userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(inout)         :: gridcomp
<SPAN      character(len=*),    intent(in)            :: userRoutine
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*),    intent(in),  optional :: sharedObj
<SPAN      logical,             intent(out), optional :: userRoutineFound
<SPAN      integer,             intent(out), optional :: userRc
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.3.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>userRoutineFound</TT>.
<SPAN                 The new argument provides a way to test availability without
<SPAN                 causing error conditions.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface
<SPAN          subroutine userRoutine(gridcomp, rc)
<SPAN            type(ESMF_GridComp)  :: gridcomp   ! must not be optional
<SPAN            integer, intent(out) :: rc         ! must not be optional
<SPAN          end subroutine
<SPAN        end interface
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCompSetServices()
<SPAN    recursive subroutine ESMF_GridCompSetServicesComp(gridcomp, &amp;
<SPAN      actualGridcomp, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(inout)         :: gridcomp
<SPAN      type(ESMF_GridComp), intent(in)            :: actualGridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCompSetServices()
<SPAN    recursive subroutine ESMF_GridCompSetServicesSock(gridcomp, port, &amp;
<SPAN      server, timeout, timeoutFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(inout)         :: gridcomp
<SPAN      integer,             intent(in)            :: port
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*),    intent(in),  optional :: server
<SPAN      integer,             intent(in),  optional :: timeout
<SPAN      logical,             intent(out), optional :: timeoutFlag
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   recursive subroutine ESMF_GridCompSetVM(gridcomp, userRoutine, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(inout)         :: gridcomp
<SPAN      interface
<SPAN        subroutine userRoutine(gridcomp, rc)
<SPAN          use ESMF_CompMod
<SPAN          implicit none
<SPAN          type(ESMF_GridComp)        :: gridcomp ! must not be optional
<SPAN          integer, intent(out)       :: rc       ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: userRc
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridCompSetVM()
<SPAN    recursive subroutine ESMF_GridCompSetVMShObj(gridcomp, userRoutine, &amp;
<SPAN      sharedObj, userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(inout)         :: gridcomp
<SPAN      character(len=*),    intent(in)            :: userRoutine
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*),    intent(in),  optional :: sharedObj
<SPAN      integer,             intent(out), optional :: userRc
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface
<SPAN          subroutine userRoutine(gridcomp, rc)
<SPAN            type(ESMF_GridComp)  :: gridcomp    ! must not be optional
<SPAN            integer, intent(out) :: rc          ! must not be optional
<SPAN          end subroutine
<SPAN        end interface
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_GridCompSetVMMaxPEs(gridcomp, &amp;
<SPAN      maxPeCountPerPet, prefIntraProcess, prefIntraSsi, prefInterSsi, &amp;
<SPAN      pthreadMinStackSize, openMpHandling, openMpNumThreads, &amp;
<SPAN      forceChildPthreads, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(inout)         :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(in),  optional :: maxPeCountPerPet
<SPAN      integer,             intent(in),  optional :: prefIntraProcess
<SPAN      integer,             intent(in),  optional :: prefIntraSsi
<SPAN      integer,             intent(in),  optional :: prefInterSsi
<SPAN      integer,             intent(in),  optional :: pthreadMinStackSize
<SPAN      character(*),        intent(in),  optional :: openMpHandling
<SPAN      integer,             intent(in),  optional :: openMpNumThreads
<SPAN      logical,             intent(in),  optional :: forceChildPthreads
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_GridCompSetVMMaxThreads(gridcomp, &amp;
<SPAN      maxPetCountPerVas, prefIntraProcess, prefIntraSsi, prefInterSsi, &amp;
<SPAN      pthreadMinStackSize, forceChildPthreads, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(inout)         :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(in),  optional :: maxPetCountPerVas
<SPAN      integer,             intent(in),  optional :: prefIntraProcess
<SPAN      integer,             intent(in),  optional :: prefIntraSsi
<SPAN      integer,             intent(in),  optional :: prefInterSsi
<SPAN      integer,             intent(in),  optional :: pthreadMinStackSize
<SPAN      logical,             intent(in),  optional :: forceChildPthreads
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_GridCompSetVMMinThreads(gridcomp, &amp;
<SPAN      maxPeCountPerPet, prefIntraProcess, prefIntraSsi, prefInterSsi, &amp;
<SPAN      pthreadMinStackSize, forceChildPthreads, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(inout)         :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(in),  optional :: maxPeCountPerPet
<SPAN      integer,             intent(in),  optional :: prefIntraProcess
<SPAN      integer,             intent(in),  optional :: prefIntraSsi
<SPAN      integer,             intent(in),  optional :: prefInterSsi
<SPAN      integer,             intent(in),  optional :: pthreadMinStackSize
<SPAN      logical,             intent(in),  optional :: forceChildPthreads
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_GridCompValidate(gridcomp, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp), intent(in)            :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_GridCompWait(gridcomp, syncflag, &amp;
<SPAN      timeout, timeoutFlag, userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp),  intent(inout)         :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Sync_Flag), intent(in),  optional :: syncflag
<SPAN      integer,              intent(in),  optional :: timeout
<SPAN      logical,              intent(out), optional :: timeoutFlag
<SPAN      integer,              intent(out), optional :: userRc
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_GridCompWriteRestart(gridcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, phase, timeout, timeoutFlag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp),  intent(inout)           :: gridcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: phase
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: userRc
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     interface assignment(=)
<SPAN      cplcomp1 = cplcomp2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp) :: cplcomp1
<SPAN      type(ESMF_CplComp) :: cplcomp2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN      if (cplcomp1 == cplcomp2) then ... endif
<SPAN                OR
<SPAN      result = (cplcomp1 == cplcomp2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(in) :: cplcomp1
<SPAN      type(ESMF_CplComp), intent(in) :: cplcomp2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (cplcomp1 /= cplcomp2) then ... endif
<SPAN                OR
<SPAN      result = (cplcomp1 /= cplcomp2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(in) :: cplcomp1
<SPAN      type(ESMF_CplComp), intent(in) :: cplcomp2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive function ESMF_CplCompCreate(config, configFile, &amp;
<SPAN      clock, petList, contextflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_CplComp) :: ESMF_CplCompCreate
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Config),       intent(in),  optional :: config
<SPAN      character(len=*),        intent(in),  optional :: configFile
<SPAN      type(ESMF_Clock),        intent(in),  optional :: clock
<SPAN      integer,                 intent(in),  optional :: petList(:)
<SPAN      type(ESMF_Context_Flag), intent(in),  optional :: contextflag
<SPAN      character(len=*),        intent(in),  optional :: name
<SPAN      integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_CplCompDestroy(cplcomp, &amp;
<SPAN      timeout, timeoutFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(inout)          :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(in),   optional :: timeout
<SPAN      logical,            intent(out),  optional :: timeoutFlag
<SPAN      integer,            intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_CplCompFinalize(cplcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, phase, timeout, timeoutFlag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),   intent(inout)           :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: phase
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: userRc
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_CplCompGet(cplcomp, configIsPresent, config, &amp;
<SPAN      configFileIsPresent, configFile, clockIsPresent, clock, localPet, &amp;
<SPAN      petCount, contextflag, currentMethod, currentPhase, vmIsPresent, &amp;
<SPAN      vm, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),      intent(in)            :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                 intent(out), optional :: configIsPresent
<SPAN      type(ESMF_Config),       intent(out), optional :: config
<SPAN      logical,                 intent(out), optional :: configFileIsPresent
<SPAN      character(len=*),        intent(out), optional :: configFile
<SPAN      logical,                 intent(out), optional :: clockIsPresent
<SPAN      type(ESMF_Clock),        intent(out), optional :: clock
<SPAN      integer,                 intent(out), optional :: localPet
<SPAN      integer,                 intent(out), optional :: petCount
<SPAN      type(ESMF_Context_Flag), intent(out), optional :: contextflag
<SPAN      type(ESMF_Method_Flag),  intent(out), optional :: currentMethod
<SPAN      integer,                 intent(out), optional :: currentPhase
<SPAN      logical,                 intent(out), optional :: vmIsPresent
<SPAN      type(ESMF_VM),           intent(out), optional :: vm
<SPAN      character(len=*),        intent(out), optional :: name
<SPAN      integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_CplCompGetInternalState(cplcomp, wrappedDataPointer, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)              :: cplcomp
<SPAN      type(wrapper)                   :: wrappedDataPointer
<SPAN      integer,            intent(out) :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_CplCompInitialize(cplcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, phase, timeout, timeoutFlag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),   intent(inout)           :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: phase
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: userRc
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_CplCompIsCreated(cplcomp, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_CplCompIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(in)            :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   recursive function ESMF_CplCompIsPetLocal(cplcomp, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_CplCompIsPetLocal
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(in)            :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_CplCompPrint(cplcomp, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(in)            :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_CplCompReadRestart(cplcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, phase, timeout, timeoutFlag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),   intent(inout)           :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: phase
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: userRc
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_CplCompRun(cplcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, phase, timeout, timeoutFlag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),   intent(inout)           :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: phase
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: userRc
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_CplCompServiceLoop(cplcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, port, timeout, timeoutFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),   intent(inout)           :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: port
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_CplCompSet(cplcomp, config, configFile, &amp;
<SPAN      clock, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(inout)         :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Config),  intent(in),  optional :: config
<SPAN      character(len=*),   intent(in),  optional :: configFile
<SPAN      type(ESMF_Clock),   intent(in),  optional :: clock
<SPAN      character(len=*),   intent(in),  optional :: name
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_CplCompSetEntryPoint(cplcomp, methodflag, &amp;
<SPAN      userRoutine, phase, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),     intent(inout)         :: cplcomp
<SPAN      type(ESMF_Method_Flag), intent(in)            :: methodflag
<SPAN      interface
<SPAN        subroutine userRoutine(cplcomp, importState, exportState, clock, rc)
<SPAN          use ESMF_CompMod
<SPAN          use ESMF_StateMod
<SPAN          use ESMF_ClockMod
<SPAN          implicit none
<SPAN          type(ESMF_CplComp)          :: cplcomp      ! must not be optional
<SPAN          type(ESMF_State)            :: importState  ! must not be optional
<SPAN          type(ESMF_State)            :: exportState  ! must not be optional
<SPAN          type(ESMF_Clock)            :: clock        ! must not be optional
<SPAN          integer, intent(out)        :: rc           ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(in),  optional :: phase
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_CplCompSetInternalState(cplcomp, wrappedDataPointer, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)              :: cplcomp
<SPAN      type(wrapper)                   :: wrappedDataPointer
<SPAN      integer,            intent(out) :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_CplCompSetServices(cplcomp, userRoutine, &amp;
<SPAN       userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(inout)         :: cplcomp
<SPAN      interface
<SPAN        subroutine userRoutine(cplcomp, rc)
<SPAN          use ESMF_CompMod
<SPAN          implicit none
<SPAN          type(ESMF_CplComp)         :: cplcomp  ! must not be optional
<SPAN          integer, intent(out)       :: rc       ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(out), optional :: userRc
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_CplCompSetServices()
<SPAN    recursive subroutine ESMF_CplCompSetServicesShObj(cplcomp, userRoutine, &amp;
<SPAN      sharedObj, userRoutineFound, userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),  intent(inout)         :: cplcomp
<SPAN      character(len=*),    intent(in)            :: userRoutine
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*),    intent(in),  optional :: sharedObj
<SPAN      logical,             intent(out), optional :: userRoutineFound
<SPAN      integer,             intent(out), optional :: userRc
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.3.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>userRoutineFound</TT>.
<SPAN                 The new argument provides a way to test availability without
<SPAN                 causing error conditions.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface
<SPAN          subroutine userRoutine(cplcomp, rc)
<SPAN            type(ESMF_CplComp)   :: cplcomp    ! must not be optional
<SPAN            integer, intent(out) :: rc         ! must not be optional
<SPAN          end subroutine
<SPAN        end interface
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_CplCompSetServices()
<SPAN    recursive subroutine ESMF_CplCompSetServicesComp(cplcomp, &amp;
<SPAN      actualCplcomp, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(inout)         :: cplcomp
<SPAN      type(ESMF_CplComp), intent(in)            :: actualCplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_CplCompSetServices()
<SPAN    recursive subroutine ESMF_CplCompSetServicesSock(cplcomp, port, &amp;
<SPAN      server, timeout, timeoutFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(inout)         :: cplcomp
<SPAN      integer,            intent(in)            :: port
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*),   intent(in),  optional :: server
<SPAN      integer,            intent(in),  optional :: timeout
<SPAN      logical,            intent(out), optional :: timeoutFlag
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   recursive subroutine ESMF_CplCompSetVM(cplcomp, userRoutine, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(inout)         :: cplcomp
<SPAN      interface
<SPAN        subroutine userRoutine(cplcomp, rc)
<SPAN          use ESMF_CompMod
<SPAN          implicit none
<SPAN          type(ESMF_CplComp)         :: cplcomp  ! must not be optional
<SPAN          integer, intent(out)       :: rc       ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(out), optional :: userRc
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_CplCompSetVM()
<SPAN    recursive subroutine ESMF_CplCompSetVMShObj(cplcomp, userRoutine, &amp;
<SPAN      sharedObj, userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),  intent(inout)         :: cplcomp
<SPAN      character(len=*),    intent(in)            :: userRoutine
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*),    intent(in),  optional :: sharedObj
<SPAN      integer,             intent(out), optional :: userRc
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface
<SPAN          subroutine userRoutine(cplcomp, rc)
<SPAN            type(ESMF_CplComp)   :: cplcomp     ! must not be optional
<SPAN            integer, intent(out) :: rc          ! must not be optional
<SPAN          end subroutine
<SPAN        end interface
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_CplCompSetVMMaxPEs(cplcomp, &amp;
<SPAN      maxPeCountPerPet, prefIntraProcess, prefIntraSsi, prefInterSsi, &amp;
<SPAN      pthreadMinStackSize, forceChildPthreads, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),  intent(inout)         :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(in),  optional :: maxPeCountPerPet
<SPAN      integer,             intent(in),  optional :: prefIntraProcess
<SPAN      integer,             intent(in),  optional :: prefIntraSsi
<SPAN      integer,             intent(in),  optional :: prefInterSsi
<SPAN      integer,             intent(in),  optional :: pthreadMinStackSize
<SPAN      logical,             intent(in),  optional :: forceChildPthreads
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_CplCompSetVMMaxThreads(cplcomp, &amp;
<SPAN      maxPetCountPerVas, prefIntraProcess, prefIntraSsi, prefInterSsi, &amp;
<SPAN      pthreadMinStackSize, forceChildPthreads, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),  intent(inout)         :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(in),  optional :: maxPetCountPerVas
<SPAN      integer,             intent(in),  optional :: prefIntraProcess
<SPAN      integer,             intent(in),  optional :: prefIntraSsi
<SPAN      integer,             intent(in),  optional :: prefInterSsi
<SPAN      integer,             intent(in),  optional :: pthreadMinStackSize
<SPAN      logical,             intent(in),  optional :: forceChildPthreads
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_CplCompSetVMMinThreads(cplcomp, &amp;
<SPAN      maxPeCountPerPet, prefIntraProcess, prefIntraSsi, prefInterSsi, &amp;
<SPAN      pthreadMinStackSize, forceChildPthreads, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),  intent(inout)         :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(in),  optional :: maxPeCountPerPet
<SPAN      integer,             intent(in),  optional :: prefIntraProcess
<SPAN      integer,             intent(in),  optional :: prefIntraSsi
<SPAN      integer,             intent(in),  optional :: prefInterSsi
<SPAN      integer,             intent(in),  optional :: pthreadMinStackSize
<SPAN      logical,             intent(in),  optional :: forceChildPthreads
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_CplCompValidate(cplcomp, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp), intent(in)            :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_CplCompWait(cplcomp, syncflag, &amp;
<SPAN      timeout, timeoutFlag, userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),   intent(inout)         :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Sync_Flag), intent(in),  optional :: syncflag
<SPAN      integer,              intent(in),  optional :: timeout
<SPAN      logical,              intent(out), optional :: timeoutFlag
<SPAN      integer,              intent(out), optional :: userRc
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_CplCompWriteRestart(cplcomp, &amp;
<SPAN      importState, exportState, clock, syncflag, phase, timeout, timeoutFlag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp),   intent(inout)           :: cplcomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_State),     intent(inout), optional :: importState
<SPAN      type(ESMF_State),     intent(inout), optional :: exportState
<SPAN      type(ESMF_Clock),     intent(inout), optional :: clock
<SPAN      type(ESMF_Sync_Flag), intent(in),    optional :: syncflag
<SPAN      integer,              intent(in),    optional :: phase
<SPAN      integer,              intent(in),    optional :: timeout
<SPAN      logical,              intent(out),   optional :: timeoutFlag
<SPAN      integer,              intent(out),   optional :: userRc
<SPAN      integer,              intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added argument <TT>timeout</TT>.
<SPAN                 Added argument <TT>timeoutFlag</TT>.
<SPAN                 The new arguments provide access to the fault-tolerant component
<SPAN                 features.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     interface assignment(=)
<SPAN      scicomp1 = scicomp2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_SciComp) :: scicomp1
<SPAN      type(ESMF_SciComp) :: scicomp2
<SPAN </PRE>

<SPAN <PRE>   interface operator(==)
<SPAN      if (scicomp1 == scicomp2) then ... endif
<SPAN                OR
<SPAN      result = (scicomp1 == scicomp2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_SciComp), intent(in) :: scicomp1
<SPAN      type(ESMF_SciComp), intent(in) :: scicomp2
<SPAN </PRE>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (scicomp1 /= scicomp2) then ... endif
<SPAN                OR
<SPAN      result = (scicomp1 /= scicomp2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_SciComp), intent(in) :: scicomp1
<SPAN      type(ESMF_SciComp), intent(in) :: scicomp2
<SPAN </PRE>

<SPAN <PRE>   recursive function ESMF_SciCompCreate(name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_SciComp) :: ESMF_SciCompCreate
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*),        intent(in),    optional :: name
<SPAN      integer,                 intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_SciCompDestroy(scicomp, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_SciComp), intent(inout)           :: scicomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out),  optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_SciCompGet(scicomp, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_SciComp),       intent(in)            :: scicomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*),         intent(out), optional :: name
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_SciCompIsCreated(scicomp, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_SciCompIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_SciComp), intent(in)            :: scicomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_SciCompPrint(scicomp, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_SciComp), intent(in)             :: scicomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_SciCompSet(scicomp, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_SciComp), intent(inout)          :: scicomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*),    intent(in),  optional :: name
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_SciCompValidate(scicomp, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_SciComp), intent(in)             :: scicomp
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   interface assignment(=)
<SPAN    state1 = state2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_State) :: state1
<SPAN    type(ESMF_State) :: state2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN    if (state1 == state2) then ... endif
<SPAN    OR
<SPAN    result = (state1 == state2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_State), intent(in) :: state1
<SPAN    type(ESMF_State), intent(in) :: state2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN    if (state1 /= state2) then ... endif
<SPAN    OR
<SPAN    result = (state1 /= state2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_State), intent(in) :: state1
<SPAN    type(ESMF_State), intent(in) :: state2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_StateAdd(state, &lt;itemList&gt;, relaxedFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_State), intent(inout) :: state
<SPAN    &lt;itemList&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    logical, intent(in), optional :: relaxedFlag
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_StateAddReplace(state, &lt;itemList&gt;, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_State), intent(inout) :: state
<SPAN    &lt;itemList&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_StateCreate(stateintent, &amp;
<SPAN                     arrayList, arraybundleList, &amp;
<SPAN                     fieldList, fieldbundleList, &amp;
<SPAN                     nestedStateList, &amp;
<SPAN                     routehandleList, name, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_State) :: ESMF_StateCreate
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_StateIntent_Flag), intent(in), optional :: stateintent
<SPAN        type(ESMF_Array), intent(in), optional :: arrayList(:)
<SPAN        type(ESMF_ArrayBundle), intent(in), optional :: arraybundleList(:)
<SPAN        type(ESMF_Field), intent(in), optional :: fieldList(:)
<SPAN        type(ESMF_FieldBundle), intent(in), optional :: fieldbundleList(:)
<SPAN        type(ESMF_State), intent(in), optional :: nestedStateList(:)
<SPAN        type(ESMF_RouteHandle), intent(in), optional :: routehandleList(:)
<SPAN        character(len=*), intent(in), optional :: name
<SPAN        type(ESMF_VM), intent(in), optional :: vm
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>vm</TT> to support object creation on a
<SPAN    different VM than that of the current context.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       recursive subroutine ESMF_StateDestroy(state, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_State), intent(inout) :: state
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical, intent(in), optional :: noGarbage
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN    The argument provides a mechanism to override the default garbage collection
<SPAN    mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_StateGet()
<SPAN        subroutine ESMF_StateGetInfo(state, &amp;
<SPAN              itemSearch, itemorderflag, nestedFlag, &amp;
<SPAN              stateintent, itemCount, itemNameList, itemTypeList, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_State), intent(in) :: state
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character (len=*), intent(in), optional :: itemSearch
<SPAN        type(ESMF_ItemOrder_Flag), intent(in), optional :: itemorderflag
<SPAN        logical, intent(in), optional :: nestedFlag
<SPAN        type(ESMF_StateIntent_Flag), intent(out), optional :: stateintent
<SPAN        integer, intent(out), optional :: itemCount
<SPAN        character (len=*), intent(out), optional :: itemNameList(:)
<SPAN        type(ESMF_StateItem_Flag), intent(out), optional :: itemTypeList(:)
<SPAN        character (len=*), intent(out), optional :: name
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>itemorderflag</TT>.
<SPAN    The new argument gives the user control over the order in which
<SPAN    the items are returned.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_StateGet()
<SPAN        subroutine ESMF_StateGetItemInfo(state, itemName, itemType, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_State), intent(in) :: state
<SPAN        character (len=*), intent(in) :: itemName
<SPAN        type(ESMF_StateItem_Flag), intent(out) :: itemType
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_StateGet(state, itemName, &lt;item&gt;, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_State), intent(in) :: state
<SPAN    character (len=*), intent(in) :: itemName
<SPAN    &lt;item&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_StateIsCreated(state, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_StateIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State), intent(in) :: state
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_StatePrint(state, options, nestedFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_State), intent(in) :: state
<SPAN        character(len=*), intent(in), optional :: options
<SPAN        logical, intent(in), optional :: nestedFlag
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_StateRead(state, fileName, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_State), intent(inout) :: state
<SPAN        character (len=*), intent(in) :: fileName
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_StateReconcile(state, vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State),            intent(inout)         :: state
<SPAN      type(ESMF_VM),               intent(in),  optional :: vm
<SPAN      integer,                     intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_StateRemove ()
<SPAN    subroutine ESMF_StateRemoveOneItem (state, itemName, &amp;
<SPAN        relaxedFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State), intent(inout) :: state
<SPAN      character(*), intent(in) :: itemName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical, intent(in), optional :: relaxedFlag
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI><B>DEPRECATED METHOD</B> as of ESMF 5.3.1. Please use <TT>ESMF_StateRemove</TT>, section <TT><A HREF="#esmfstateremovelist">21.7.16</A></TT> instead.
<SPAN    Rationale: The list version is consistent with other ESMF container
<SPAN    operations which use lists.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_StateRemove ()
<SPAN    subroutine ESMF_StateRemoveList (state, itemNameList, relaxedFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State), intent(inout) :: state
<SPAN      character(*), intent(in) :: itemNameList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical, intent(in), optional :: relaxedFlag
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.3.1. If code using this interface compiles with any version of ESMF starting with 5.3.1, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_StateReplace(state, &lt;itemList&gt;, relaxedflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_State), intent(inout) :: state
<SPAN    &lt;itemList&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    logical, intent(in), optional :: relaxedflag
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_StateSet(state, stateIntent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State),            intent(inout)         :: state
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_StateIntent_Flag), intent(in),  optional :: stateIntent
<SPAN      integer,                     intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_StateValidate(state, nestedFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_State), intent(in) :: state
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,          intent(in),  optional :: nestedFlag
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_StateWrite(state, fileName, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_State),  intent(in)            :: state 
<SPAN        character (len=*), intent(in)            :: fileName
<SPAN        integer,           intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAdd()
<SPAN    subroutine ESMF_MethodCplCompAdd(cplcomp, label, index, userRoutine, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)                      :: cplcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      interface
<SPAN        subroutine userRoutine(cplcomp, rc)
<SPAN          use ESMF_CompMod
<SPAN          implicit none
<SPAN          type(ESMF_CplComp)          :: cplcomp      ! must not be optional
<SPAN          integer, intent(out)        :: rc           ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAdd()
<SPAN    subroutine ESMF_MethodCplCompAddShObj(cplcomp, label, index, userRoutine, &amp;
<SPAN      sharedObj, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)                      :: cplcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      character(len=*), intent(in)            :: userRoutine
<SPAN      character(len=*), intent(in),  optional :: sharedObj
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAdd()
<SPAN    subroutine ESMF_MethodGridCompAdd(gcomp, label, index, userRoutine, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)                     :: gcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      interface
<SPAN        subroutine userRoutine(gcomp, rc)
<SPAN          use ESMF_CompMod
<SPAN          implicit none
<SPAN          type(ESMF_GridComp)         :: gcomp        ! must not be optional
<SPAN          integer, intent(out)        :: rc           ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAdd()
<SPAN    subroutine ESMF_MethodGridCompAddShObj(gcomp, label, index, userRoutine, &amp;
<SPAN      sharedObj, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)                     :: gcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      character(len=*), intent(in)            :: userRoutine
<SPAN      character(len=*), intent(in),  optional :: sharedObj
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAdd()
<SPAN    subroutine ESMF_MethodStateAdd(state, label, index, userRoutine, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State)                        :: state
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      interface
<SPAN        subroutine userRoutine(state, rc)
<SPAN          use ESMF_StateMod
<SPAN          implicit none
<SPAN          type(ESMF_State)            :: state        ! must not be optional
<SPAN          integer, intent(out)        :: rc           ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAdd()
<SPAN    subroutine ESMF_MethodStateAddShObj(state, label, index, userRoutine, &amp;
<SPAN      sharedObj, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State)                        :: state
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      character(len=*), intent(in)            :: userRoutine
<SPAN      character(len=*), intent(in),  optional :: sharedObj
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAddReplace()
<SPAN    subroutine ESMF_MethodCplCompAddRep(cplcomp, label, index, userRoutine, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)                      :: cplcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      interface
<SPAN        subroutine userRoutine(cplcomp, rc)
<SPAN          use ESMF_CompMod
<SPAN          implicit none
<SPAN          type(ESMF_CplComp)          :: cplcomp      ! must not be optional
<SPAN          integer, intent(out)        :: rc           ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAddReplace()
<SPAN    subroutine ESMF_MethodCplCompAddRepShObj(cplcomp, label, index, userRoutine, &amp;
<SPAN      sharedObj, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)                      :: cplcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      character(len=*), intent(in)            :: userRoutine
<SPAN      character(len=*), intent(in),  optional :: sharedObj
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAddReplace()
<SPAN    subroutine ESMF_MethodGridCompAddRep(gcomp, label, index, userRoutine, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)                     :: gcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      interface
<SPAN        subroutine userRoutine(gcomp, rc)
<SPAN          use ESMF_CompMod
<SPAN          implicit none
<SPAN          type(ESMF_GridComp)         :: gcomp        ! must not be optional
<SPAN          integer, intent(out)        :: rc           ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAddReplace()
<SPAN    subroutine ESMF_MethodGridCompAddRepShObj(gcomp, label, index, userRoutine, &amp;
<SPAN      sharedObj, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)                     :: gcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      character(len=*), intent(in)            :: userRoutine
<SPAN      character(len=*), intent(in),  optional :: sharedObj
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAddReplace()
<SPAN    subroutine ESMF_MethodStateAddRep(state, label, index, userRoutine, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State)                        :: state
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      interface
<SPAN        subroutine userRoutine(state, rc)
<SPAN          use ESMF_StateMod
<SPAN          implicit none
<SPAN          type(ESMF_State)            :: state        ! must not be optional
<SPAN          integer, intent(out)        :: rc           ! must not be optional
<SPAN        end subroutine
<SPAN      end interface
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodAddReplace()
<SPAN    subroutine ESMF_MethodStateAddRepShObj(state, label, index, userRoutine, &amp;
<SPAN      sharedObj, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State)                        :: state
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      character(len=*), intent(in)            :: userRoutine
<SPAN      character(len=*), intent(in),  optional :: sharedObj
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodExecute()
<SPAN    recursive subroutine ESMF_MethodCplCompExecute(cplcomp, label, index, existflag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)                      :: cplcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      logical,          intent(out), optional :: existflag
<SPAN      integer,          intent(out), optional :: userRc
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodExecute()
<SPAN    recursive subroutine ESMF_MethodGridCompExecute(gcomp, label, index, existflag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)                     :: gcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      logical,          intent(out), optional :: existflag
<SPAN      integer,          intent(out), optional :: userRc
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodExecute()
<SPAN    recursive subroutine ESMF_MethodStateExecute(state, label, index, existflag, &amp;
<SPAN      userRc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State)                        :: state
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      logical,          intent(out), optional :: existflag
<SPAN      integer,          intent(out), optional :: userRc
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodGet()
<SPAN    subroutine ESMF_MethodCplCompGet(cplcomp, label, index, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)                      :: cplcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      logical,          intent(out), optional :: isPresent
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodGet()
<SPAN    subroutine ESMF_MethodCplCompGetList(cplcomp, labelList, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)                                   :: cplcomp
<SPAN      character(len=:), allocatable, intent(out)           :: labelList(:)
<SPAN      integer,                       intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodGet()
<SPAN    subroutine ESMF_MethodGridCompGet(gcomp, label, index, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)                     :: gcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      logical,          intent(out), optional :: isPresent
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodGet()
<SPAN    subroutine ESMF_MethodGridCompGetList(gcomp, labelList, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)                                  :: gcomp
<SPAN      character(len=:), allocatable, intent(out)           :: labelList(:)
<SPAN      integer,                       intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodGet()
<SPAN    subroutine ESMF_MethodStateGet(state, label, index, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State)                        :: state
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      logical,          intent(out), optional :: isPresent
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodGet()
<SPAN    subroutine ESMF_MethodStateGetList(state, labelList, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State)                                     :: state
<SPAN      character(len=:), allocatable, intent(out)           :: labelList(:)
<SPAN      integer,                       intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodRemove()
<SPAN    subroutine ESMF_MethodCplCompRemove(cplcomp, label, index, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)                      :: cplcomp
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodRemove()
<SPAN    subroutine ESMF_MethodGridCompRemove(gcomp, label, index, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)                      :: gcomp
<SPAN      character(len=*),  intent(in)            :: label
<SPAN       integer,          intent(in),  optional :: index
<SPAN     integer,            intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MethodRemove()
<SPAN    subroutine ESMF_MethodStateRemove(state, label, index, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_State)                        :: state
<SPAN      character(len=*), intent(in)            :: label
<SPAN      integer,          intent(in),  optional :: index
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_WebServicesLoop(comp, portNum, clientId, registrarHost, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_GridComp)                         :: comp
<SPAN      integer,            intent(inout), optional :: portNum
<SPAN      character(len=*),   intent(in),    optional, target :: clientId
<SPAN      character(len=*),   intent(in),    optional, target :: registrarHost
<SPAN      integer,            intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_WebServicesCplCompLoop(comp, portNum, clientId, registrarHost, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_CplComp)                         :: comp
<SPAN      integer,           intent(inout), optional :: portNum
<SPAN      character(len=*),  intent(in),    optional, target :: clientId
<SPAN      character(len=*),  intent(in),    optional, target :: registrarHost
<SPAN      integer,           intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_RegridWeightGen()
<SPAN    subroutine ESMF_RegridWeightGenFile(srcFile, dstFile, &amp;
<SPAN      weightFile, rhFile, regridmethod, polemethod, regridPoleNPnts, lineType, normType, &amp;
<SPAN      extrapMethod, extrapNumSrcPnts, extrapDistExponent, extrapNumLevels, &amp;
<SPAN      unmappedaction, ignoreDegenerate, srcFileType, dstFileType, &amp;
<SPAN      srcRegionalFlag, dstRegionalFlag, srcMeshname, dstMeshname,  &amp;
<SPAN      srcMissingvalueFlag, srcMissingvalueVar, &amp;
<SPAN      dstMissingvalueFlag, dstMissingvalueVar, &amp;
<SPAN      useSrcCoordFlag, srcCoordinateVars, &amp;
<SPAN      useDstCoordFlag, dstCoordinateVars, &amp;
<SPAN      useSrcCornerFlag, useDstCornerFlag, &amp;
<SPAN      useUserAreaFlag, largefileFlag, &amp;
<SPAN      netcdf4fileFlag, weightOnlyFlag, &amp;
<SPAN      tileFilePath, &amp;
<SPAN      verboseFlag, checkFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> 
<SPAN    character(len=*),             intent(in)            :: srcFile
<SPAN    character(len=*),             intent(in)            :: dstFile
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    character(len=*),             intent(in),  optional :: weightFile
<SPAN    character(len=*),             intent(in),  optional :: rhFile
<SPAN    type(ESMF_RegridMethod_Flag), intent(in),  optional :: regridmethod
<SPAN    type(ESMF_PoleMethod_Flag),   intent(in),  optional :: polemethod
<SPAN    integer,                      intent(in),  optional :: regridPoleNPnts
<SPAN    type(ESMF_LineType_Flag),     intent(in),  optional :: lineType
<SPAN    type(ESMF_NormType_Flag),     intent(in),  optional :: normType
<SPAN    type(ESMF_ExtrapMethod_Flag),   intent(in),    optional :: extrapMethod
<SPAN    integer,                        intent(in),    optional :: extrapNumSrcPnts
<SPAN    real,                           intent(in),    optional :: extrapDistExponent
<SPAN    integer,                      intent(in), optional :: extrapNumLevels
<SPAN    type(ESMF_UnmappedAction_Flag),intent(in), optional :: unmappedaction
<SPAN    logical,                      intent(in),  optional :: ignoreDegenerate
<SPAN    type(ESMF_FileFormat_Flag),   intent(in),  optional :: srcFileType
<SPAN    type(ESMF_FileFormat_Flag),   intent(in),  optional :: dstFileType
<SPAN    logical,                      intent(in),  optional :: srcRegionalFlag
<SPAN    logical,                      intent(in),  optional :: dstRegionalFlag
<SPAN    character(len=*),             intent(in),  optional :: srcMeshname
<SPAN    character(len=*),             intent(in),  optional :: dstMeshname
<SPAN    logical,                      intent(in),  optional :: srcMissingValueFlag
<SPAN    character(len=*),             intent(in),  optional :: srcMissingValueVar
<SPAN    logical,                      intent(in),  optional :: dstMissingValueFlag
<SPAN    character(len=*),             intent(in),  optional :: dstMissingValueVar
<SPAN    logical,                      intent(in),  optional :: useSrcCoordFlag
<SPAN    character(len=*),             intent(in),  optional :: srcCoordinateVars(:)
<SPAN    logical,                      intent(in),  optional :: useDstCoordFlag
<SPAN    character(len=*),             intent(in),  optional :: dstCoordinateVars(:)
<SPAN    logical,                      intent(in),  optional :: useSrcCornerFlag
<SPAN    logical,                      intent(in),  optional :: useDstCornerFlag
<SPAN    logical,                      intent(in),  optional :: useUserAreaFlag
<SPAN    logical,                      intent(in),  optional :: largefileFlag
<SPAN    logical,                      intent(in),  optional :: netcdf4fileFlag
<SPAN    logical,                      intent(in),  optional :: weightOnlyFlag
<SPAN    character(len=*),             intent(in),  optional :: tileFilePath
<SPAN    logical,                      intent(in),  optional :: verboseFlag
<SPAN    logical,                      intent(in),  optional :: checkFlag
<SPAN    integer,                      intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_RegridWeightGen()
<SPAN    subroutine ESMF_RegridWeightGenDG(srcFile, dstFile, regridRouteHandle, &amp;
<SPAN      srcElementDistgrid, dstElementDistgrid, &amp;
<SPAN      srcNodalDistgrid, dstNodalDistgrid, &amp;
<SPAN      weightFile, regridmethod, lineType, normType, &amp;
<SPAN      extrapMethod, extrapNumSrcPnts, extrapDistExponent, extrapNumLevels,&amp;
<SPAN      unmappedaction, ignoreDegenerate, useUserAreaFlag, &amp;
<SPAN      largefileFlag, netcdf4fileFlag, &amp;
<SPAN      weightOnlyFlag, verboseFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> 
<SPAN    character(len=*),             intent(in)            :: srcFile
<SPAN    character(len=*),             intent(in)            :: dstFile
<SPAN    type(ESMF_RouteHandle),       intent(out)           :: regridRouteHandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DistGrid),          intent(in),  optional :: srcElementDistgrid
<SPAN    type(ESMF_DistGrid),          intent(in),  optional :: dstElementDistgrid
<SPAN    character(len=*),             intent(in),  optional :: weightFile
<SPAN    type(ESMF_DistGrid),          intent(in),  optional :: srcNodalDistgrid
<SPAN    type(ESMF_DistGrid),          intent(in),  optional :: dstNodalDistgrid
<SPAN    type(ESMF_RegridMethod_Flag), intent(in),  optional :: regridmethod
<SPAN    type(ESMF_LineType_Flag),     intent(in),  optional :: lineType
<SPAN    type(ESMF_NormType_Flag),     intent(in),  optional :: normType
<SPAN    type(ESMF_ExtrapMethod_Flag),   intent(in),    optional :: extrapMethod
<SPAN    integer,                        intent(in),    optional :: extrapNumSrcPnts
<SPAN    real,                           intent(in),    optional :: extrapDistExponent
<SPAN    integer,                      intent(in),  optional :: extrapNumLevels
<SPAN    type(ESMF_UnmappedAction_Flag),intent(in), optional :: unmappedaction
<SPAN    logical,                      intent(in),  optional :: ignoreDegenerate
<SPAN    logical,                      intent(in),  optional :: useUserAreaFlag
<SPAN    logical,                      intent(in),  optional :: largefileFlag
<SPAN    logical,                      intent(in),  optional :: netcdf4fileFlag
<SPAN    logical,                      intent(in),  optional :: weightOnlyFlag
<SPAN    logical,                      intent(in),  optional :: verboseFlag
<SPAN    integer,                      intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FileRegrid(srcFile, dstFile, srcVarName, dstVarName, &amp;
<SPAN      dstLoc, srcDataFile, dstDataFile, tileFilePath, &amp;
<SPAN      dstCoordVars, regridmethod, polemethod, regridPoleNPnts, &amp;
<SPAN      unmappedaction, ignoreDegenerate, srcRegionalFlag, dstRegionalFlag, &amp;
<SPAN      verboseFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> 
<SPAN    character(len=*),             intent(in)            :: srcFile
<SPAN    character(len=*),             intent(in)            :: dstFile
<SPAN    character(len=*),             intent(in)            :: srcVarName
<SPAN    character(len=*),             intent(in)            :: dstVarName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    character(len=*),             intent(in),  optional :: dstLoc
<SPAN    character(len=*),             intent(in),  optional :: srcDataFile     
<SPAN    character(len=*),             intent(in),  optional :: dstDataFile     
<SPAN    character(len=*),             intent(in),  optional :: tileFilePath
<SPAN    character(len=*),             intent(in),  optional :: dstCoordVars
<SPAN    type(ESMF_RegridMethod_Flag), intent(in),  optional :: regridmethod
<SPAN    type(ESMF_PoleMethod_Flag),   intent(in),  optional :: polemethod
<SPAN    integer,                      intent(in),  optional :: regridPoleNPnts
<SPAN    type(ESMF_UnmappedAction_Flag),intent(in), optional :: unmappedaction
<SPAN    logical,                      intent(in),  optional :: ignoreDegenerate
<SPAN    logical,                      intent(in),  optional :: srcRegionalFlag
<SPAN    logical,                      intent(in),  optional :: dstRegionalFlag
<SPAN    logical,                      intent(in),  optional :: verboseFlag
<SPAN    integer,                      intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   interface assignment(=)
<SPAN    fieldbundle1 = fieldbundle2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_FieldBundle) :: fieldbundle1
<SPAN    type(ESMF_FieldBundle) :: fieldbundle2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN    if (fieldbundle1 == fieldbundle2) then ... endif
<SPAN    OR
<SPAN    result = (fieldbundle1 == fieldbundle2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_FieldBundle), intent(in) :: fieldbundle1
<SPAN    type(ESMF_FieldBundle), intent(in) :: fieldbundle2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN    if (fieldbundle1 /= fieldbundle2) then ... endif
<SPAN    OR
<SPAN    result = (fieldbundle1 /= fieldbundle2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_FieldBundle), intent(in) :: fieldbundle1
<SPAN    type(ESMF_FieldBundle), intent(in) :: fieldbundle2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     ! Private name; call using ESMF_FieldBundleAdd()
<SPAN      subroutine ESMF_FieldBundleAddList(fieldbundle, fieldList, &amp;
<SPAN        multiflag, relaxedflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN      type(ESMF_Field), intent(in) :: fieldList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical, intent(in), optional :: multiflag
<SPAN      logical, intent(in), optional :: relaxedflag
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_FieldBundleAddReplace(fieldbundle, fieldList, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN      type(ESMF_Field), intent(in) :: fieldList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldBundleCreate()
<SPAN    function ESMF_FieldBundleCreateDefault(fieldList, &amp;
<SPAN        multiflag, relaxedflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle) :: ESMF_FieldBundleCreateDefault
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Field), intent(in), optional :: fieldList(:)
<SPAN      logical, intent(in), optional :: multiflag
<SPAN      logical, intent(in), optional :: relaxedflag
<SPAN      character (len=*),intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldBundleCreate() 
<SPAN    function ESMF_FieldBundleCreateGrid&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(fieldNameList, &amp; 
<SPAN    farrayPtr, grid, fieldDim, &amp; 
<SPAN    indexflag, staggerLoc, &amp; 
<SPAN    gridToFieldMap, &amp; 
<SPAN    totalLWidth, totalUWidth, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_FieldBundle) :: ESMF_FieldBundleCreateGridDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   character(len=*), intent(in) :: fieldNameList(:) 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), dimension(&lt;rank&gt;), pointer :: farrayPtr 
<SPAN    type(ESMF_Grid), intent(in) :: grid 
<SPAN    integer, intent(in) :: fieldDim 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_Index_Flag), intent(in), optional :: indexflag 
<SPAN    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: totalLWidth(:) 
<SPAN    integer, intent(in), optional :: totalUWidth(:) 
<SPAN    integer, intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldBundleCreate() 
<SPAN    function ESMF_FieldBundleCreateMesh&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(fieldNameList, &amp; 
<SPAN    farrayPtr, Mesh, fieldDim, &amp; 
<SPAN    meshLoc, gridToFieldMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_FieldBundle) :: ESMF_FieldBundleCreateMeshDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   character(len=*), intent(in) :: fieldNameList(:) 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), dimension(&lt;rank&gt;), pointer :: farrayPtr 
<SPAN    type(ESMF_Mesh), intent(in) :: mesh 
<SPAN    integer, intent(in) :: fieldDim 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_MeshLoc), intent(in), optional:: meshloc 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldBundleDestroy(fieldbundle, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical, intent(in), optional :: noGarbage
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN    The argument provides a mechanism to override the default garbage collection
<SPAN    mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     ! Private name; call using ESMF_FieldBundleGet()
<SPAN      subroutine ESMF_FieldBundleGetListAll(fieldbundle, &amp;
<SPAN        itemorderflag, geomtype, grid, locstream, mesh, xgrid, &amp;
<SPAN        fieldCount, fieldList, fieldNameList, isPacked, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(in) :: fieldbundle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_ItemOrder_Flag), intent(in), optional :: itemorderflag
<SPAN      type(ESMF_GeomType_Flag), intent(out), optional :: geomtype
<SPAN      type(ESMF_Grid), intent(out), optional :: grid
<SPAN      type(ESMF_LocStream), intent(out), optional :: locstream
<SPAN      type(ESMF_Mesh), intent(out), optional :: mesh
<SPAN      type(ESMF_XGrid), intent(out), optional :: xgrid
<SPAN      integer, intent(out), optional :: fieldCount
<SPAN      type(ESMF_Field), intent(out), optional :: fieldList(:)
<SPAN      character(len=*), intent(out), optional :: fieldNameList(:)
<SPAN      logical, intent(out), optional :: isPacked
<SPAN      character(len=*), intent(out), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>itemorderflag</TT>.
<SPAN    The new argument gives the user control over the order in which
<SPAN    the items are returned.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>isPacked</TT>.
<SPAN    The new argument allows the user to query if this is a packed FieldBundle.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     ! Private name; call using ESMF_FieldBundleGet()
<SPAN      subroutine ESMF_FieldBundleGetItem(fieldbundle, fieldName, &amp;
<SPAN        field, fieldCount, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(in) :: fieldbundle
<SPAN      character(len=*), intent(in) :: fieldName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Field), intent(out), optional :: field
<SPAN      integer, intent(out), optional :: fieldCount
<SPAN      logical, intent(out), optional :: isPresent
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     ! Private name; call using ESMF_FieldBundleGet()
<SPAN      subroutine ESMF_FieldBundleGetList(fieldbundle, fieldName, fieldList, &amp;
<SPAN        itemorderflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(in) :: fieldbundle
<SPAN      character(len=*), intent(in) :: fieldName
<SPAN      type(ESMF_Field), intent(out) :: fieldList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_ItemOrder_Flag), intent(in), optional :: itemorderflag
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>itemorderflag</TT>.
<SPAN    The new argument gives the user control over the order in which
<SPAN    the items are returned.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldBundleGet() 
<SPAN    function ESMF_FieldBundleGetDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(fieldBundle, &amp; 
<SPAN    localDe, farrayPtr, &amp; 
<SPAN    rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_FieldBundle) :: ESMF_FieldBundleGetDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_FieldBundle), intent(in) :: fieldBundle 
<SPAN    integer, intent(in), optional :: localDe 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), dimension(&lt;rank&gt;), pointer :: farrayPtr 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldBundleHalo(fieldbundle, routehandle, &amp;
<SPAN      checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN          type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical, intent(in), optional :: checkflag
<SPAN          integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldBundleHaloRelease(routehandle, &amp;
<SPAN      noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical, intent(in), optional :: noGarbage
<SPAN          integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN    The argument provides a mechanism to override the default garbage collection
<SPAN    mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_FieldBundleHaloStore(fieldbundle, routehandle, &amp;
<SPAN        rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN      type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_FieldBundleIsCreated(fieldbundle, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_FieldBundleIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(in) :: fieldbundle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldBundlePrint(fieldbundle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(in) :: fieldbundle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldBundleRead(fieldbundle, fileName, &amp;
<SPAN      singleFile, timeslice, iofmt, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN      character(*), intent(in) :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical, intent(in), optional :: singleFile
<SPAN      integer, intent(in), optional :: timeslice
<SPAN      type(ESMF_IOFmt_Flag), intent(in), optional :: iofmt
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldBundleRedist(srcFieldBundle, dstFieldBundle, &amp;
<SPAN      routehandle, checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_FieldBundle), intent(in), optional :: srcFieldBundle
<SPAN          type(ESMF_FieldBundle), intent(inout), optional :: dstFieldBundle
<SPAN          type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical, intent(in), optional :: checkflag
<SPAN          integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldBundleRedistRelease(routehandle, &amp;
<SPAN      noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical, intent(in), optional :: noGarbage
<SPAN          integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN    The argument provides a mechanism to override the default garbage collection
<SPAN    mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldBundleRedistStore()
<SPAN    subroutine ESMF_FieldBundleRedistStore&lt;type&gt;&lt;kind&gt;(srcFieldBundle, &amp;
<SPAN    dstFieldBundle, routehandle, factor, &amp;
<SPAN    ignoreUnmatchedIndicesFlag, srcToDstTransposeMap, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_FieldBundle), intent(in) :: srcFieldBundle
<SPAN    type(ESMF_FieldBundle), intent(inout) :: dstFieldBundle
<SPAN    type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN    &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), intent(in) :: factor
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    logical, intent(in), optional :: ignoreUnmatchedIndicesFlag(:)
<SPAN    integer, intent(in), optional :: srcToDstTransposeMap(:)
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>ignoreUnmatchedIndicesFlag</TT> to support cases
<SPAN    where source and destination side do not cover the exact same index space.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldBundleRedistStore()
<SPAN    subroutine ESMF_FieldBundleRedistStoreNF(srcFieldBundle, dstFieldBundle, &amp;
<SPAN      routehandle, ignoreUnmatchedIndicesFlag, &amp;
<SPAN      srcToDstTransposeMap, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(in) :: srcFieldBundle
<SPAN      type(ESMF_FieldBundle), intent(inout) :: dstFieldBundle
<SPAN      type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical, intent(in), optional :: ignoreUnmatchedIndicesFlag(:)
<SPAN      integer, intent(in), optional :: srcToDstTransposeMap(:)
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>ignoreUnmatchedIndicesFlag</TT> to support cases
<SPAN    where source and destination side do not cover the exact same index space.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldBundleRegrid(srcFieldBundle, dstFieldBundle, &amp;
<SPAN           routehandle, zeroregion, termorderflag, checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_FieldBundle), intent(in), optional :: srcFieldBundle
<SPAN          type(ESMF_FieldBundle), intent(inout), optional :: dstFieldBundle
<SPAN          type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          type(ESMF_Region_Flag), intent(in), optional :: zeroregion
<SPAN          type(ESMF_TermOrder_Flag), intent(in), optional :: termorderflag(:)
<SPAN          logical, intent(in), optional :: checkflag
<SPAN          integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>termorderflag</TT>.
<SPAN    The new argument gives the user control over the order in which
<SPAN    the src terms are summed up.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldBundleRegridRelease(routehandle, &amp;
<SPAN      noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical, intent(in), optional :: noGarbage
<SPAN          integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN    The argument provides a mechanism to override the default garbage collection
<SPAN    mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldBundleRegridStore(srcFieldBundle, dstFieldBundle, &amp;
<SPAN         srcMaskValues, dstMaskValues, regridmethod, polemethod, regridPoleNPnts, &amp;
<SPAN         lineType, normType, extrapMethod, extrapNumSrcPnts, extrapDistExponent, &amp;
<SPAN         extrapNumLevels, unmappedaction, ignoreDegenerate, srcTermProcessing, &amp;
<SPAN         pipelineDepth, routehandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(in) :: srcFieldBundle
<SPAN      type(ESMF_FieldBundle), intent(inout) :: dstFieldBundle
<SPAN      integer(ESMF_KIND_I4), intent(in), optional :: srcMaskValues(:)
<SPAN      integer(ESMF_KIND_I4), intent(in), optional :: dstMaskValues(:)
<SPAN      type(ESMF_RegridMethod_Flag), intent(in), optional :: regridmethod
<SPAN      type(ESMF_PoleMethod_Flag), intent(in), optional :: polemethod
<SPAN      integer, intent(in), optional :: regridPoleNPnts
<SPAN      type(ESMF_LineType_Flag), intent(in), optional :: lineType
<SPAN      type(ESMF_NormType_Flag), intent(in), optional :: normType
<SPAN      type(ESMF_ExtrapMethod_Flag), intent(in), optional :: extrapMethod
<SPAN      integer, intent(in), optional :: extrapNumSrcPnts
<SPAN      real, intent(in), optional :: extrapDistExponent
<SPAN      integer, intent(in), optional :: extrapNumLevels
<SPAN      type(ESMF_UnmappedAction_Flag),intent(in), optional :: unmappedaction
<SPAN      logical, intent(in), optional :: ignoreDegenerate
<SPAN      integer, intent(inout), optional :: srcTermProcessing
<SPAN      integer, intent(inout), optional :: pipelineDepth
<SPAN      type(ESMF_RouteHandle), intent(inout), optional :: routehandle
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added arguments <TT>ignoreDegenerate</TT>, <TT>lineType</TT>,
<SPAN    and <TT>normType</TT>. The argument <TT>ignoreDegenerate</TT> allows the user to skip degenerate
<SPAN    cells in the regridding instead of stopping with an error.
<SPAN    The argument <TT>lineType</TT> allows the user to
<SPAN    control the path of the line between two points on a sphere surface.
<SPAN    This allows the user to use their preferred line path for the calculation
<SPAN    of distances and the shape of cells during regrid weight calculation on
<SPAN    a sphere. The argument <TT>normType</TT> allows the user to
<SPAN    control the type of normalization done during conservative weight generation.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>srcTermProcessing</TT>.
<SPAN    Added argument <TT>pipelineDepth</TT>.
<SPAN    The new arguments provide access to the tuning parameters
<SPAN    affecting the performance and bit-for-bit behavior when applying
<SPAN    the regridding weights.
<SPAN 
<SPAN <P>
<SPAN Added arguments <TT>extrapMethod</TT>, <TT>extrapNumSrcPnts</TT>, and
<SPAN    <TT>extrapDistExponent</TT>. These three new extrapolation arguments allow the
<SPAN    user to extrapolate destination points not mapped by the regrid method.
<SPAN    <TT>extrapMethod</TT> allows the user to choose the extrapolation method.
<SPAN    <TT>extrapNumSrcPnts</TT> and <TT>extrapDistExponent</TT> are parameters that
<SPAN    allow the user to tune the behavior of the <TT>ESMF_EXTRAPMETHOD_NEAREST_IDAVG</TT>
<SPAN    method.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>extrapNumLevels</TT>. For level based extrapolation methods
<SPAN    (e.g. <TT>ESMF_EXTRAPMETHOD_CREEP</TT>) this argument allows the user to
<SPAN    set how many levels to extrapolate.
<SPAN   !
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldBundleRemove(fieldbundle, fieldNameList, &amp;
<SPAN      multiflag, relaxedflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN      character(len=*), intent(in) :: fieldNameList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical, intent(in), optional :: multiflag
<SPAN      logical, intent(in), optional :: relaxedflag
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldBundleReplace(fieldbundle, fieldList, &amp;
<SPAN      multiflag, relaxedflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN      type(ESMF_Field), intent(in) :: fieldList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical, intent(in), optional :: multiflag
<SPAN      logical, intent(in), optional :: relaxedflag
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_FieldBundleSet()
<SPAN        subroutine ESMF_FieldBundleSetGrid(fieldbundle, grid, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN        type(ESMF_Grid), intent(in) :: grid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_FieldBundleSet()
<SPAN        subroutine ESMF_FieldBundleSetMesh(fieldbundle, mesh, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN        type(ESMF_Mesh), intent(in) :: mesh
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_FieldBundleSet()
<SPAN        subroutine ESMF_FieldBundleSetLS(fieldbundle, locstream, &amp;
<SPAN          rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN        type(ESMF_LocStream), intent(in) :: locstream
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_FieldBundleSet()
<SPAN        subroutine ESMF_FieldBundleSetXGrid(fieldbundle, xgrid, &amp;
<SPAN          rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_FieldBundle), intent(inout) :: fieldbundle
<SPAN        type(ESMF_XGrid), intent(in) :: xgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldBundleSMM(srcFieldBundle, dstFieldBundle, &amp;
<SPAN      routehandle, &amp;
<SPAN      zeroregion, &amp; ! DEPRECATED ARGUMENT
<SPAN      zeroregionflag, termorderflag, checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(in), optional :: srcFieldBundle
<SPAN      type(ESMF_FieldBundle), intent(inout), optional :: dstFieldBundle
<SPAN      type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Region_Flag), intent(in), optional :: zeroregion ! DEPRECATED ARGUMENT
<SPAN      type(ESMF_Region_Flag), intent(in), target, optional :: zeroregionflag(:)
<SPAN      type(ESMF_TermOrder_Flag), intent(in), optional :: termorderflag(:)
<SPAN      logical, intent(in), optional :: checkflag
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>termorderflag</TT>.
<SPAN    The new argument gives the user control over the order in which
<SPAN    the src terms are summed up.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>zeroregionflag</TT>, and deprecated
<SPAN    <TT>zeroregion</TT>. The new argument allows greater flexibility
<SPAN    in setting the zero region for individual FieldBundle members.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldBundleSMMRelease(routehandle, &amp;
<SPAN      noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical, intent(in), optional :: noGarbage
<SPAN          integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN    The argument provides a mechanism to override the default garbage collection
<SPAN    mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldBundleSMMStore()
<SPAN    subroutine ESMF_FieldBundleSMMStore&lt;type&gt;&lt;kind&gt;(srcFieldBundle, &amp;
<SPAN    dstFieldBundle, routehandle, factorList, factorIndexList, &amp;
<SPAN    ignoreUnmatchedIndicesFlag, srcTermProcessing, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_FieldBundle), intent(in) :: srcFieldBundle
<SPAN    type(ESMF_FieldBundle), intent(inout) :: dstFieldBundle
<SPAN    type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN    &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), intent(in) :: factorList(:)
<SPAN    integer, intent(in), :: factorIndexList(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    logical, intent(in), optional :: ignoreUnmatchedIndicesFlag(:)
<SPAN    integer, intent(inout), optional :: srcTermProcessing(:)
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>srcTermProcessing</TT>.
<SPAN    The new argument gives the user access to the tuning parameter
<SPAN    affecting the sparse matrix execution and bit-wise
<SPAN    reproducibility.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>ignoreUnmatchedIndicesFlag</TT> to support cases
<SPAN    where the sparse matrix includes terms with source or destination sequence
<SPAN    indices not present in the source or destination field.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldBundleSMMStore()
<SPAN      subroutine ESMF_FieldBundleSMMStoreNF(srcFieldBundle, dstFieldBundle, &amp;
<SPAN          routehandle, ignoreUnmatchedIndicesFlag, &amp;
<SPAN          srcTermProcessing, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_FieldBundle), intent(in) :: srcFieldBundle
<SPAN          type(ESMF_FieldBundle), intent(inout) :: dstFieldBundle
<SPAN          type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical, intent(in), optional :: ignoreUnmatchedIndicesFlag(:)
<SPAN          integer, intent(inout), optional :: srcTermProcessing(:)
<SPAN          integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>srcTermProcessing</TT>.
<SPAN    The new argument gives the user access to the tuning parameter
<SPAN    affecting the sparse matrix execution and bit-wise
<SPAN    reproducibility.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>ignoreUnmatchedIndicesFlag</TT> to support cases
<SPAN    where the sparse matrix includes terms with source or destination sequence
<SPAN    indices not present in the source or destination field.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldBundleSMMStore()
<SPAN      subroutine ESMF_FieldBundleSMMStoreFromFile(srcFieldBundle, dstFieldBundle, &amp;
<SPAN        filename, routehandle, ignoreUnmatchedIndicesFlag, &amp;
<SPAN        srcTermProcessing, rc)
<SPAN    ! ARGUMENTS:
<SPAN        type(ESMF_FieldBundle), intent(in) :: srcFieldBundle
<SPAN        type(ESMF_FieldBundle), intent(inout) :: dstFieldBundle
<SPAN        character(len=*), intent(in) :: filename
<SPAN        type(ESMF_RouteHandle), intent(inout) :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical, intent(in), optional :: ignoreUnmatchedIndicesFlag(:)
<SPAN        integer, intent(inout), optional :: srcTermProcessing(:)
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldBundleValidate(fieldbundle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(in) :: fieldbundle
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldBundleWrite(fieldbundle, fileName, &amp;
<SPAN        convention, purpose, singleFile, overwrite, status, timeslice, iofmt, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_FieldBundle), intent(in) :: fieldbundle
<SPAN      character(*), intent(in) :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(*), intent(in), optional :: convention
<SPAN      character(*), intent(in), optional :: purpose
<SPAN      logical, intent(in), optional :: singleFile
<SPAN      logical , intent(in), optional :: overwrite
<SPAN      type(ESMF_FileStatus_Flag), intent(in), optional :: status
<SPAN      integer, intent(in), optional :: timeslice
<SPAN      type(ESMF_IOFmt_Flag), intent(in), optional :: iofmt
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   interface assignment(=)
<SPAN    field1 = field2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field) :: field1
<SPAN    type(ESMF_Field) :: field2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN    if (field1 == field2) then ... endif
<SPAN    OR
<SPAN    result = (field1 == field2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(in) :: field1
<SPAN    type(ESMF_Field), intent(in) :: field2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN    if (field1 /= field2) then ... endif
<SPAN    OR
<SPAN    result = (field1 /= field2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(in) :: field1
<SPAN    type(ESMF_Field), intent(in) :: field2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldCopy(fieldOut, fieldIn, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_Field), intent(inout) :: fieldOut
<SPAN         type(ESMF_Field), intent(in) :: fieldIn
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateGridTKR(grid, typekind, &amp;
<SPAN      indexflag, staggerloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp;
<SPAN      totalLWidth, totalUWidth, pinflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateGridTKR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid), intent(in) :: grid
<SPAN      type(ESMF_TypeKind_Flag),intent(in) :: typekind
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Index_Flag), intent(in), optional :: indexflag
<SPAN      type(ESMF_StaggerLoc), intent(in), optional :: staggerloc
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      integer, intent(in), optional :: totalLWidth(:)
<SPAN      integer, intent(in), optional :: totalUWidth(:)
<SPAN      type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN      character (len=*), intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pinflag</TT> to provide access to DE sharing
<SPAN    between PETs.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateGridArraySpec(grid, arrayspec, &amp;
<SPAN      indexflag, staggerloc, gridToFieldMap, ungriddedLBound, &amp;
<SPAN      ungriddedUBound, totalLWidth, totalUWidth, pinflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateGridArraySpec
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid), intent(in) :: grid
<SPAN      type(ESMF_ArraySpec), intent(in) :: arrayspec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Index_Flag), intent(in), optional :: indexflag
<SPAN      type(ESMF_StaggerLoc), intent(in), optional :: staggerloc
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      integer, intent(in), optional :: totalLWidth(:)
<SPAN      integer, intent(in), optional :: totalUWidth(:)
<SPAN      type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN      character (len=*), intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pinflag</TT> to provide access to DE sharing
<SPAN    between PETs.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateGridArray(grid, array, datacopyflag, &amp;
<SPAN      staggerloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp;
<SPAN      totalLWidth, totalUWidth, name, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateGridArray
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid), intent(in) :: grid
<SPAN      type(ESMF_Array), intent(in) :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
<SPAN      type(ESMF_StaggerLoc), intent(in), optional :: staggerloc
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      integer, intent(in), optional :: totalLWidth(:)
<SPAN      integer, intent(in), optional :: totalUWidth(:)
<SPAN      character (len = *), intent(in), optional :: name
<SPAN      type(ESMF_VM), intent(in), optional :: vm
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>vm</TT> to support object creation on a
<SPAN    different VM than that of the current context.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate() 
<SPAN    function ESMF_FieldCreateGridData&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(grid, &amp; 
<SPAN    farray, indexflag, datacopyflag, staggerloc, &amp; 
<SPAN    gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp; 
<SPAN    totalLWidth, totalUWidth, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Field) :: ESMF_FieldCreateGridData&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Grid), intent(in) :: grid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;),intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: ungriddedLBound(:) 
<SPAN    integer, intent(in), optional :: ungriddedUBound(:) 
<SPAN    integer, intent(in), optional :: totalLWidth(:) 
<SPAN    integer, intent(in), optional :: totalUWidth(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate() 
<SPAN    function ESMF_FieldCreateGridDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(grid, &amp; 
<SPAN    farrayPtr, datacopyflag, staggerloc, gridToFieldMap, &amp; 
<SPAN    totalLWidth, totalUWidth, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Field) :: ESMF_FieldCreateGridDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Grid), intent(in) :: grid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: totalLWidth(:) 
<SPAN    integer, intent(in), optional :: totalUWidth(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateLSTKR(locstream, typekind, &amp;
<SPAN      gridToFieldMap, ungriddedLBound, ungriddedUBound, pinflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateLSTKR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocStream), intent(in) :: locstream
<SPAN      type(ESMF_TypeKind_Flag),intent(in) :: typekind
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN      character (len=*), intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateLSArraySpec(locstream, arrayspec, &amp;
<SPAN      gridToFieldMap, ungriddedLBound, ungriddedUBound, pinflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateLSArraySpec
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocStream), intent(in) :: locstream
<SPAN      type(ESMF_ArraySpec), intent(in) :: arrayspec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN      character (len=*), intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateLSArray(locstream, array, &amp;
<SPAN      datacopyflag, gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp;
<SPAN      name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateLSArray
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocStream), intent(in) :: locstream
<SPAN      type(ESMF_Array), intent(in) :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      character (len = *), intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate() 
<SPAN    function ESMF_FieldCreateLSData&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(locstream, farray, &amp; 
<SPAN    indexflag, datacopyflag, gridToFieldMap, ungriddedLBound, &amp; 
<SPAN    ungriddedUBound, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Field) :: ESMF_FieldCreateLSData&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_LocStream), intent(in) :: locstream 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;),intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: ungriddedLBound(:) 
<SPAN    integer, intent(in), optional :: ungriddedUBound(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate() 
<SPAN    function ESMF_FieldCreateLSDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(locstream, &amp; 
<SPAN    farrayPtr, datacopyflag, gridToFieldMap, &amp; 
<SPAN    name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Field) :: ESMF_FieldCreateLSDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_LocStream), intent(in) :: locstream 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;),pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateMeshTKR(mesh, typekind, indexflag, &amp;
<SPAN      meshloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp;
<SPAN      pinflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateMeshTKR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh), intent(in) :: mesh
<SPAN      type(ESMF_TypeKind_Flag), intent(in) :: typekind
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Index_Flag), intent(in), optional :: indexflag
<SPAN      type(ESMF_MeshLoc), intent(in), optional :: meshloc
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN      character (len=*), intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateMeshArraySpec(mesh, arrayspec, &amp;
<SPAN      indexflag, meshloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp;
<SPAN      pinflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateMeshArraySpec
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh), intent(in) :: mesh
<SPAN      type(ESMF_ArraySpec), intent(in) :: arrayspec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Index_Flag),intent(in), optional :: indexflag
<SPAN      type(ESMF_MeshLoc), intent(in), optional :: meshloc
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN      character (len=*), intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateMeshArray(mesh, array, &amp;
<SPAN      datacopyflag, meshloc, &amp;
<SPAN      gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp;
<SPAN      name, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateMeshArray
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh), intent(in) :: mesh
<SPAN      type(ESMF_Array), intent(in) :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
<SPAN      type(ESMF_MeshLoc), intent(in), optional :: meshloc
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      character (len = *), intent(in), optional :: name
<SPAN      type(ESMF_VM), intent(in), optional :: vm
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate() 
<SPAN    function ESMF_FieldCreateMeshData&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(mesh, &amp; 
<SPAN    farray, indexflag, datacopyflag, meshloc, &amp; 
<SPAN    gridToFieldMap, ungriddedLBound, ungriddedUBound, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Field) :: ESMF_FieldCreateMeshData&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Mesh), intent(in) :: mesh 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;),intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_MeshLoc), intent(in), optional :: meshloc 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: ungriddedLBound(:) 
<SPAN    integer, intent(in), optional :: ungriddedUBound(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate() 
<SPAN    function ESMF_FieldCreateMeshDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(mesh, &amp; 
<SPAN    farrayPtr, datacopyflag, meshloc, gridToFieldMap, &amp; 
<SPAN    name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Field) :: ESMF_FieldCreateMeshDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Mesh), intent(in) :: mesh 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;),pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_MeshLoc), intent(in), optional :: meshloc 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateXGTKR(xgrid, typekind, xgridside, &amp;
<SPAN      gridindex, gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp;
<SPAN      pinflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateXGTKR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_XGrid), intent(in) :: xgrid
<SPAN      type(ESMF_TypeKind_Flag), intent(in) :: typekind
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside
<SPAN      integer, intent(in), optional :: gridindex
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN      character (len=*), intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateXGArraySpec(xgrid, arrayspec, &amp;
<SPAN      xgridside, gridindex, gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp;
<SPAN      pinflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateXGArraySpec
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_XGrid), intent(in) :: xgrid
<SPAN      type(ESMF_ArraySpec), intent(in) :: arrayspec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_XGridSide_Flag), intent(in), optional :: xgridSide
<SPAN      integer, intent(in), optional :: gridIndex
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN      character (len=*), intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate()
<SPAN    function ESMF_FieldCreateXGArray(xgrid, array, &amp;
<SPAN      datacopyflag, xgridside, gridindex, &amp;
<SPAN      gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp;
<SPAN      name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldCreateXGArray
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_XGrid), intent(in) :: xgrid
<SPAN      type(ESMF_Array), intent(in) :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
<SPAN      type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside
<SPAN      integer, intent(in), optional :: gridindex
<SPAN      integer, intent(in), optional :: gridToFieldMap(:)
<SPAN      integer, intent(in), optional :: ungriddedLBound(:)
<SPAN      integer, intent(in), optional :: ungriddedUBound(:)
<SPAN      character (len = *), intent(in), optional :: name
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate() 
<SPAN    function ESMF_FieldCreateXGData&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(xgrid, &amp; 
<SPAN    farray, indexflag, datacopyflag, xgridside, gridindex, &amp; 
<SPAN    gridToFieldMap, ungriddedLBound, ungriddedUBound, name,&amp; 
<SPAN    rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Field) :: ESMF_FieldCreateXGData&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_XGrid), intent(in) :: xgrid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside 
<SPAN    integer, intent(in), optional :: gridindex 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: ungriddedLBound(:) 
<SPAN    integer, intent(in), optional :: ungriddedUBound(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldCreate() 
<SPAN    function ESMF_FieldCreateXGDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(xgrid, farrayPtr, &amp; 
<SPAN    datacopyflag, xgridside, &amp; 
<SPAN    gridindex, gridToFieldMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Field) :: ESMF_FieldCreateXGDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_XGrid), intent(in) :: xgrid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside 
<SPAN    integer, intent(in), optional :: gridindex 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldDestroy(field, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field), intent(inout) :: field
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical, intent(in), optional :: noGarbage
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN    The argument provides a mechanism to override the default garbage collection
<SPAN    mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete()
<SPAN  subroutine ESMF_FieldEmptyCompAS(field, arrayspec, indexflag, &amp;
<SPAN   gridToFieldMap, ungriddedLBound, ungriddedUBound, totalLWidth, totalUWidth, &amp;
<SPAN   pinflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>  type(ESMF_Field), intent(inout) :: field
<SPAN   type(ESMF_ArraySpec), intent(in) :: arrayspec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN   type(ESMF_Index_Flag), intent(in), optional :: indexflag
<SPAN   integer, intent(in), optional :: gridToFieldMap(:)
<SPAN   integer, intent(in), optional :: ungriddedLBound(:)
<SPAN   integer, intent(in), optional :: ungriddedUBound(:)
<SPAN   integer, intent(in), optional :: totalLWidth(:)
<SPAN   integer, intent(in), optional :: totalUWidth(:)
<SPAN   type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN   integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pinflag</TT> to provide access to DE sharing
<SPAN    between PETs.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete()
<SPAN  subroutine ESMF_FieldEmptyCompTK(field, typekind, indexflag, &amp;
<SPAN   gridToFieldMap, ungriddedLBound, ungriddedUBound, totalLWidth, totalUWidth, &amp;
<SPAN   pinflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>  type(ESMF_Field), intent(inout) :: field
<SPAN   type(ESMF_TypeKind_Flag), intent(in) :: typekind
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN   type(ESMF_Index_Flag), intent(in), optional :: indexflag
<SPAN   integer, intent(in), optional :: gridToFieldMap(:)
<SPAN   integer, intent(in), optional :: ungriddedLBound(:)
<SPAN   integer, intent(in), optional :: ungriddedUBound(:)
<SPAN   integer, intent(in), optional :: totalLWidth(:)
<SPAN   integer, intent(in), optional :: totalUWidth(:)
<SPAN   type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN   integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pinflag</TT> to provide access to DE sharing
<SPAN    between PETs.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete() 
<SPAN    subroutine ESMF_FieldEmptyComp&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, &amp; 
<SPAN    farray, indexflag, datacopyflag, gridToFieldMap, &amp; 
<SPAN    ungriddedLBound, ungriddedUBound, totalLWidth, totalUWidth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;),intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: ungriddedLBound(:) 
<SPAN    integer, intent(in), optional :: ungriddedUBound(:) 
<SPAN    integer, intent(in), optional :: totalLWidth(:) 
<SPAN    integer, intent(in), optional :: totalUWidth(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete() 
<SPAN    subroutine ESMF_FieldEmptyCompPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, &amp; 
<SPAN    farrayPtr, datacopyflag, gridToFieldMap, &amp; 
<SPAN    totalLWidth, totalUWidth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: totalLWidth(:) 
<SPAN    integer, intent(in), optional :: totalUWidth(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete() 
<SPAN    subroutine ESMF_FieldEmptyCompGrid&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, grid, &amp; 
<SPAN    farray, indexflag, datacopyflag, staggerloc, gridToFieldMap, &amp; 
<SPAN    ungriddedLBound, ungriddedUBound, totalLWidth, totalUWidth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    type(ESMF_Grid), intent(in) :: grid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;),intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_STAGGERLOC), intent(in), optional :: staggerloc 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: ungriddedLBound(:) 
<SPAN    integer, intent(in), optional :: ungriddedUBound(:) 
<SPAN    integer, intent(in), optional :: totalLWidth(:) 
<SPAN    integer, intent(in), optional :: totalUWidth(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete() 
<SPAN    subroutine ESMF_FieldEmptyCompGridPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, grid, &amp; 
<SPAN    farrayPtr, datacopyflag, staggerloc, gridToFieldMap, &amp; 
<SPAN    totalLWidth, totalUWidth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    type(ESMF_Grid), intent(in) :: grid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_STAGGERLOC), intent(in), optional :: staggerloc 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: totalLWidth(:) 
<SPAN    integer, intent(in), optional :: totalUWidth(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete() 
<SPAN    subroutine ESMF_FieldEmptyCompLS&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, locstream, &amp; 
<SPAN    farray, indexflag, datacopyflag, gridToFieldMap, &amp; 
<SPAN    ungriddedLBound, ungriddedUBound, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    type(ESMF_LocStream), intent(in) :: locstream 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: ungriddedLBound(:) 
<SPAN    integer, intent(in), optional :: ungriddedUBound(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete() 
<SPAN    subroutine ESMF_FieldEmptyCompLSPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, locstream, &amp; 
<SPAN    farrayPtr, datacopyflag, gridToFieldMap, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    type(ESMF_LocStream), intent(in) :: locstream 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete() 
<SPAN    subroutine ESMF_FieldEmptyCompMesh&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, mesh, &amp; 
<SPAN    farray, indexflag, datacopyflag, meshloc, &amp; 
<SPAN    gridToFieldMap, ungriddedLBound, ungriddedUBound, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    type(ESMF_Mesh), intent(in) :: mesh 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_MeshLoc), intent(in), optional :: meshloc 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: ungriddedLBound(:) 
<SPAN    integer, intent(in), optional :: ungriddedUBound(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete() 
<SPAN    subroutine ESMF_FieldEmptyCompMeshPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, mesh, &amp; 
<SPAN    farrayPtr, datacopyflag, meshloc, gridToFieldMap, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    type(ESMF_Mesh), intent(in) :: mesh 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_MeshLoc), intent(in), optional :: meshloc 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete() 
<SPAN    subroutine ESMF_FieldEmptyCompXG&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, xgrid, &amp; 
<SPAN    farray, indexflag, datacopyflag, xgridside, gridindex, &amp; 
<SPAN    gridToFieldMap, &amp; 
<SPAN    ungriddedLBound, ungriddedUBound, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    type(ESMF_XGrid), intent(in) :: xgrid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside 
<SPAN    integer, intent(in), optional :: gridindex 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(in), optional :: ungriddedLBound(:) 
<SPAN    integer, intent(in), optional :: ungriddedUBound(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptyComplete() 
<SPAN    subroutine ESMF_FieldEmptyCompXGPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, xgrid, &amp; 
<SPAN    farrayPtr, xgridside, gridindex, &amp; 
<SPAN    datacopyflag, gridToFieldMap, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    type(ESMF_XGrid), intent(in) :: xgrid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside 
<SPAN    integer, intent(in), optional :: gridindex 
<SPAN    integer, intent(in), optional :: gridToFieldMap(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_FieldEmptyCreate(name, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Field) :: ESMF_FieldEmptyCreate
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character (len = *), intent(in), optional :: name
<SPAN      type(ESMF_VM), intent(in), optional :: vm
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>vm</TT> to support object creation on a
<SPAN    different VM than that of the current context.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptySet()
<SPAN    subroutine ESMF_FieldEmptySetGrid(field, grid, StaggerLoc, &amp;
<SPAN      vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field
<SPAN    type(ESMF_Grid), intent(in) :: grid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_STAGGERLOC), intent(in), optional :: StaggerLoc
<SPAN    type(ESMF_VM), intent(in), optional :: vm
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>vm</TT> to support object creation on a
<SPAN    different VM than that of the current context.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptySet()
<SPAN    subroutine ESMF_FieldEmptySetMesh(field, mesh, indexflag, meshloc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field
<SPAN    type(ESMF_Mesh), intent(in) :: mesh
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_Index_Flag),intent(in), optional :: indexflag
<SPAN    type(ESMF_MeshLoc), intent(in), optional :: meshloc
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptySet()
<SPAN    subroutine ESMF_FieldEmptySetLocStream(field, locstream, &amp;
<SPAN      vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field
<SPAN    type(ESMF_LocStream), intent(in) :: locstream
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_VM), intent(in), optional :: vm
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldEmptySet()
<SPAN    subroutine ESMF_FieldEmptySetXGrid(field, xgrid, xgridside, gridindex, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field
<SPAN    type(ESMF_XGrid), intent(in) :: xgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_XGridSide_Flag), intent(in), optional :: xgridside
<SPAN    integer, intent(in), optional :: gridindex
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldFill(field, dataFillScheme, &amp;
<SPAN      const1, member, step, &amp;
<SPAN      param1I4, param2I4, param3I4, &amp;
<SPAN      param1R4, param2R4, param3R4, &amp;
<SPAN      param1R8, param2R8, param3R8, &amp;
<SPAN      rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field), intent(inout) :: field
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*), intent(in), optional :: dataFillScheme
<SPAN      real(ESMF_KIND_R8), intent(in), optional :: const1
<SPAN      integer, intent(in), optional :: member
<SPAN      integer, intent(in), optional :: step
<SPAN      integer(ESMF_KIND_I4), intent(in), optional :: param1I4
<SPAN      integer(ESMF_KIND_I4), intent(in), optional :: param2I4
<SPAN      integer(ESMF_KIND_I4), intent(in), optional :: param3I4
<SPAN      real(ESMF_KIND_R4), intent(in), optional :: param1R4
<SPAN      real(ESMF_KIND_R4), intent(in), optional :: param2R4
<SPAN      real(ESMF_KIND_R4), intent(in), optional :: param3R4
<SPAN      real(ESMF_KIND_R8), intent(in), optional :: param1R8
<SPAN      real(ESMF_KIND_R8), intent(in), optional :: param2R8
<SPAN      real(ESMF_KIND_R8), intent(in), optional :: param3R8
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldGather&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, farray, &amp; 
<SPAN    rootPet, tile, vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(in) :: field 
<SPAN    &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), intent(out), target :: farray(&lt;rank&gt;) 
<SPAN    integer, intent(in) :: rootPet 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(in), optional :: tile 
<SPAN    type(ESMF_VM), intent(in), optional :: vm 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldGet()
<SPAN    subroutine ESMF_FieldGetDefault(field, arrayspec, &amp;
<SPAN      status, geomtype, grid, mesh, locstream, xgrid, array, localarrayList, &amp;
<SPAN      typekind, dimCount, rank, staggerloc, meshloc, xgridside, &amp;
<SPAN      gridindex, gridToFieldMap, ungriddedLBound, ungriddedUBound, &amp;
<SPAN      totalLWidth, totalUWidth, localDeCount, ssiLocalDeCount, &amp;
<SPAN      localDeToDeMap, minIndex, maxIndex, elementCount, &amp;
<SPAN      localMinIndex, localMaxIndex, localElementCount, name, vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field), intent(in) :: field
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_ArraySpec), intent(out), optional :: arrayspec
<SPAN      type(ESMF_FieldStatus_Flag),intent(out), optional :: status
<SPAN      type(ESMF_GeomType_Flag), intent(out), optional :: geomtype
<SPAN      type(ESMF_Grid), intent(out), optional :: grid
<SPAN      type(ESMF_Mesh), intent(out), optional :: mesh
<SPAN      type(ESMF_LocStream), intent(out), optional :: locstream
<SPAN      type(ESMF_XGrid), intent(out), optional :: xgrid
<SPAN      type(ESMF_Array), intent(out), optional :: array
<SPAN      type(ESMF_LocalArray), target, intent(out), optional :: localarrayList(:)
<SPAN      type(ESMF_TypeKind_Flag), intent(out), optional :: typekind
<SPAN      integer, intent(out), optional :: dimCount
<SPAN      integer, intent(out), optional :: rank
<SPAN      type(ESMF_StaggerLoc), intent(out), optional :: staggerloc
<SPAN      type(ESMF_MeshLoc), intent(out), optional :: meshloc
<SPAN      type(ESMF_XGridSide_Flag), intent(out), optional :: xgridside
<SPAN      integer, intent(out), optional :: gridindex
<SPAN      integer, intent(out), optional :: gridToFieldMap(:)
<SPAN      integer, intent(out), optional :: ungriddedLBound(:)
<SPAN      integer, intent(out), optional :: ungriddedUBound(:)
<SPAN      integer, intent(out), optional :: totalLWidth(:,:)
<SPAN      integer, intent(out), optional :: totalUWidth(:,:)
<SPAN      integer, intent(out), optional :: localDeCount
<SPAN      integer, intent(out), optional :: ssiLocalDeCount
<SPAN      integer, intent(out), optional :: localDeToDeMap(:)
<SPAN      integer, intent(out), optional :: minIndex(:)
<SPAN      integer, intent(out), optional :: maxIndex(:)
<SPAN      integer, intent(out), optional :: elementCount(:)
<SPAN      integer, intent(out), optional :: localMinIndex(:)
<SPAN      integer, intent(out), optional :: localMaxIndex(:)
<SPAN      integer, intent(out), optional :: localElementCount(:)
<SPAN      character(len=*), intent(out), optional :: name
<SPAN      type(ESMF_VM), intent(out), optional :: vm
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r - <EM>except those arguments indicated below</EM>.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.3.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>vm</TT> in order to offer information about the
<SPAN    VM on which the Field was created.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>minIndex</TT>.
<SPAN    The new argument allows the user to query the global lower bounds of the field data across all PETs.
<SPAN <BR>
<SPAN Added argument <TT>maxIndex</TT>.
<SPAN    The new argument allows the user to query the global upper bounds of the field data across all PETs.
<SPAN <BR>
<SPAN Added argument <TT>elementCount</TT>.
<SPAN    The new argument allows the user to query the global number of items of the field data across all PETs.
<SPAN <BR>
<SPAN Added argument <TT>localMinIndex</TT>.
<SPAN    The new argument allows the user to query the PET local lower bounds globally indexed of the field data.
<SPAN <BR>
<SPAN Added argument <TT>localMaxIndex</TT>.
<SPAN    The new argument allows the user to query the PET local upper bounds globally indexed of the field data.
<SPAN <BR>
<SPAN Added argument <TT>localElementCount</TT>.
<SPAN    The new argument allows the user to query the PET local number of items of the field data.
<SPAN <BR>
<SPAN Added argument <TT>ssiLocalDeCount</TT> and <TT>localarrayList</TT> to
<SPAN    support DE sharing between PETs on the same single system
<SPAN    image (SSI).
<SPAN <BR>
<SPAN Added argument <TT>localDeToDeMap</TT> to support DE handling from
<SPAN    the Field level rather than require user to go to Array level.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldGet() 
<SPAN    subroutine ESMF_FieldGetDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, localDe, &amp; 
<SPAN    farrayPtr, exclusiveLBound, exclusiveUBound, exclusiveCount, &amp; 
<SPAN    computationalLBound, computationalUBound, computationalCount, &amp; 
<SPAN    totalLBound, totalUBound, totalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(in) :: field 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(in), optional :: localDe 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN    integer, intent(out), optional :: exclusiveLBound(:) 
<SPAN    integer, intent(out), optional :: exclusiveUBound(:) 
<SPAN    integer, intent(out), optional :: exclusiveCount(:) 
<SPAN    integer, intent(out), optional :: computationalLBound(:) 
<SPAN    integer, intent(out), optional :: computationalUBound(:) 
<SPAN    integer, intent(out), optional :: computationalCount(:) 
<SPAN    integer, intent(out), optional :: totalLBound(:) 
<SPAN    integer, intent(out), optional :: totalUBound(:) 
<SPAN    integer, intent(out), optional :: totalCount(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldGetBounds()
<SPAN    subroutine ESMF_FieldGetBounds(field, localDe, &amp;
<SPAN      exclusiveLBound, exclusiveUBound, exclusiveCount, computationalLBound, &amp;
<SPAN      computationalUBound, computationalCount, totalLBound, &amp;
<SPAN      totalUBound, totalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field), intent(in) :: field
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(in), optional :: localDe
<SPAN      integer, intent(out), optional :: exclusiveLBound(:)
<SPAN      integer, intent(out), optional :: exclusiveUBound(:)
<SPAN      integer, intent(out), optional :: exclusiveCount(:)
<SPAN      integer, intent(out), optional :: computationalLBound(:)
<SPAN      integer, intent(out), optional :: computationalUBound(:)
<SPAN      integer, intent(out), optional :: computationalCount(:)
<SPAN      integer, intent(out), optional :: totalLBound(:)
<SPAN      integer, intent(out), optional :: totalUBound(:)
<SPAN      integer, intent(out), optional :: totalCount(:)
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldHalo(field, routehandle,  &amp;
<SPAN                              routesyncflag, finishedflag, checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field),          intent(inout)          :: field
<SPAN      type(ESMF_RouteHandle),    intent(inout)          :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_RouteSync_Flag), intent(in),  optional  :: routesyncflag
<SPAN      logical,                   intent(out), optional  :: finishedflag
<SPAN      logical,                   intent(in),  optional  :: checkflag
<SPAN      integer,                   intent(out), optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldHaloRelease(routehandle, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),   optional  :: noGarbage
<SPAN      integer,                intent(out),  optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_FieldHaloStore(field, routehandle,  &amp;
<SPAN        startregion, haloLDepth, haloUDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field),            intent(inout)           :: field
<SPAN      type(ESMF_RouteHandle),      intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_StartRegion_Flag), intent(in),    optional :: startregion
<SPAN      integer,                     intent(in),    optional :: haloLDepth(:)
<SPAN      integer,                     intent(in),    optional :: haloUDepth(:)
<SPAN      integer,                     intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_FieldIsCreated(field, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_FieldIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field), intent(in)            :: field
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldPrint(field, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field), intent(in)            :: field
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldRead(field, fileName,        &amp;
<SPAN        variableName, timeslice, iofmt, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field),      intent(inout)          :: field
<SPAN      character(*),          intent(in)             :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(*),          intent(in),  optional  :: variableName
<SPAN      integer,               intent(in),  optional  :: timeslice
<SPAN      type(ESMF_IOFmt_Flag), intent(in),  optional  :: iofmt
<SPAN      integer,               intent(out), optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldRedist(srcField, dstField, routehandle,  &amp;
<SPAN      checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_Field),       intent(in),optional     :: srcField
<SPAN          type(ESMF_Field),       intent(inout),optional  :: dstField
<SPAN          type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical,                intent(in),   optional  :: checkflag
<SPAN          integer,                intent(out),  optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldRedistRelease(routehandle, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical,                intent(in),   optional  :: noGarbage
<SPAN          integer,                intent(out),  optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldRedistStore() 
<SPAN    subroutine ESMF_FieldRedistStore&lt;type&gt;&lt;kind&gt;(srcField, dstField, &amp; 
<SPAN           routehandle, factor, srcToDstTransposeMap, &amp;
<SPAN           ignoreUnmatchedIndices, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field),         intent(in)            :: srcField  
<SPAN      type(ESMF_Field),         intent(inout)         :: dstField  
<SPAN      type(ESMF_RouteHandle),   intent(inout)         :: routehandle
<SPAN      &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), intent(in)            :: factor 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                  intent(in),  optional :: srcToDstTransposeMap(:) 
<SPAN      logical,                  intent(in),  optional :: ignoreUnmatchedIndices
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>ignoreUnmatchedIndices</TT> to support sparse 
<SPAN                 matrices that contain elements with indices that do not have a
<SPAN                 match within the source or destination Array.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldRedistStore() 
<SPAN      subroutine ESMF_FieldRedistStoreNF(srcField, dstField, &amp; 
<SPAN          routehandle, srcToDstTransposeMap, &amp;
<SPAN          ignoreUnmatchedIndices, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_Field),       intent(in)            :: srcField  
<SPAN          type(ESMF_Field),       intent(inout)         :: dstField  
<SPAN          type(ESMF_RouteHandle), intent(inout)         :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          integer,                intent(in), optional  :: srcToDstTransposeMap(:) 
<SPAN          logical,                intent(in), optional  :: ignoreUnmatchedIndices
<SPAN          integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldRegrid(srcField, dstField, routehandle, &amp;
<SPAN      zeroregion, termorderflag, checkflag, dynamicMask, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Field),               intent(in),    optional :: srcField
<SPAN        type(ESMF_Field),               intent(inout), optional :: dstField
<SPAN        type(ESMF_RouteHandle),         intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_Region_Flag),         intent(in),    optional :: zeroregion
<SPAN        type(ESMF_TermOrder_Flag),      intent(in),    optional :: termorderflag
<SPAN        logical,                        intent(in),    optional :: checkflag
<SPAN        type(ESMF_DynamicMask), target, intent(in),    optional :: dynamicMask
<SPAN        integer,                        intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>termorderflag</TT>.
<SPAN                 The new argument gives the user control over the order in which
<SPAN                 the src terms are summed up.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>dynamicMask</TT>.
<SPAN                 The new argument supports the dynamic masking feature.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_FieldRegridRelease(routehandle, &amp;
<SPAN          noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_RouteHandle), intent(inout)         :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,                intent(in),  optional :: noGarbage
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   !   Private name; call using ESMF_FieldRegridStore()
<SPAN        subroutine ESMF_FieldRegridStoreNX(srcField, dstField, &amp;
<SPAN                      srcMaskValues, dstMaskValues, &amp;
<SPAN                      regridmethod, &amp;
<SPAN                      polemethod, regridPoleNPnts, &amp; 
<SPAN                      lineType, &amp;
<SPAN                      normType, &amp;
<SPAN                      extrapMethod, &amp;
<SPAN                      extrapNumSrcPnts, &amp;
<SPAN                      extrapDistExponent, &amp;
<SPAN                      extrapNumLevels, &amp;
<SPAN                      unmappedaction, ignoreDegenerate, &amp;
<SPAN                      srcTermProcessing, &amp; 
<SPAN                      pipeLineDepth, &amp;
<SPAN                      routehandle, &amp;
<SPAN                      factorList, factorIndexList, &amp; 
<SPAN                      weights, indices, &amp;  ! DEPRECATED ARGUMENTS
<SPAN                      srcFracField, dstFracField, &amp;
<SPAN                      dstStatusField, &amp;
<SPAN                      unmappedDstList, &amp;
<SPAN                      checkFlag, &amp;
<SPAN                      rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Field),               intent(in)              :: srcField
<SPAN        type(ESMF_Field),               intent(inout)           :: dstField
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),          intent(in),    optional :: srcMaskValues(:)
<SPAN        integer(ESMF_KIND_I4),          intent(in),    optional :: dstMaskValues(:)
<SPAN        type(ESMF_RegridMethod_Flag),   intent(in),    optional :: regridmethod
<SPAN        type(ESMF_PoleMethod_Flag),     intent(in),    optional :: polemethod
<SPAN        integer,                        intent(in),    optional :: regridPoleNPnts
<SPAN        type(ESMF_LineType_Flag),       intent(in),    optional :: lineType
<SPAN        type(ESMF_NormType_Flag),       intent(in),    optional :: normType
<SPAN        type(ESMF_ExtrapMethod_Flag),   intent(in),    optional :: extrapMethod
<SPAN        integer,                        intent(in),    optional :: extrapNumSrcPnts
<SPAN        real(ESMF_KIND_R4),             intent(in),    optional :: extrapDistExponent
<SPAN        integer,                        intent(in),    optional :: extrapNumLevels
<SPAN        type(ESMF_UnmappedAction_Flag), intent(in),    optional :: unmappedaction
<SPAN        logical,                        intent(in),    optional :: ignoreDegenerate
<SPAN        integer,                        intent(inout), optional :: srcTermProcessing
<SPAN        integer,                        intent(inout), optional :: pipeLineDepth
<SPAN        type(ESMF_RouteHandle),         intent(inout), optional :: routehandle
<SPAN        real(ESMF_KIND_R8),             pointer,       optional :: factorList(:)
<SPAN        integer(ESMF_KIND_I4),          pointer,       optional :: factorIndexList(:,:)
<SPAN        real(ESMF_KIND_R8),    pointer, optional :: weights(:)   ! DEPRECATED ARG
<SPAN        integer(ESMF_KIND_I4), pointer, optional :: indices(:,:) ! DEPRECATED ARG
<SPAN        type(ESMF_Field),               intent(inout), optional :: srcFracField
<SPAN        type(ESMF_Field),               intent(inout), optional :: dstFracField
<SPAN        type(ESMF_Field),               intent(inout), optional :: dstStatusField
<SPAN        integer(ESMF_KIND_I4),          pointer,       optional :: unmappedDstList(:)
<SPAN        logical,                        intent(in),    optional :: checkFlag
<SPAN        integer,                        intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.2.0rp1</STRONG></DT>
<SPAN <DD>Added arguments <TT>factorList</TT> and <TT>factorIndexList</TT>.
<SPAN                    Started to deprecate arguments <TT>weights</TT> and <TT>indices</TT>.
<SPAN                    This corrects an inconsistency of this interface with all
<SPAN                    other ESMF methods that take these same arguments.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added arguments <TT>ignoreDegenerate</TT>, <TT>srcTermProcessing</TT>,
<SPAN                 <TT>pipelineDepth</TT>, and <TT>unmappedDstList</TT>.
<SPAN                 The argument <TT>ignoreDegenerate</TT> allows the user to skip degenerate
<SPAN                 cells in the regridding instead of stopping with an error.
<SPAN                 The two arguments <TT>srcTermProcessing</TT> and <TT>pipelineDepth</TT>
<SPAN                 provide access to the tuning parameters affecting the sparse matrix
<SPAN                 execution. The argument <TT>unmappedDstList</TT> allows the user to
<SPAN                 get a list of the destination items which the regridding couldn't
<SPAN                 map to a source.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>6.3.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>lineType</TT>. This argument allows the user to
<SPAN                  control the path of the line between two points on a sphere surface.
<SPAN                  This allows the user to use their preferred line path for the calculation
<SPAN                  of distances and the shape of cells during regrid weight calculation on
<SPAN                  a sphere.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>6.3.0rp1</STRONG></DT>
<SPAN <DD>Added argument <TT>normType</TT>. This argument allows the user to
<SPAN                  control the type of normalization done during conservative weight generation.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>dstStatusField</TT>. This argument allows the user to
<SPAN                 receive information about what happened to each location in the destination
<SPAN                 Field during regridding.
<SPAN 
<SPAN <P>
<SPAN Added arguments <TT>extrapMethod</TT>, <TT>extrapNumSrcPnts</TT>, and
<SPAN                 <TT>extrapDistExponent</TT>. These three new extrapolation arguments allow the 
<SPAN                 user to extrapolate destination points not mapped by the regrid method. 
<SPAN                 <TT>extrapMethod</TT> allows the user to choose the extrapolation method.
<SPAN                 <TT>extrapNumSrcPnts</TT> and <TT>extrapDistExponent</TT> are parameters that
<SPAN                 allow the user to tune the behavior of the <TT>ESMF_EXTRAPMETHOD_NEAREST_IDAVG</TT> 
<SPAN                 method.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>extrapNumLevels</TT>. For level based extrapolation methods
<SPAN                 (e.g. <TT>ESMF_EXTRAPMETHOD_CREEP</TT>) this argument allows the user to
<SPAN                 set how many levels to extrapolate. 
<SPAN 
<SPAN <P>
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>checkFlag</TT> to enable the user to turn on more
<SPAN                 expensive error checking during regrid weight calculation. 
<SPAN 
<SPAN <P>
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   !   Private name; call using ESMF_FieldRegridStore()
<SPAN        subroutine ESMF_FieldRegridStoreX(xgrid, srcField, dstField, &amp;
<SPAN                      regridmethod, routehandle, &amp;
<SPAN                      srcFracField, dstFracField, &amp;
<SPAN                      srcMergeFracField, dstMergeFracField, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_XGrid),       intent(in)              :: xgrid
<SPAN        type(ESMF_Field),       intent(in)              :: srcField
<SPAN        type(ESMF_Field),       intent(inout)           :: dstField
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_RegridMethod_Flag),   intent(in),    optional :: regridmethod
<SPAN        type(ESMF_RouteHandle), intent(inout), optional :: routehandle
<SPAN        type(ESMF_Field),       intent(inout), optional :: srcFracField
<SPAN        type(ESMF_Field),       intent(inout), optional :: dstFracField
<SPAN        type(ESMF_Field),       intent(inout), optional :: srcMergeFracField
<SPAN        type(ESMF_Field),       intent(inout), optional :: dstMergeFracField
<SPAN        integer,                intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.3.0</STRONG></DT>
<SPAN <DD>Added arguments <TT>srcFracField</TT>, <TT>dstFracField</TT>, <TT>srcMergeFracField</TT>, and <TT>dstMergeFracField</TT>.
<SPAN    These fraction Fields allow a user to calculate correct flux regridded through <TT>ESMF_XGrid</TT>.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>regridmethod</TT>. This new argument allows the user to choose the regrid method
<SPAN                  to apply when computing the routehandle. 
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_FieldRegridGetArea(areaField, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Field), intent(inout)                 :: areaField
<SPAN        integer, intent(out), optional                  :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldScatter&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(field, farray, &amp; 
<SPAN    rootPet, tile, vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Field), intent(inout) :: field 
<SPAN    mtype (ESMF_KIND_mtypekind),intent(in), target :: farray(mdim) 
<SPAN    integer, intent(in) :: rootPet 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(in), optional :: tile 
<SPAN    type(ESMF_VM), intent(in), optional :: vm 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldSet(field, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field),   intent(inout)         :: field
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len = *), intent(in),  optional :: name
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldSync(field, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field), intent(in)            :: field
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_FieldSMM(srcField, dstField, routehandle, &amp;
<SPAN               zeroregion, termorderflag, checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_Field),          intent(in),    optional  :: srcField
<SPAN          type(ESMF_Field),          intent(inout), optional  :: dstField
<SPAN          type(ESMF_RouteHandle),    intent(inout)            :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          type(ESMF_Region_Flag),    intent(in),    optional  :: zeroregion
<SPAN          type(ESMF_TermOrder_Flag), intent(in),    optional  :: termorderflag
<SPAN          logical,                   intent(in),    optional  :: checkflag
<SPAN          integer,                   intent(out),   optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>termorderflag</TT>.
<SPAN                 The new argument gives the user control over the order in which
<SPAN                 the src terms are summed up.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldSMMRelease(routehandle, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical,                intent(in),   optional  :: noGarbage
<SPAN          integer,                intent(out),  optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldSMMStore() 
<SPAN    subroutine ESMF_FieldSMMStore&lt;type&gt;&lt;kind&gt;(srcField, dstField, &amp; 
<SPAN           routehandle, factorList, factorIndexList, &amp;
<SPAN           ignoreUnmatchedIndices, srcTermProcessing, pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field),         intent(in)              :: srcField  
<SPAN      type(ESMF_Field),         intent(inout)           :: dstField  
<SPAN      type(ESMF_RouteHandle),   intent(inout)           :: routehandle
<SPAN      &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), intent(in)              :: factorList(:) 
<SPAN      integer,                  intent(in),             :: factorIndexList(:,:) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                  intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                  intent(inout), optional :: srcTermProcessing
<SPAN      integer,                  intent(inout), optional :: pipeLineDepth
<SPAN      integer,                  intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added arguments <TT>srcTermProcessing</TT>, <TT>pipelineDepth</TT>
<SPAN                 The two arguments <TT>srcTermProcessing</TT> and <TT>pipelineDepth</TT>
<SPAN                 provide access to the tuning parameters affecting the sparse matrix
<SPAN                 execution. 
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>transposeRoutehandle</TT> to allow a handle to
<SPAN                 the transposed matrix operation to be returned.
<SPAN <BR>
<SPAN Added argument <TT>ignoreUnmatchedIndices</TT> to support sparse 
<SPAN                 matrices that contain elements with indices that do not have a
<SPAN                 match within the source or destination Array.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Removed argument <TT>transposeRoutehandle</TT> and provide it
<SPAN                 via interface overloading instead. This allows argument 
<SPAN                 <TT>srcField</TT> to stay strictly intent(in) for this entry point.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldSMMStore() 
<SPAN    subroutine ESMF_FieldSMMStore&lt;type&gt;&lt;kind&gt;TR(srcField, dstField, &amp; 
<SPAN           routehandle, transposeRoutehandle, factorList, factorIndexList, &amp;
<SPAN           ignoreUnmatchedIndices, srcTermProcessing, &amp;
<SPAN           pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field),         intent(inout)           :: srcField  
<SPAN      type(ESMF_Field),         intent(inout)           :: dstField  
<SPAN      type(ESMF_RouteHandle),   intent(inout)           :: routehandle
<SPAN      type(ESMF_RouteHandle),   intent(inout)           :: transposeRoutehandle
<SPAN      &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), intent(in)              :: factorList(:) 
<SPAN      integer,                  intent(in),             :: factorIndexList(:,:) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                  intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                  intent(inout), optional :: srcTermProcessing
<SPAN      integer,                  intent(inout), optional :: pipeLineDepth
<SPAN      integer,                  intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldSMMStore() 
<SPAN      subroutine ESMF_FieldSMMStoreNF(srcField, dstField, &amp;
<SPAN          routehandle, ignoreUnmatchedIndices, &amp;
<SPAN          srcTermProcessing, pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_Field),       intent(in)              :: srcField  
<SPAN          type(ESMF_Field),       intent(inout)           :: dstField  
<SPAN          type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN          integer,                intent(inout), optional :: srcTermProcessing
<SPAN          integer,                intent(inout), optional :: pipeLineDepth
<SPAN          integer,                intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added arguments <TT>srcTermProcessing</TT>, <TT>pipelineDepth</TT>
<SPAN                 The two arguments <TT>srcTermProcessing</TT> and <TT>pipelineDepth</TT>
<SPAN                 provide access to the tuning parameters affecting the sparse matrix
<SPAN                 execution. 
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>transposeRoutehandle</TT> to allow a handle to
<SPAN                 the transposed matrix operation to be returned.
<SPAN <BR>
<SPAN Added argument <TT>ignoreUnmatchedIndices</TT> to support sparse 
<SPAN                 matrices that contain elements with indices that do not have a
<SPAN                 match within the source or destination Array.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Removed argument <TT>transposeRoutehandle</TT> and provide it
<SPAN                 via interface overloading instead. This allows argument 
<SPAN                 <TT>srcField</TT> to stay strictly intent(in) for this entry point.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_FieldSMMStore() 
<SPAN      subroutine ESMF_FieldSMMStoreNFTR(srcField, dstField, &amp;
<SPAN          routehandle, transposeRoutehandle, ignoreUnmatchedIndices, &amp;
<SPAN          srcTermProcessing, pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>         type(ESMF_Field),       intent(inout)           :: srcField  
<SPAN          type(ESMF_Field),       intent(inout)           :: dstField  
<SPAN          type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN          type(ESMF_RouteHandle), intent(inout)           :: transposeRoutehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN          logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN          integer,                intent(inout), optional :: srcTermProcessing
<SPAN          integer,                intent(inout), optional :: pipeLineDepth
<SPAN          integer,                intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldSMMStore()
<SPAN      subroutine ESMF_FieldSMMStoreFromFile(srcField, dstField, filename, &amp;
<SPAN        routehandle, ignoreUnmatchedIndices, &amp;
<SPAN        srcTermProcessing, pipelineDepth, rc)
<SPAN  
<SPAN    ! ARGUMENTS:
<SPAN        type(ESMF_Field),       intent(in)              :: srcField  
<SPAN        type(ESMF_Field),       intent(inout)           :: dstField
<SPAN        character(len=*),       intent(in)              :: filename
<SPAN        type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN        integer,                intent(inout), optional :: srcTermProcessing
<SPAN        integer,                intent(inout), optional :: pipeLineDepth
<SPAN        integer,                intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_FieldSMMStore()
<SPAN      subroutine ESMF_FieldSMMStoreFromFileTR(srcField, dstField, filename, &amp;
<SPAN        routehandle, transposeRoutehandle, &amp;
<SPAN        ignoreUnmatchedIndices, srcTermProcessing, pipelineDepth, rc)
<SPAN  
<SPAN    ! ARGUMENTS:
<SPAN        type(ESMF_Field),       intent(inout)           :: srcField  
<SPAN        type(ESMF_Field),       intent(inout)           :: dstField
<SPAN        character(len=*),       intent(in)              :: filename
<SPAN        type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN        type(ESMF_RouteHandle), intent(inout)           :: transposeRoutehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN        integer,                intent(inout), optional :: srcTermProcessing
<SPAN        integer,                intent(inout), optional :: pipeLineDepth
<SPAN        integer,                intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_FieldValidate(field, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Field), intent(in)            :: field 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_FieldWrite(field, fileName,   &amp;
<SPAN        variableName, convention, purpose, overwrite, status, timeslice, iofmt, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Field),           intent(in)             :: field 
<SPAN      character(*),               intent(in)             :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(*),               intent(in),  optional  :: variableName
<SPAN      character(*),               intent(in),  optional  :: convention
<SPAN      character(*),               intent(in),  optional  :: purpose
<SPAN      logical,                    intent(in),  optional  :: overwrite
<SPAN      type(ESMF_FileStatus_Flag), intent(in),  optional  :: status
<SPAN      integer,                    intent(in),  optional  :: timeslice
<SPAN      type(ESMF_IOFmt_Flag),      intent(in),  optional  :: iofmt
<SPAN      integer,                    intent(out), optional  :: rc
<SPAN </PRE>

<SPAN <PRE>     subroutine ESMF_GridGetFieldBounds(grid, &amp;
<SPAN          localDe, staggerloc, gridToFieldMap, &amp;
<SPAN          ungriddedLBound, ungriddedUBound, &amp;
<SPAN          totalLWidth, totalUWidth, &amp;
<SPAN          totalLBound, totalUBound, totalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid),       intent(in)            :: grid     
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,               intent(in),  optional :: localDe
<SPAN      type(ESMF_StaggerLoc), intent(in),  optional :: staggerloc 
<SPAN      integer,               intent(in),  optional :: gridToFieldMap(:)    
<SPAN      integer,               intent(in),  optional :: ungriddedLBound(:)
<SPAN      integer,               intent(in),  optional :: ungriddedUBound(:)
<SPAN      integer,               intent(in),  optional :: totalLWidth(:)
<SPAN      integer,               intent(in),  optional :: totalUWidth(:)
<SPAN      integer,               intent(out), optional :: totalLBound(:)
<SPAN      integer,               intent(out), optional :: totalUBound(:)
<SPAN      integer,               intent(out), optional :: totalCount(:)
<SPAN      integer,               intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_LocStreamGetFieldBounds(locstream, &amp;
<SPAN          localDe, gridToFieldMap, &amp;
<SPAN          ungriddedLBound, ungriddedUBound, &amp;
<SPAN          totalLBound, totalUBound, totalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocStream), intent(in)            :: locstream     
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(in),  optional :: localDe
<SPAN      integer,              intent(in),  optional :: gridToFieldMap(:)    
<SPAN      integer,              intent(in),  optional :: ungriddedLBound(:)
<SPAN      integer,              intent(in),  optional :: ungriddedUBound(:)
<SPAN      integer,              intent(out), optional :: totalLBound(:)
<SPAN      integer,              intent(out), optional :: totalUBound(:)
<SPAN      integer,              intent(out), optional :: totalCount(:)
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     subroutine ESMF_MeshGetFieldBounds(mesh, &amp;
<SPAN          meshloc, &amp;
<SPAN          localDe, gridToFieldMap, &amp;
<SPAN          ungriddedLBound, ungriddedUBound, &amp;
<SPAN          totalLBound, totalUBound, totalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh), intent(in)            :: mesh     
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_MeshLoc),intent(in),optional :: meshloc
<SPAN      integer,         intent(in),  optional :: localDe
<SPAN      integer,         intent(in),  optional :: gridToFieldMap(:)    
<SPAN      integer,         intent(in),  optional :: ungriddedLBound(:)
<SPAN      integer,         intent(in),  optional :: ungriddedUBound(:)
<SPAN      integer,         intent(out), optional :: totalLBound(:)
<SPAN      integer,         intent(out), optional :: totalUBound(:)
<SPAN      integer,         intent(out), optional :: totalCount(:)
<SPAN      integer,         intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     subroutine ESMF_XGridGetFieldBounds(xgrid, &amp;
<SPAN          xgridside, gridindex, localDe, gridToFieldMap, &amp;
<SPAN          ungriddedLBound, ungriddedUBound, &amp;
<SPAN          totalLBound, totalUBound, totalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_XGrid),          intent(in)            :: xgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_XGridSide_Flag), intent(in),  optional :: xgridside
<SPAN      integer,                   intent(in),  optional :: gridindex
<SPAN      integer,                   intent(in),  optional :: localDe
<SPAN      integer,                   intent(in),  optional :: gridToFieldMap(:)    
<SPAN      integer,                   intent(in),  optional :: ungriddedLBound(:)
<SPAN      integer,                   intent(in),  optional :: ungriddedUBound(:)
<SPAN      integer,                   intent(out), optional :: totalLBound(:)
<SPAN      integer,                   intent(out), optional :: totalUBound(:)
<SPAN      integer,                   intent(out), optional :: totalCount(:)
<SPAN      integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     interface assignment(=)
<SPAN      arraybundle1 = arraybundle2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle) :: arraybundle1
<SPAN      type(ESMF_ArrayBundle) :: arraybundle2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN      if (arraybundle1 == arraybundle2) then ... endif
<SPAN                OR
<SPAN      result = (arraybundle1 == arraybundle2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(in) :: arraybundle1
<SPAN      type(ESMF_ArrayBundle), intent(in) :: arraybundle2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (arraybundle1 /= arraybundle2) then ... endif
<SPAN                OR
<SPAN      result = (arraybundle1 /= arraybundle2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(in) :: arraybundle1
<SPAN      type(ESMF_ArrayBundle), intent(in) :: arraybundle2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ArrayBundleAdd(arraybundle, arrayList, &amp;
<SPAN        multiflag, relaxedflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(inout)         :: arraybundle
<SPAN      type(ESMF_Array),       intent(in)            :: arrayList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: multiflag
<SPAN      logical,                intent(in),  optional :: relaxedflag
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ArrayBundleAddReplace(arraybundle, arrayList, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(inout)         :: arraybundle
<SPAN      type(ESMF_Array),       intent(in)            :: arrayList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_ArrayBundleCreate(arrayList, multiflag, &amp;
<SPAN      relaxedflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle) :: ESMF_ArrayBundleCreate
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Array), intent(in),  optional :: arrayList(:)
<SPAN      logical,          intent(in),  optional :: multiflag
<SPAN      logical,          intent(in),  optional :: relaxedflag
<SPAN      character(len=*), intent(in),  optional :: name
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayBundleDestroy(arraybundle, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(inout)           :: arraybundle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),   optional  :: noGarbage
<SPAN      integer,                intent(out),  optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     ! Private name; call using ESMF_ArrayBundleGet()   
<SPAN      subroutine ESMF_ArrayBundleGetListAll(arraybundle, &amp;
<SPAN        itemorderflag, arrayCount, arrayList, arrayNameList, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle),    intent(in)            :: arraybundle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_ItemOrder_Flag), intent(in),  optional :: itemorderflag
<SPAN      integer,                   intent(out), optional :: arrayCount
<SPAN      type(ESMF_Array),          intent(out), optional :: arrayList(:)
<SPAN      character(len=*),          intent(out), optional :: arrayNameList(:)
<SPAN      character(len=*),          intent(out), optional :: name
<SPAN      integer,                   intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>itemorderflag</TT>.
<SPAN                 The new argument gives the user control over the order in which
<SPAN                 the items are returned.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     ! Private name; call using ESMF_ArrayBundleGet()   
<SPAN      subroutine ESMF_ArrayBundleGetItem(arraybundle, arrayName, &amp;
<SPAN        array, arrayCount, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(in)            :: arraybundle
<SPAN      character(len=*),       intent(in)            :: arrayName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Array),       intent(out), optional :: array
<SPAN      integer,                intent(out), optional :: arrayCount
<SPAN      logical,                intent(out), optional :: isPresent
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     ! Private name; call using ESMF_ArrayBundleGet()   
<SPAN      subroutine ESMF_ArrayBundleGetList(arraybundle, arrayName, arrayList, &amp;
<SPAN        itemorderflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle),    intent(in)            :: arraybundle
<SPAN      character(len=*),          intent(in)            :: arrayName
<SPAN      type(ESMF_Array),          intent(out)           :: arrayList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_ItemOrder_Flag), intent(in),  optional :: itemorderflag
<SPAN      integer,                   intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>itemorderflag</TT>.
<SPAN                 The new argument gives the user control over the order in which
<SPAN                 the items are returned.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayBundleHalo(arraybundle, routehandle, &amp;
<SPAN      checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(inout)          :: arraybundle
<SPAN      type(ESMF_RouteHandle), intent(inout)          :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),   optional :: checkflag
<SPAN      integer,                intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayBundleHaloRelease(routehandle, &amp;
<SPAN      noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(inout)          :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),   optional :: noGarbage
<SPAN      integer,                intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ArrayBundleHaloStore(arraybundle, routehandle, &amp;
<SPAN        startregion, haloLDepth, haloUDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle),     intent(inout)         :: arraybundle
<SPAN      type(ESMF_RouteHandle),     intent(inout)         :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_StartRegion_Flag),intent(in),  optional :: startregion
<SPAN      integer,                    intent(in),  optional :: haloLDepth(:)
<SPAN      integer,                    intent(in),  optional :: haloUDepth(:)
<SPAN      integer,                    intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_ArrayBundleIsCreated(arraybundle, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_ArrayBundleIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(in)            :: arraybundle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_ArrayBundlePrint(arraybundle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(in)            :: arraybundle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayBundleRead(arraybundle, fileName, &amp;
<SPAN      singleFile, timeslice, iofmt, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(inout)          :: arraybundle
<SPAN      character(*),           intent(in)             :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional  :: singleFile
<SPAN      integer,                intent(in),  optional  :: timeslice
<SPAN      type(ESMF_IOFmt_Flag),  intent(in),  optional  :: iofmt
<SPAN      integer,                intent(out), optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_ArrayBundleRedist(srcArrayBundle, dstArrayBundle, &amp;
<SPAN      routehandle, checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(in),    optional :: srcArrayBundle
<SPAN      type(ESMF_ArrayBundle), intent(inout), optional :: dstArrayBundle
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),    optional :: checkflag
<SPAN      integer,                intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayBundleRedistRelease(routehandle, &amp;
<SPAN      noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(inout)          :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),   optional :: noGarbage
<SPAN      integer,                intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayBundleRedistStore()
<SPAN    subroutine ESMF_ArrayBundleRedistStore&lt;type&gt;&lt;kind&gt;(srcArrayBundle, &amp;
<SPAN      dstArrayBundle, routehandle, factor, ignoreUnmatchedIndicesFlag, &amp;
<SPAN      srcToDstTransposeMap, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle),  intent(in)            :: srcArrayBundle
<SPAN      type(ESMF_ArrayBundle),  intent(inout)         :: dstArrayBundle
<SPAN      type(ESMF_RouteHandle),  intent(inout)         :: routehandle
<SPAN      &lt;type&gt;(ESMF_KIND_&lt;kind&gt;),intent(in)            :: factor
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                 intent(in),  optional :: ignoreUnmatchedIndicesFlag(:)
<SPAN      integer,                 intent(in),  optional :: srcToDstTransposeMap(:)
<SPAN      integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>ignoreUnmatchedIndicesFlag</TT> to support cases
<SPAN       where source and destination side do not cover the exact same index space.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayBundleRedistStore()
<SPAN    subroutine ESMF_ArrayBundleRedistStoreNF(srcArrayBundle, dstArrayBundle, &amp;
<SPAN      routehandle, ignoreUnmatchedIndicesFlag, &amp;
<SPAN      srcToDstTransposeMap, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(in)            :: srcArrayBundle
<SPAN      type(ESMF_ArrayBundle), intent(inout)         :: dstArrayBundle
<SPAN      type(ESMF_RouteHandle), intent(inout)         :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: ignoreUnmatchedIndicesFlag(:)
<SPAN      integer,                intent(in),  optional :: srcToDstTransposeMap(:)
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>ignoreUnmatchedIndicesFlag</TT> to support cases
<SPAN       where source and destination side do not cover the exact same index space.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ArrayBundleRemove(arraybundle, arrayNameList, &amp;
<SPAN        multiflag, relaxedflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(inout)         :: arraybundle
<SPAN      character(len=*),       intent(in)            :: arrayNameList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: multiflag
<SPAN      logical,                intent(in),  optional :: relaxedflag
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ArrayBundleReplace(arraybundle, arrayList, &amp;
<SPAN        multiflag, relaxedflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle), intent(inout)         :: arraybundle
<SPAN      type(ESMF_Array),       intent(in)            :: arrayList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: multiflag
<SPAN      logical,                intent(in),  optional :: relaxedflag
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayBundleSMM(srcArrayBundle, dstArrayBundle, &amp;
<SPAN      routehandle, &amp;
<SPAN      zeroregion, &amp; ! DEPRECATED ARGUMENT
<SPAN      zeroregionflag, termorderflag, checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle),    intent(in),         optional :: srcArrayBundle
<SPAN      type(ESMF_ArrayBundle),    intent(inout),      optional :: dstArrayBundle
<SPAN      type(ESMF_RouteHandle),    intent(inout)                :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Region_Flag),    intent(in), optional :: zeroregion ! DEPRECATED ARGUMENT
<SPAN      type(ESMF_Region_Flag),    intent(in), target, optional :: zeroregionflag(:)
<SPAN      type(ESMF_TermOrder_Flag), intent(in), target, optional :: termorderflag(:)
<SPAN      logical,                   intent(in),         optional :: checkflag
<SPAN      integer,                   intent(out),        optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>termorderflag</TT>.
<SPAN                 The new argument gives the user control over the order in which
<SPAN                 the src terms are summed up.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>zeroregionflag</TT>, and deprecated
<SPAN                 <TT>zeroregion</TT>. The new argument allows greater flexibility
<SPAN                 in setting the zero region for individual ArrayBundle members.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayBundleSMMRelease(routehandle, &amp;
<SPAN      noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(inout)          :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),   optional :: noGarbage
<SPAN      integer,                intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayBundleSMMStore()
<SPAN    subroutine ESMF_ArrayBundleSMMStore&lt;type&gt;&lt;kind&gt;(srcArrayBundle, &amp;
<SPAN      dstArrayBundle, routehandle, factorList, factorIndexList, &amp;
<SPAN      ignoreUnmatchedIndicesFlag, srcTermProcessing, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle),           intent(in)    :: srcArrayBundle
<SPAN      type(ESMF_ArrayBundle),           intent(inout) :: dstArrayBundle
<SPAN      type(ESMF_RouteHandle),           intent(inout) :: routehandle
<SPAN      &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)    :: factorList(:)
<SPAN      integer,                          intent(in)    :: factorIndexList(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),    optional :: ignoreUnmatchedIndicesFlag(:)
<SPAN      integer,                intent(inout), optional :: srcTermProcessing(:)
<SPAN      integer,                intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>srcTermProcessing</TT>.
<SPAN                 The new argument gives the user access to the tuning parameter
<SPAN                 affecting the sparse matrix execution and bit-wise 
<SPAN                 reproducibility.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>ignoreUnmatchedIndicesFlag</TT> to support cases
<SPAN       where the sparse matrix includes terms with source or destination sequence
<SPAN       indices not present in the source or destination array.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayBundleSMMStore()
<SPAN    subroutine ESMF_ArrayBundleSMMStoreNF(srcArrayBundle, dstArrayBundle, &amp;
<SPAN      routehandle, ignoreUnmatchedIndicesFlag, srcTermProcessing, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle),  intent(in)              :: srcArrayBundle
<SPAN      type(ESMF_ArrayBundle),  intent(inout)           :: dstArrayBundle
<SPAN      type(ESMF_RouteHandle),  intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                 intent(in),    optional :: ignoreUnmatchedIndicesFlag(:)
<SPAN      integer,                 intent(inout), optional :: srcTermProcessing(:)
<SPAN      integer,                 intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>srcTermProcessing</TT>.
<SPAN                 The new argument gives the user access to the tuning parameter
<SPAN                 affecting the sparse matrix execution and bit-wise 
<SPAN                 reproducibility.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>ignoreUnmatchedIndicesFlag</TT> to support cases
<SPAN       where the sparse matrix includes terms with source or destination sequence
<SPAN       indices not present in the source or destination array.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayBundleWrite(arraybundle, fileName, &amp;
<SPAN      convention, purpose, singleFile, overwrite, status, timeslice, iofmt, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArrayBundle),     intent(in)              :: arraybundle
<SPAN      character(*),               intent(in)              :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(*),               intent(in),  optional  :: convention
<SPAN      character(*),               intent(in),  optional  :: purpose
<SPAN      logical,                    intent(in),  optional  :: singleFile
<SPAN      logical,                    intent(in),  optional  :: overwrite
<SPAN      type(ESMF_FileStatus_Flag), intent(in),  optional  :: status
<SPAN      integer,                    intent(in),  optional  :: timeslice
<SPAN      type(ESMF_IOFmt_Flag),      intent(in),  optional  :: iofmt
<SPAN      integer,                    intent(out), optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   interface assignment(=)
<SPAN    array1 = array2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Array) :: array1
<SPAN    type(ESMF_Array) :: array2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN    if (array1 == array2) then ... endif
<SPAN    OR
<SPAN    result = (array1 == array2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Array), intent(in) :: array1
<SPAN    type(ESMF_Array), intent(in) :: array2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN    if (array1 /= array2) then ... endif
<SPAN    OR
<SPAN    result = (array1 /= array2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Array), intent(in) :: array1
<SPAN    type(ESMF_Array), intent(in) :: array2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayCopy(arrayOut, arrayIn, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_Array), intent(inout) :: arrayOut
<SPAN         type(ESMF_Array), intent(in) :: arrayIn
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate() 
<SPAN    function ESMF_ArrayCreateFrmPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(distgrid, farrayPtr, &amp; 
<SPAN    datacopyflag, distgridToArrayMap, computationalEdgeLWidth, &amp; 
<SPAN    computationalEdgeUWidth, computationalLWidth, &amp; 
<SPAN    computationalUWidth, totalLWidth, &amp; 
<SPAN    totalUWidth, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Array) :: ESMF_ArrayCreateDataPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_DistGrid), intent(in) :: distgrid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: distgridToArrayMap(:) 
<SPAN    integer, intent(in), optional :: computationalEdgeLWidth(:) 
<SPAN    integer, intent(in), optional :: computationalEdgeUWidth(:) 
<SPAN    integer, intent(in), optional :: computationalLWidth(:) 
<SPAN    integer, intent(in), optional :: computationalUWidth(:) 
<SPAN    integer, intent(in), optional :: totalLWidth(:) 
<SPAN    integer, intent(in), optional :: totalUWidth(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate() 
<SPAN    function ESMF_ArrayCreateFrmPtrArb&lt;indexkind&gt;&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(distgrid, &amp; 
<SPAN    farrayPtr, haloSeqIndexList, datacopyflag, &amp; 
<SPAN    distgridToArrayMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Array) :: ESMF_ArrayCreateDataPtrArb&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_DistGrid), intent(in) :: distgrid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN    integer(ESMF_KIND_&lt;indexkind&gt;), intent(in) :: haloSeqIndexList(:) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: distgridToArrayMap(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate() 
<SPAN    function ESMF_ArrayCreateAsmdSp&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(distgrid, farray, &amp; 
<SPAN    indexflag, datacopyflag, distgridToArrayMap, &amp; 
<SPAN    computationalEdgeLWidth, computationalEdgeUWidth, computationalLWidth, &amp; 
<SPAN    computationalUWidth, totalLWidth, &amp; 
<SPAN    totalUWidth, undistLBound, undistUBound, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Array) :: ESMF_ArrayCreateDataAssmdShape&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_DistGrid), intent(in) :: distgrid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: distgridToArrayMap(:) 
<SPAN    integer, intent(in), optional :: computationalEdgeLWidth(:) 
<SPAN    integer, intent(in), optional :: computationalEdgeUWidth(:) 
<SPAN    integer, intent(in), optional :: computationalLWidth(:) 
<SPAN    integer, intent(in), optional :: computationalUWidth(:) 
<SPAN    integer, intent(in), optional :: totalLWidth(:) 
<SPAN    integer, intent(in), optional :: totalUWidth(:) 
<SPAN    integer, intent(in), optional :: undistLBound(:) 
<SPAN    integer, intent(in), optional :: undistUBound(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate() 
<SPAN    function ESMF_ArrayCreateAsmdSpArb&lt;indexkind&gt;&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(distgrid, &amp; 
<SPAN    farray, indexflag, haloSeqIndexList, datacopyflag, &amp; 
<SPAN    distgridToArrayMap, computationalEdgeLWidth, computationalEdgeUWidth, &amp; 
<SPAN    computationalLWidth, computationalUWidth, totalLWidth, totalUWidth, &amp; 
<SPAN    undistLBound, undistUBound, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Array) :: ESMF_ArrayCreateDataAssmdShapeArb&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_DistGrid), intent(in) :: distgrid 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    type(ESMF_Index_Flag), intent(in) :: indexflag 
<SPAN    integer(ESMF_KIND_&lt;indexkind&gt;), intent(in) :: haloSeqIndexList(:) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: distgridToArrayMap(:) 
<SPAN    integer, intent(in), optional :: computationalEdgeLWidth(:) 
<SPAN    integer, intent(in), optional :: computationalEdgeUWidth(:) 
<SPAN    integer, intent(in), optional :: computationalLWidth(:) 
<SPAN    integer, intent(in), optional :: computationalUWidth(:) 
<SPAN    integer, intent(in), optional :: totalLWidth(:) 
<SPAN    integer, intent(in), optional :: totalUWidth(:) 
<SPAN    integer, intent(in), optional :: undistLBound(:) 
<SPAN    integer, intent(in), optional :: undistUBound(:) 
<SPAN    character (len=*), intent(in), optional :: name 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate()
<SPAN    function ESMF_ArrayCreateLocalArray(distgrid, localarrayList, &amp;
<SPAN      indexflag, datacopyflag, distgridToArrayMap, computationalEdgeLWidth, &amp;
<SPAN      computationalEdgeUWidth, computationalLWidth, computationalUWidth, &amp;
<SPAN      totalLWidth, totalUWidth, undistLBound, undistUBound, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Array) :: ESMF_ArrayCreateLocalArray
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_DistGrid), intent(in) :: distgrid
<SPAN         type(ESMF_LocalArray), intent(in) :: localarrayList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_Index_Flag), intent(in), optional :: indexflag
<SPAN         type(ESMF_DataCopy_Flag),intent(in), optional :: datacopyflag
<SPAN         integer, intent(in), optional :: distgridToArrayMap(:)
<SPAN         integer, intent(in), optional :: computationalEdgeLWidth(:)
<SPAN         integer, intent(in), optional :: computationalEdgeUWidth(:)
<SPAN         integer, intent(in), optional :: computationalLWidth(:)
<SPAN         integer, intent(in), optional :: computationalUWidth(:)
<SPAN         integer, intent(in), optional :: totalLWidth(:)
<SPAN         integer, intent(in), optional :: totalUWidth(:)
<SPAN         integer, intent(in), optional :: undistLBound(:)
<SPAN         integer, intent(in), optional :: undistUBound(:)
<SPAN         character (len=*), intent(in), optional :: name
<SPAN         integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate()
<SPAN    function ESMF_ArrayCreateLocalArrayArb&lt;indexkind&gt;(distgrid, localarrayList, &amp;
<SPAN    haloSeqIndexList, indexflag, datacopyflag, &amp;
<SPAN    distgridToArrayMap, computationalEdgeLWidth, computationalEdgeUWidth, &amp;
<SPAN    computationalLWidth, computationalUWidth, &amp;
<SPAN    totalLWidth, totalUWidth, undistLBound, undistUBound, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Array) :: ESMF_ArrayCreateLocalArrayArb
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_DistGrid), intent(in) :: distgrid
<SPAN    type(ESMF_LocalArray), intent(in) :: localarrayList(:)
<SPAN    integer(ESMF_KIND_&lt;indexkind&gt;), intent(in) :: haloSeqIndexList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_Index_Flag), intent(in), optional :: indexflag
<SPAN    type(ESMF_DataCopy_Flag),intent(in), optional :: datacopyflag
<SPAN    integer, intent(in), optional :: distgridToArrayMap(:)
<SPAN    integer, intent(in), optional :: computationalEdgeLWidth(:)
<SPAN    integer, intent(in), optional :: computationalEdgeUWidth(:)
<SPAN    integer, intent(in), optional :: computationalLWidth(:)
<SPAN    integer, intent(in), optional :: computationalUWidth(:)
<SPAN    integer, intent(in), optional :: totalLWidth(:)
<SPAN    integer, intent(in), optional :: totalUWidth(:)
<SPAN    integer, intent(in), optional :: undistLBound(:)
<SPAN    integer, intent(in), optional :: undistUBound(:)
<SPAN    character (len=*), intent(in), optional :: name
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added arguments <TT>indexflag</TT>, <TT>computationalEdgeLWidth</TT>,
<SPAN    <TT>computationalEdgeUWidth</TT>, <TT>computationalLWidth</TT>,
<SPAN    <TT>computationalUWidth</TT>, <TT>totalLWidth</TT>, <TT>totalUWidth</TT>. These
<SPAN    arguments were missed in previous versions by mistake.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate()
<SPAN    function ESMF_ArrayCreateAllocate(distgrid, typekind, &amp;
<SPAN      indexflag, pinflag, distgridToArrayMap, computationalEdgeLWidth, &amp;
<SPAN      computationalEdgeUWidth, computationalLWidth, computationalUWidth, &amp;
<SPAN      totalLWidth, totalUWidth, undistLBound, undistUBound, name, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Array) :: ESMF_ArrayCreateAllocate
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_DistGrid), intent(in) :: distgrid
<SPAN         type(ESMF_TypeKind_Flag), intent(in) :: typekind
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_Index_Flag), intent(in), optional :: indexflag
<SPAN         type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN         integer, intent(in), optional :: distgridToArrayMap(:)
<SPAN         integer, intent(in), optional :: computationalEdgeLWidth(:)
<SPAN         integer, intent(in), optional :: computationalEdgeUWidth(:)
<SPAN         integer, intent(in), optional :: computationalLWidth(:)
<SPAN         integer, intent(in), optional :: computationalUWidth(:)
<SPAN         integer, intent(in), optional :: totalLWidth(:)
<SPAN         integer, intent(in), optional :: totalUWidth(:)
<SPAN         integer, intent(in), optional :: undistLBound(:)
<SPAN         integer, intent(in), optional :: undistUBound(:)
<SPAN         character (len=*), intent(in), optional :: name
<SPAN         type(ESMF_VM), intent(in), optional :: vm
<SPAN         integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.3.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>vm</TT> to support object creation on a
<SPAN    different VM than that of the current context.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pinflag</TT> to provide access to DE sharing
<SPAN    between PETs.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate()
<SPAN    function ESMF_ArrayCreateAllocateArb&lt;indexkind&gt;(distgrid, typekind, &amp;
<SPAN    haloSeqIndexList, pinflag, distgridToArrayMap, &amp;
<SPAN    undistLBound, undistUBound, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Array) :: ESMF_ArrayCreateAllocateArb
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_DistGrid), intent(in) :: distgrid
<SPAN    type(ESMF_TypeKind_Flag), intent(in) :: typekind
<SPAN    integer(ESMF_KIND_&lt;indexkind&gt;), intent(in) :: haloSeqIndexList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN    integer, intent(in), optional :: distgridToArrayMap(:)
<SPAN    integer, intent(in), optional :: undistLBound(:)
<SPAN    integer, intent(in), optional :: undistUBound(:)
<SPAN    character (len=*), intent(in), optional :: name
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pinflag</TT> to provide access to DE sharing
<SPAN    between PETs.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate()
<SPAN    function ESMF_ArrayCreateAllocateAS(distgrid, arrayspec, &amp;
<SPAN      indexflag, pinflag, distgridToArrayMap, computationalEdgeLWidth, &amp;
<SPAN      computationalEdgeUWidth, computationalLWidth, computationalUWidth, &amp;
<SPAN      totalLWidth, totalUWidth, undistLBound, undistUBound, name, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Array) :: ESMF_ArrayCreateAllocateAS
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_DistGrid), intent(in) :: distgrid
<SPAN         type(ESMF_ArraySpec), intent(in) :: arrayspec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_Index_Flag), intent(in), optional :: indexflag
<SPAN         type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN         integer, intent(in), optional :: distgridToArrayMap(:)
<SPAN         integer, intent(in), optional :: computationalEdgeLWidth(:)
<SPAN         integer, intent(in), optional :: computationalEdgeUWidth(:)
<SPAN         integer, intent(in), optional :: computationalLWidth(:)
<SPAN         integer, intent(in), optional :: computationalUWidth(:)
<SPAN         integer, intent(in), optional :: totalLWidth(:)
<SPAN         integer, intent(in), optional :: totalUWidth(:)
<SPAN         integer, intent(in), optional :: undistLBound(:)
<SPAN         integer, intent(in), optional :: undistUBound(:)
<SPAN         character (len=*), intent(in), optional :: name
<SPAN         type(ESMF_VM), intent(in), optional :: vm
<SPAN         integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.3.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>vm</TT> to support object creation on a
<SPAN    different VM than that of the current context.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pinflag</TT> to provide access to DE sharing
<SPAN    between PETs.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate()
<SPAN    function ESMF_ArrayCreateAllocateASArb&lt;indexkind&gt;(distgrid, arrayspec, &amp;
<SPAN    haloSeqIndexList, pinflag, distgridToArrayMap, &amp;
<SPAN    undistLBound, undistUBound, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Array) :: ESMF_ArrayCreateAllocateASArb
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_DistGrid), intent(in) :: distgrid
<SPAN    type(ESMF_ArraySpec), intent(in) :: arrayspec
<SPAN    integer(ESMF_KIND_&lt;indexkind&gt;), intent(in) :: haloSeqIndexList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_Pin_Flag), intent(in), optional :: pinflag
<SPAN    integer, intent(in), optional :: distgridToArrayMap(:)
<SPAN    integer, intent(in), optional :: undistLBound(:)
<SPAN    integer, intent(in), optional :: undistUBound(:)
<SPAN    character (len=*), intent(in), optional :: name
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pinflag</TT> to provide access to DE sharing
<SPAN    between PETs.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayCreate()
<SPAN    function ESMF_ArrayCreateCopy(array, datacopyflag, delayout, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Array) :: ESMF_ArrayCreateCopy
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_Array), intent(in) :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
<SPAN         type(ESMF_DELayout), intent(in), optional :: delayout
<SPAN         integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>datacopyflag</TT> to select between different
<SPAN    copy options.
<SPAN <BR>
<SPAN Added argument <TT>delayout</TT> to create Array with different localDe -&gt; DE
<SPAN    mapping. This is identical to a change in DE -&gt; PET mapping.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayDestroy(array, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array), intent(inout) :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical, intent(in), optional :: noGarbage
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN    The argument provides a mechanism to override the default garbage collection
<SPAN    mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayGather(array, farray, rootPet, tile, vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Array), intent(in) :: array 
<SPAN    &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), intent(out), target :: farray(&lt;rank&gt;) 
<SPAN    integer, intent(in) :: rootPet 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(in), optional :: tile 
<SPAN    type(ESMF_VM), intent(in), optional :: vm 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayGet()
<SPAN    subroutine ESMF_ArrayGetDefault(array, arrayspec, typekind, &amp;
<SPAN      rank, localarrayList, indexflag, distgridToArrayMap, &amp;
<SPAN      distgridToPackedArrayMap, arrayToDistGridMap, undistLBound, &amp;
<SPAN      undistUBound, exclusiveLBound, exclusiveUBound, computationalLBound, &amp;
<SPAN      computationalUBound, totalLBound, totalUBound, computationalLWidth, &amp;
<SPAN      computationalUWidth, totalLWidth, totalUWidth, distgrid, dimCount, &amp;
<SPAN      tileCount, minIndexPTile, maxIndexPTile, deToTileMap, indexCountPDe, &amp;
<SPAN      delayout, deCount, localDeCount, ssiLocalDeCount, localDeToDeMap, &amp;
<SPAN      localDeList, &amp; ! DEPRECATED ARGUMENT
<SPAN      name, vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array), intent(in) :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_ArraySpec), intent(out), optional :: arrayspec
<SPAN      type(ESMF_TypeKind_Flag), intent(out), optional :: typekind
<SPAN      integer, intent(out), optional :: rank
<SPAN      type(ESMF_LocalArray), target, intent(out), optional :: localarrayList(:)
<SPAN      type(ESMF_Index_Flag), intent(out), optional :: indexflag
<SPAN      integer, target, intent(out), optional :: distgridToArrayMap(:)
<SPAN      integer, target, intent(out), optional :: distgridToPackedArrayMap(:)
<SPAN      integer, target, intent(out), optional :: arrayToDistGridMap(:)
<SPAN      integer, target, intent(out), optional :: undistLBound(:)
<SPAN      integer, target, intent(out), optional :: undistUBound(:)
<SPAN      integer, target, intent(out), optional :: exclusiveLBound(:,:)
<SPAN      integer, target, intent(out), optional :: exclusiveUBound(:,:)
<SPAN      integer, target, intent(out), optional :: computationalLBound(:,:)
<SPAN      integer, target, intent(out), optional :: computationalUBound(:,:)
<SPAN      integer, target, intent(out), optional :: totalLBound(:,:)
<SPAN      integer, target, intent(out), optional :: totalUBound(:,:)
<SPAN      integer, target, intent(out), optional :: computationalLWidth(:,:)
<SPAN      integer, target, intent(out), optional :: computationalUWidth(:,:)
<SPAN      integer, target, intent(out), optional :: totalLWidth(:,:)
<SPAN      integer, target, intent(out), optional :: totalUWidth(:,:)
<SPAN      type(ESMF_DistGrid), intent(out), optional :: distgrid
<SPAN      integer, intent(out), optional :: dimCount
<SPAN      integer, intent(out), optional :: tileCount
<SPAN      integer, intent(out), optional :: minIndexPTile(:,:)
<SPAN      integer, intent(out), optional :: maxIndexPTile(:,:)
<SPAN      integer, intent(out), optional :: deToTileMap(:)
<SPAN      integer, intent(out), optional :: indexCountPDe(:,:)
<SPAN      type(ESMF_DELayout), intent(out), optional :: delayout
<SPAN      integer, intent(out), optional :: deCount
<SPAN      integer, intent(out), optional :: localDeCount
<SPAN      integer, intent(out), optional :: ssiLocalDeCount
<SPAN      integer, intent(out), optional :: localDeToDeMap(:)
<SPAN      integer, intent(out), optional :: localDeList(:) ! DEPRECATED ARGUMENT
<SPAN      character(len=*), intent(out), optional :: name
<SPAN      type(ESMF_VM), intent(out), optional :: vm
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.2.0rp1</STRONG></DT>
<SPAN <DD>Added argument <TT>localDeToDeMap</TT>.
<SPAN    Started to deprecate argument <TT>localDeList</TT>.
<SPAN    The new argument name correctly uses the <TT>Map</TT> suffix and
<SPAN    better describes the returned information.
<SPAN    This was pointed out by user request.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>ssiLocalDeCount</TT> to support DE sharing
<SPAN    between PETs on the same single system image (SSI).
<SPAN <BR>
<SPAN Added argument <TT>vm</TT> in order to offer information about the
<SPAN    VM on which the Array was created.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayGet()
<SPAN    subroutine ESMF_ArrayGetPLocalDePDim(array, dim, localDe, &amp;
<SPAN      indexCount, indexList, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array), intent(in) :: array
<SPAN      integer, intent(in) :: dim
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(in), optional :: localDe
<SPAN      integer, intent(out), optional :: indexCount
<SPAN      integer, intent(out), optional :: indexList(:)
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayGet() 
<SPAN    subroutine ESMF_ArrayGetFPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(array, localDe, &amp; 
<SPAN    farrayPtr, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Array), intent(in) :: array 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(in), optional :: localDe 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayGet()
<SPAN    subroutine ESMF_ArrayGetLocalArray(array, localDe, localarray, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array), intent(in) :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(in), optional :: localDe
<SPAN      type(ESMF_LocalArray), intent(inout) :: localarray
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayHalo(array, routehandle, &amp;
<SPAN      routesyncflag, finishedflag, cancelledflag, checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),          intent(inout)         :: array
<SPAN      type(ESMF_RouteHandle),    intent(inout)         :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_RouteSync_Flag), intent(in),  optional :: routesyncflag
<SPAN      logical,                   intent(out), optional :: finishedflag
<SPAN      logical,                   intent(out), optional :: cancelledflag
<SPAN      logical,                   intent(in),  optional :: checkflag
<SPAN      integer,                   intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayHaloRelease(routehandle, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(inout)         :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: noGarbage
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ArrayHaloStore(array, routehandle, &amp;
<SPAN        startregion, haloLDepth, haloUDepth, pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),            intent(inout)           :: array
<SPAN      type(ESMF_RouteHandle),      intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_StartRegion_Flag), intent(in),    optional :: startregion
<SPAN      integer,                     intent(in),    optional :: haloLDepth(:)
<SPAN      integer,                     intent(in),    optional :: haloUDepth(:)
<SPAN      integer,                     intent(inout), optional :: pipelineDepth
<SPAN      integer,                     intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pipelineDepth</TT>.
<SPAN                 The new argument provide access to the tuning parameter
<SPAN                 affecting the sparse matrix execution.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_ArrayIsCreated(array, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_ArrayIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array), intent(in)            :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_ArrayPrint(array, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array), intent(in)            :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayRead(array, fileName, variableName, &amp;
<SPAN      timeslice, iofmt, rc)
<SPAN      ! We need to terminate the strings on the way to C++
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),      intent(inout)         :: array
<SPAN      character(*),          intent(in)            :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(*),          intent(in),  optional :: variableName
<SPAN      integer,               intent(in),  optional :: timeslice
<SPAN      type(ESMF_IOFmt_Flag), intent(in),  optional :: iofmt
<SPAN      integer,               intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_ArrayRedist(srcArray, dstArray, routehandle, &amp;
<SPAN      routesyncflag, finishedflag, cancelledflag, zeroregion, checkflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),          intent(in),    optional :: srcArray
<SPAN      type(ESMF_Array),          intent(inout), optional :: dstArray
<SPAN      type(ESMF_RouteHandle),    intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_RouteSync_Flag), intent(in),    optional :: routesyncflag
<SPAN      logical,                   intent(out),   optional :: finishedflag
<SPAN      logical,                   intent(out),   optional :: cancelledflag
<SPAN      type(ESMF_Region_Flag),    intent(in),    optional :: zeroregion
<SPAN      logical,                   intent(in),    optional :: checkflag
<SPAN      integer,                   intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>zeroregion</TT> to allow user to control
<SPAN                 how the destination array is zero'ed out. This is especially
<SPAN                 useful in cases where the source and destination arrays do not
<SPAN                 cover the identical index space.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayRedistRelease(routehandle, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(inout)         :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: noGarbage
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayRedistStore()
<SPAN    subroutine ESMF_ArrayRedistStore&lt;type&gt;&lt;kind&gt;(srcArray, dstArray, &amp;
<SPAN      routehandle, factor, srcToDstTransposeMap, &amp;
<SPAN      ignoreUnmatchedIndices, pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),       intent(in)              :: srcArray
<SPAN      type(ESMF_Array),       intent(inout)           :: dstArray
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN      &lt;type&gt;(ESMF_KIND_&lt;kind&gt;),intent(in)             :: factor
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(in),    optional :: srcToDstTransposeMap(:)
<SPAN      logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                intent(inout), optional :: pipelineDepth
<SPAN      integer,                intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pipelineDepth</TT>.
<SPAN                 The new argument provide access to the tuning parameter
<SPAN                 affecting the sparse matrix execution.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>transposeRoutehandle</TT> to allow a handle to
<SPAN                 the transposed redist operation to be returned.
<SPAN <BR>
<SPAN Added argument <TT>ignoreUnmatchedIndices</TT> to support situations 
<SPAN                 where not all elements between source and destination Arrays 
<SPAN                 match.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Removed argument <TT>transposeRoutehandle</TT> and provide it
<SPAN                 via interface overloading instead. This allows argument 
<SPAN                 <TT>srcArray</TT> to stay strictly intent(in) for this entry point.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayRedistStore()
<SPAN    subroutine ESMF_ArrayRedistStore&lt;type&gt;&lt;kind&gt;TP(srcArray, dstArray, &amp;
<SPAN      routehandle, transposeRoutehandle, factor, &amp;
<SPAN      srcToDstTransposeMap, ignoreUnmatchedIndices, pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),       intent(inout)           :: srcArray
<SPAN      type(ESMF_Array),       intent(inout)           :: dstArray
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: transposeRoutehandle
<SPAN      &lt;type&gt;(ESMF_KIND_&lt;kind&gt;),intent(in)             :: factor
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(in),    optional :: srcToDstTransposeMap(:)
<SPAN      logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                intent(inout), optional :: pipelineDepth
<SPAN      integer,                intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayRedistStore()
<SPAN    subroutine ESMF_ArrayRedistStoreNF(srcArray, dstArray, routehandle, &amp;
<SPAN      srcToDstTransposeMap, ignoreUnmatchedIndices, &amp;
<SPAN      pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),       intent(in)              :: srcArray
<SPAN      type(ESMF_Array),       intent(inout)           :: dstArray
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(in),    optional :: srcToDstTransposeMap(:)
<SPAN      logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                intent(inout), optional :: pipelineDepth
<SPAN      integer,                intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>pipelineDepth</TT>.
<SPAN                 The new argument provide access to the tuning parameter
<SPAN                 affecting the sparse matrix execution.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>transposeRoutehandle</TT> to allow a handle to
<SPAN                 the transposed redist operation to be returned.
<SPAN <BR>
<SPAN Added argument <TT>ignoreUnmatchedIndices</TT> to support situations 
<SPAN                 where not all elements between source and destination Arrays 
<SPAN                 match.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Removed argument <TT>transposeRoutehandle</TT> and provide it
<SPAN                 via interface overloading instead. This allows argument 
<SPAN                 <TT>srcArray</TT> to stay strictly intent(in) for this entry point.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArrayRedistStore()
<SPAN    subroutine ESMF_ArrayRedistStoreNFTP(srcArray, dstArray, routehandle, &amp;
<SPAN      transposeRoutehandle, srcToDstTransposeMap, &amp;
<SPAN      ignoreUnmatchedIndices, pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),       intent(inout)           :: srcArray
<SPAN      type(ESMF_Array),       intent(inout)           :: dstArray
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: transposeRoutehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(in),    optional :: srcToDstTransposeMap(:)
<SPAN      logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                intent(inout), optional :: pipelineDepth
<SPAN      integer,                intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_ArrayScatter(array, farray, rootPet, tile, vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Array), intent(inout) :: array 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), intent(in), target :: farray(&lt;rank&gt;) 
<SPAN    integer, intent(in) :: rootPet 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(in), optional :: tile 
<SPAN    type(ESMF_VM), intent(in), optional :: vm 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArraySet()
<SPAN    subroutine ESMF_ArraySetDefault(array, computationalLWidth, &amp;
<SPAN      computationalUWidth, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),   intent(inout)         :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(in),  optional :: computationalLWidth(:,:)
<SPAN      integer,            intent(in),  optional :: computationalUWidth(:,:)
<SPAN      character(len = *), intent(in),  optional :: name
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArraySet()
<SPAN    subroutine ESMF_ArraySetPLocalDe(array, localDe, rimSeqIndex, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),   intent(inout)         :: array
<SPAN      integer,            intent(in)            :: localDe
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(in),  optional :: rimSeqIndex(:)
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArraySMM(srcArray, dstArray, routehandle, &amp;
<SPAN      routesyncflag, finishedflag, cancelledflag, zeroregion, termorderflag, &amp;
<SPAN      checkflag, dynamicMask, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),               intent(in),    optional :: srcArray
<SPAN      type(ESMF_Array),               intent(inout), optional :: dstArray
<SPAN      type(ESMF_RouteHandle),         intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_RouteSync_Flag),      intent(in),    optional :: routesyncflag
<SPAN      logical,                        intent(out),   optional :: finishedflag
<SPAN      logical,                        intent(out),   optional :: cancelledflag
<SPAN      type(ESMF_Region_Flag),         intent(in),    optional :: zeroregion
<SPAN      type(ESMF_TermOrder_Flag),      intent(in),    optional :: termorderflag
<SPAN      logical,                        intent(in),    optional :: checkflag
<SPAN      type(ESMF_DynamicMask), target, intent(in),    optional :: dynamicMask
<SPAN      integer,                        intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>termorderflag</TT>.
<SPAN                 The new argument gives the user control over the order in which
<SPAN                 the src terms are summed up.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>dynamicMask</TT>.
<SPAN                 The new argument supports the dynamic masking feature.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArraySMMRelease(routehandle, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(inout)         :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: noGarbage
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArraySMMStore()
<SPAN    subroutine ESMF_ArraySMMStore&lt;type&gt;&lt;kind&gt;(srcArray, dstArray, &amp;
<SPAN      routehandle, factorList, factorIndexList, &amp;
<SPAN      ignoreUnmatchedIndices, srcTermProcessing, pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),          intent(in)              :: srcArray
<SPAN      type(ESMF_Array),          intent(inout)           :: dstArray
<SPAN      type(ESMF_RouteHandle),    intent(inout)           :: routehandle
<SPAN      &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)       :: factorList(:)
<SPAN      integer(ESMF_KIND_&lt;kind&gt;), intent(in)              :: factorIndexList(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                   intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                   intent(inout), optional :: srcTermProcessing
<SPAN      integer,                   intent(inout), optional :: pipelineDepth
<SPAN      integer,                   intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>srcTermProcessing</TT>.
<SPAN                 Added argument <TT>pipelineDepth</TT>.
<SPAN                 The new arguments provide access to the tuning parameters
<SPAN                 affecting the sparse matrix execution.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>transposeRoutehandle</TT> to allow a handle to
<SPAN                 the transposed matrix operation to be returned.
<SPAN <BR>
<SPAN Added argument <TT>ignoreUnmatchedIndices</TT> to support sparse 
<SPAN                 matrices that contain elements with indices that do not have a
<SPAN                 match within the source or destination Array.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Removed argument <TT>transposeRoutehandle</TT> and provide it
<SPAN                 via interface overloading instead. This allows argument 
<SPAN                 <TT>srcArray</TT> to stay strictly intent(in) for this entry point.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArraySMMStore()
<SPAN    subroutine ESMF_ArraySMMStore&lt;type&gt;&lt;kind&gt;TP(srcArray, dstArray, &amp;
<SPAN      routehandle, transposeRoutehandle, factorList, factorIndexList, &amp;
<SPAN      ignoreUnmatchedIndices, srcTermProcessing, pipelineDepth, &amp;
<SPAN      rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),          intent(inout)           :: srcArray
<SPAN      type(ESMF_Array),          intent(inout)           :: dstArray
<SPAN      type(ESMF_RouteHandle),    intent(inout)           :: routehandle
<SPAN      type(ESMF_RouteHandle),    intent(inout)           :: transposeRoutehandle
<SPAN      &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)       :: factorList(:)
<SPAN      integer(ESMF_KIND_&lt;kind&gt;), intent(in)              :: factorIndexList(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                   intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                   intent(inout), optional :: srcTermProcessing
<SPAN      integer,                   intent(inout), optional :: pipelineDepth
<SPAN      integer,                   intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_ArraySMMStore()
<SPAN    subroutine ESMF_ArraySMMStoreNF(srcArray, dstArray, routehandle, &amp;
<SPAN      ignoreUnmatchedIndices, srcTermProcessing, pipelineDepth, &amp;
<SPAN      rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),       intent(in)              :: srcArray
<SPAN      type(ESMF_Array),       intent(inout)           :: dstArray
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                intent(inout), optional :: srcTermProcessing
<SPAN      integer,                intent(inout), optional :: pipelineDepth
<SPAN      integer,                intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>srcTermProcessing</TT>.
<SPAN                 Added argument <TT>pipelineDepth</TT>.
<SPAN                 The new arguments provide access to the tuning parameters
<SPAN                 affecting the sparse matrix execution.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>transposeRoutehandle</TT> to allow a handle to
<SPAN                 the transposed matrix operation to be returned.
<SPAN <BR>
<SPAN Added argument <TT>ignoreUnmatchedIndices</TT> to support sparse 
<SPAN                 matrices that contain elements with indices that do not have a
<SPAN                 match within the source or destination Array.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Removed argument <TT>transposeRoutehandle</TT> and provide it
<SPAN                 via interface overloading instead. This allows argument 
<SPAN                 <TT>srcArray</TT> to stay strictly intent(in) for this entry point.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_ArraySMMStore()
<SPAN    subroutine ESMF_ArraySMMStoreNFTP(srcArray, dstArray, routehandle, &amp;
<SPAN      transposeRoutehandle, ignoreUnmatchedIndices, &amp;
<SPAN      srcTermProcessing, pipelineDepth, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),       intent(inout)           :: srcArray
<SPAN      type(ESMF_Array),       intent(inout)           :: dstArray
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: transposeRoutehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                intent(inout), optional :: srcTermProcessing
<SPAN      integer,                intent(inout), optional :: pipelineDepth
<SPAN      integer,                intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_ArraySMMStore()
<SPAN    subroutine ESMF_ArraySMMStoreFromFile(srcArray, dstArray, filename, &amp;
<SPAN      routehandle, ignoreUnmatchedIndices, &amp;
<SPAN      srcTermProcessing, pipelineDepth, rc)
<SPAN  
<SPAN    ! ARGUMENTS:
<SPAN      type(ESMF_Array),       intent(in)              :: srcArray
<SPAN      type(ESMF_Array),       intent(inout)           :: dstArray
<SPAN      character(len=*),       intent(in)              :: filename
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                intent(inout), optional :: srcTermProcessing
<SPAN      integer,                intent(inout), optional :: pipeLineDepth
<SPAN      integer,                intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_ArraySMMStore()
<SPAN    subroutine ESMF_ArraySMMStoreFromFileTP(srcArray, dstArray, filename, &amp;
<SPAN      routehandle, transposeRoutehandle, ignoreUnmatchedIndices,&amp;
<SPAN      srcTermProcessing, pipelineDepth, rc)
<SPAN  
<SPAN    ! ARGUMENTS:
<SPAN      type(ESMF_Array),       intent(inout)           :: srcArray
<SPAN      type(ESMF_Array),       intent(inout)           :: dstArray
<SPAN      character(len=*),       intent(in)              :: filename
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: routehandle
<SPAN      type(ESMF_RouteHandle), intent(inout)           :: transposeRoutehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),    optional :: ignoreUnmatchedIndices
<SPAN      integer,                intent(inout), optional :: srcTermProcessing
<SPAN      integer,                intent(inout), optional :: pipeLineDepth
<SPAN      integer,                intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_ArraySync(array, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array), intent(in)            :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_ArrayValidate(array, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array), intent(in)            :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArrayWrite(array, fileName, &amp;
<SPAN        variableName, convention, purpose,  &amp;
<SPAN        overwrite, status, timeslice, iofmt, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Array),           intent(in)            :: array
<SPAN      character(*),               intent(in)            :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(*),               intent(in),  optional :: variableName
<SPAN      character(*),               intent(in),  optional :: convention
<SPAN      character(*),               intent(in),  optional :: purpose
<SPAN      logical,                    intent(in),  optional :: overwrite
<SPAN      type(ESMF_FileStatus_Flag), intent(in),  optional :: status
<SPAN      integer,                    intent(in),  optional :: timeslice
<SPAN      type(ESMF_IOFmt_Flag),      intent(in),  optional :: iofmt
<SPAN      integer,                    intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_SparseMatrixWrite(factorList, factorIndexList, fileName, &amp;
<SPAN      rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     real(ESMF_KIND_R8),    intent(in)            :: factorList(:)
<SPAN      integer(ESMF_KIND_I4), intent(in)            :: factorIndexList(:,:)
<SPAN      character(*),          intent(in)            :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,               intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_DynamicMaskSetR8R8R8(dynamicMask, dynamicMaskRoutine, &amp;
<SPAN      handleAllElements, dynamicSrcMaskValue, &amp;
<SPAN      dynamicDstMaskValue, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DynamicMask), intent(out)           :: dynamicMask
<SPAN      procedure(ESMF_DynamicMaskRoutineR8R8R8)      :: dynamicMaskRoutine
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: handleAllElements
<SPAN      real(ESMF_KIND_R8),     intent(in),  optional :: dynamicSrcMaskValue
<SPAN      real(ESMF_KIND_R8),     intent(in),  optional :: dynamicDstMaskValue
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_DynamicMaskSetR8R8R8V(dynamicMask, dynamicMaskRoutine, &amp;
<SPAN      handleAllElements, dynamicSrcMaskValue, &amp;
<SPAN      dynamicDstMaskValue, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DynamicMask), intent(out)           :: dynamicMask
<SPAN      procedure(ESMF_DynamicMaskRoutineR8R8R8V)     :: dynamicMaskRoutine
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: handleAllElements
<SPAN      real(ESMF_KIND_R8),     intent(in),  optional :: dynamicSrcMaskValue
<SPAN      real(ESMF_KIND_R8),     intent(in),  optional :: dynamicDstMaskValue
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_DynamicMaskSetR4R8R4(dynamicMask, dynamicMaskRoutine, &amp;
<SPAN      handleAllElements, dynamicSrcMaskValue, &amp;
<SPAN      dynamicDstMaskValue, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DynamicMask), intent(out)           :: dynamicMask
<SPAN      procedure(ESMF_DynamicMaskRoutineR4R8R4)      :: dynamicMaskRoutine
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: handleAllElements
<SPAN      real(ESMF_KIND_R4),     intent(in),  optional :: dynamicSrcMaskValue
<SPAN      real(ESMF_KIND_R4),     intent(in),  optional :: dynamicDstMaskValue
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_DynamicMaskSetR4R8R4V(dynamicMask, dynamicMaskRoutine, &amp;
<SPAN      handleAllElements, dynamicSrcMaskValue, &amp;
<SPAN      dynamicDstMaskValue, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DynamicMask), intent(out)           :: dynamicMask
<SPAN      procedure(ESMF_DynamicMaskRoutineR4R8R4V)     :: dynamicMaskRoutine
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: handleAllElements
<SPAN      real(ESMF_KIND_R4),     intent(in),  optional :: dynamicSrcMaskValue
<SPAN      real(ESMF_KIND_R4),     intent(in),  optional :: dynamicDstMaskValue
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_DynamicMaskSetR4R4R4(dynamicMask, dynamicMaskRoutine, &amp;
<SPAN      handleAllElements, dynamicSrcMaskValue, &amp;
<SPAN      dynamicDstMaskValue, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DynamicMask), intent(out)           :: dynamicMask
<SPAN      procedure(ESMF_DynamicMaskRoutineR4R4R4)      :: dynamicMaskRoutine
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: handleAllElements
<SPAN      real(ESMF_KIND_R4),     intent(in),  optional :: dynamicSrcMaskValue
<SPAN      real(ESMF_KIND_R4),     intent(in),  optional :: dynamicDstMaskValue
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_DynamicMaskSetR4R4R4V(dynamicMask, dynamicMaskRoutine, &amp;
<SPAN      handleAllElements, dynamicSrcMaskValue, &amp;
<SPAN      dynamicDstMaskValue, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DynamicMask), intent(out)           :: dynamicMask
<SPAN      procedure(ESMF_DynamicMaskRoutineR4R4R4V)     :: dynamicMaskRoutine
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional :: handleAllElements
<SPAN      real(ESMF_KIND_R4),     intent(in),  optional :: dynamicSrcMaskValue
<SPAN      real(ESMF_KIND_R4),     intent(in),  optional :: dynamicDstMaskValue
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   interface assignment(=)
<SPAN    localarray1 = localarray2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_LocalArray) :: localarray1
<SPAN    type(ESMF_LocalArray) :: localarray2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN    if (localarray1 == localarray2) then ... endif
<SPAN    OR
<SPAN    result = (localarray1 == localarray2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_LocalArray), intent(in) :: localarray1
<SPAN    type(ESMF_LocalArray), intent(in) :: localarray2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN    if (localarray1 /= localarray2) then ... endif
<SPAN    OR
<SPAN    result = (localarray1 /= localarray2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_LocalArray), intent(in) :: localarray1
<SPAN    type(ESMF_LocalArray), intent(in) :: localarray2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_LocalArrayCreate()
<SPAN    function ESMF_LocalArrayCreateByTKR(typekind, rank, totalCount, &amp;
<SPAN      totalLBound, totalUBound, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_LocalArray) :: ESMF_LocalArrayCreateByTKR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_TypeKind_Flag), intent(in) :: typekind
<SPAN      integer, intent(in) :: rank
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(in), optional :: totalCount(:)
<SPAN      integer, intent(in), optional :: totalLBound(:)
<SPAN      integer, intent(in), optional :: totalUBound(:)
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_LocalArrayCreate()
<SPAN    function ESMF_LocalArrayCreateBySpec(arrayspec, totalCount, &amp;
<SPAN      totalLBound, totalUBound, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_LocalArray) :: ESMF_LocalArrayCreateBySpec
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArraySpec), intent(in) :: arrayspec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(in), optional :: totalCount(:)
<SPAN      integer, intent(in), optional :: totalLBound(:)
<SPAN      integer, intent(in), optional :: totalUBound(:)
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_LocalArrayCreate()
<SPAN    function ESMF_LocalArrayCreateCopy(localarray, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_LocalArray) :: ESMF_LocalArrayCreateCopy
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocalArray), intent(in) :: localarray
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_LocalArrayCreate() 
<SPAN    function ESMF_LocalArrCreateByPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(farrayPtr, &amp; 
<SPAN    datacopyflag, totalCount, totalLBound, totalUBound, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_LocalArray) :: ESMF_LocalArrCreateByPtr&lt;rank&gt;&lt;type&gt;&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr(&lt;rank&gt;) 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(in), optional :: totalCount(:) 
<SPAN    integer, intent(in), optional :: totalLBound(:) 
<SPAN    integer, intent(in), optional :: totalUBound(:) 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_LocalArrayDestroy(localarray, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocalArray), intent(inout) :: localarray
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_LocalArrayGet()
<SPAN    subroutine ESMF_LocalArrayGetDefault(localarray, &amp;
<SPAN      typekind, rank, totalCount, totalLBound, totalUBound, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocalArray), intent(in) :: localarray
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_TypeKind_Flag), intent(out), optional :: typekind
<SPAN      integer, intent(out), optional :: rank
<SPAN      integer, intent(out), optional :: totalCount(:)
<SPAN      integer, intent(out), optional :: totalLBound(:)
<SPAN      integer, intent(out), optional :: totalUBound(:)
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_LocalArrayGet() 
<SPAN    subroutine ESMF_LocalArrayGetData&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(localarray, farrayPtr, &amp; 
<SPAN    datacopyflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_LocalArray) :: localarray 
<SPAN    &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer :: farrayPtr 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN 
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version. 
<SPAN    
<SPAN </LI>
<SPAN </UL> 
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_LocalArrayIsCreated(localarray, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_LocalArrayIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocalArray), intent(in) :: localarray
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   interface assignment(=)
<SPAN      arrayspec1 = arrayspec2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArraySpec) :: arrayspec1
<SPAN      type(ESMF_ArraySpec) :: arrayspec2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN      if (arrayspec1 == arrayspec2) then ... endif
<SPAN                   OR
<SPAN      result = (arrayspec1 == arrayspec2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArraySpec), intent(in) :: arrayspec1
<SPAN      type(ESMF_ArraySpec), intent(in) :: arrayspec2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (arrayspec1 /= arrayspec2) then ... endif
<SPAN                   OR
<SPAN      result = (arrayspec1 /= arrayspec2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArraySpec), intent(in) :: arrayspec1
<SPAN      type(ESMF_ArraySpec), intent(in) :: arrayspec2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArraySpecGet(arrayspec, rank, typekind, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArraySpec),     intent(in)            :: arrayspec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                  intent(out), optional :: rank
<SPAN      type(ESMF_TypeKind_Flag), intent(out), optional :: typekind
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArraySpecPrint(arrayspec, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArraySpec), intent(in)            :: arrayspec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArraySpecSet(arrayspec, rank, typekind, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArraySpec),     intent(out)           :: arrayspec
<SPAN      integer,                  intent(in)            :: rank
<SPAN      type(ESMF_TypeKind_Flag), intent(in)            :: typekind
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_ArraySpecValidate(arrayspec, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_ArraySpec), intent(in)            :: arrayspec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     interface assignment(=)
<SPAN      grid1 = grid2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid) :: grid1
<SPAN      type(ESMF_Grid) :: grid2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN      if (grid1 == grid2) then ... endif
<SPAN                OR
<SPAN      result = (grid1 == grid2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid), intent(in) :: grid1
<SPAN      type(ESMF_Grid), intent(in) :: grid2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (grid1 /= grid2) then ... endif
<SPAN                OR
<SPAN      result = (grid1 /= grid2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid), intent(in) :: grid1
<SPAN      type(ESMF_Grid), intent(in) :: grid2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridAddCoord()
<SPAN       subroutine ESMF_GridAddCoordNoValues(grid, staggerloc,  &amp;
<SPAN         staggerEdgeLWidth, staggerEdgeUWidth, staggerAlign, &amp;
<SPAN         staggerLBound,rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type (ESMF_StaggerLoc), intent(in),  optional :: staggerloc
<SPAN        integer,                intent(in),  optional :: staggerEdgeLWidth(:)
<SPAN        integer,                intent(in),  optional :: staggerEdgeUWidth(:)
<SPAN        integer,                intent(in),  optional :: staggerAlign(:)
<SPAN        integer,                intent(in),  optional :: staggerLBound(:)
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridAddItem()
<SPAN       subroutine ESMF_GridAddItemNoValues(grid, itemflag,  &amp;
<SPAN         staggerloc, itemTypeKind, staggerEdgeLWidth, staggerEdgeUWidth, &amp;
<SPAN         staggerAlign, staggerLBound,rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),          intent(in)           :: grid
<SPAN        type (ESMF_GridItem_Flag),intent(in)           :: itemflag
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type (ESMF_StaggerLoc)  , intent(in), optional :: staggerloc
<SPAN        type (ESMF_TypeKind_Flag),intent(in), optional :: itemTypeKind
<SPAN        integer,                  intent(in), optional :: staggerEdgeLWidth(:)
<SPAN        integer,                  intent(in), optional :: staggerEdgeUWidth(:)
<SPAN        integer,                  intent(in), optional :: staggerAlign(:)
<SPAN        integer,                  intent(in), optional :: staggerLBound(:)
<SPAN        integer,                  intent(out),optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate()
<SPAN        function ESMF_GridCreateCopyFromNewDG(grid, distgrid, &amp;
<SPAN          name, copyAttributes, routehandle, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateCopyFromNewDG
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_Grid),       intent(in)              :: grid
<SPAN         type(ESMF_DistGrid),   intent(in)              :: distgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         character (len=*),     intent(in),   optional  :: name
<SPAN         logical,               intent(in),   optional  :: copyAttributes
<SPAN         type(ESMF_RouteHandle),intent(out),  optional  :: routehandle
<SPAN         integer,               intent(out),  optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>copyAttributes</TT> to support attribute
<SPAN                  propagation from the existing to the newly created grid object. <BR>
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.2.1</STRONG></DT>
<SPAN <DD>Added argument <TT>routehandle</TT> providing the user with a convenient
<SPAN                 way to execute <TT>ESMF_GridRedist()</TT> repeatedly, e.g. when coordinates
<SPAN                 on the source grid have changed.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate()
<SPAN        function ESMF_GridCreateCopyFromReg(grid, &amp;
<SPAN          regDecomp, decompFlag, name, copyAttributes, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateCopyFromReg
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_Grid),        intent(in)              :: grid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,                intent(in),   optional  :: regDecomp(:)
<SPAN         type(ESMF_Decomp_Flag), intent(in),   optional  :: decompflag(:)
<SPAN         character (len=*),      intent(in),   optional  :: name
<SPAN         logical,                intent(in),   optional  :: copyAttributes
<SPAN         integer,                intent(out),  optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>copyAttributes</TT> to support attribute
<SPAN                  propagation from the existing to the newly created grid object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate()
<SPAN        function ESMF_GridCreateEdgeConnI(minIndex,         &amp;
<SPAN          countsPerDEDim1,countsPerDeDim2,                  &amp;
<SPAN          countsPerDEDim3,                                  &amp;
<SPAN          connflagDim1, connflagDim2, connflagDim3,         &amp;
<SPAN          coordSys, coordTypeKind,                          &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                  &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign,        &amp;
<SPAN          gridMemLBound, indexflag, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateEdgeConnI
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                  intent(in),  optional :: minIndex(:)
<SPAN         integer,                  intent(in)            :: countsPerDEDim1(:)
<SPAN         integer,                  intent(in)            :: countsPerDEDim2(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,                  intent(in),  optional :: countsPerDEDim3(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connflagDim1(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connflagDim2(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connflagDim3(:)
<SPAN         type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag), intent(in),  optional :: coordTypeKind
<SPAN         integer,                  intent(in),  optional :: coordDep1(:)
<SPAN         integer,                  intent(in),  optional :: coordDep2(:)
<SPAN         integer,                  intent(in),  optional :: coordDep3(:)
<SPAN         integer,                  intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                  intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                  intent(in),  optional :: gridAlign(:)
<SPAN         integer,                  intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),    intent(in),  optional :: indexflag
<SPAN         integer,                  intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),        intent(in),  optional :: name
<SPAN         integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate()
<SPAN        function ESMF_GridCreateEdgeConnR(regDecomp, decompFlag, &amp;
<SPAN          minIndex, maxIndex,                                    &amp;
<SPAN          connflagDim1, connflagDim2, connflagDim3,                       &amp;
<SPAN          coordSys, coordTypeKind,                            &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                    &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign,          &amp;
<SPAN          gridMemLBound, indexflag, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateEdgeConnR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                  intent(in),  optional :: regDecomp(:)
<SPAN         type(ESMF_Decomp_Flag),   intent(in),  optional :: decompflag(:)
<SPAN         integer,                  intent(in),  optional :: minIndex(:)
<SPAN         integer,                  intent(in)            :: maxIndex(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connflagDim1(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connflagDim2(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connflagDim3(:)
<SPAN         type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag), intent(in),  optional :: coordTypeKind
<SPAN         integer,                  intent(in),  optional :: coordDep1(:)
<SPAN         integer,                  intent(in),  optional :: coordDep2(:)
<SPAN         integer,                  intent(in),  optional :: coordDep3(:)
<SPAN         integer,                  intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                  intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                  intent(in),  optional :: gridAlign(:)
<SPAN         integer,                  intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),    intent(in),  optional :: indexflag
<SPAN         integer,                  intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),        intent(in),  optional :: name
<SPAN         integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate()
<SPAN        function ESMF_GridCreateEdgeConnA(minIndex, maxIndex,  &amp;
<SPAN          arbIndexCount, arbIndexList,                         &amp;
<SPAN          connflagDim1, connflagDim2, connflagDim3,                     &amp;
<SPAN          coordSys, coordTypeKind,                          &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                  &amp;
<SPAN          distDim, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateEdgeConnA
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                  intent(in),  optional :: minIndex(:)
<SPAN         integer,                  intent(in)            :: maxIndex(:)
<SPAN         integer,                  intent(in)            :: arbIndexCount
<SPAN         integer,                  intent(in)            :: arbIndexList(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connflagDim1(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connflagDim2(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connflagDim3(:)
<SPAN         type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag), intent(in),  optional :: coordTypeKind
<SPAN         integer,                  intent(in),  optional :: coordDep1(:)
<SPAN         integer,                  intent(in),  optional :: coordDep2(:)
<SPAN         integer,                  intent(in),  optional :: coordDep3(:)
<SPAN         integer,                  intent(in),  optional :: distDim(:)
<SPAN         character (len=*),        intent(in),  optional :: name
<SPAN         integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate()
<SPAN        function ESMF_GridCreateFrmDistGrid(distgrid, &amp;
<SPAN          distgridToGridMap, &amp;
<SPAN          coordSys, coordTypeKind, coordDimCount, coordDimMap, &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign, &amp;
<SPAN          gridMemLBound, indexflag, name, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateFrmDistGrid
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_DistGrid),     intent(in)            :: distgrid
<SPAN         integer,                 intent(in),  optional :: distgridToGridMap(:)
<SPAN         type(ESMF_CoordSys_Flag),intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag),intent(in),  optional :: coordTypeKind
<SPAN         integer,                 intent(in),  optional :: coordDimCount(:)
<SPAN         integer,                 intent(in),  optional :: coordDimMap(:,:)
<SPAN         integer,                 intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                 intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                 intent(in),  optional :: gridAlign(:)
<SPAN         integer,                 intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),   intent(in),  optional :: indexflag
<SPAN         character (len=*),       intent(in),  optional :: name
<SPAN         type(ESMF_VM),           intent(in),  optional :: vm
<SPAN         integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate()
<SPAN        function ESMF_GridCreateFrmDistGridArb(distgrid, &amp;
<SPAN          indexArray, distDim, &amp;
<SPAN          coordSys, coordTypeKind, coordDimCount, coordDimMap, &amp;
<SPAN          name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateFrmDistGridArb
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_DistGrid),      intent(in)              :: distgrid
<SPAN         integer,                  intent(in)              :: indexArray(:,:)
<SPAN         integer,                  intent(in),   optional  :: distDim(:)
<SPAN         type(ESMF_CoordSys_Flag), intent(in),   optional  :: coordSys
<SPAN         type(ESMF_TypeKind_Flag), intent(in),   optional  :: coordTypeKind
<SPAN         integer,                  intent(in),   optional  :: coordDimCount(:)
<SPAN         integer,                  intent(in),   optional  :: coordDimMap(:,:)
<SPAN         character (len=*),        intent(in),   optional  :: name
<SPAN         integer,                  intent(out),  optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate()
<SPAN       function ESMF_GridCreateFrmNCFileDG(filename, fileformat, distgrid, &amp;
<SPAN         isSphere, polekindflag, addCornerStagger, coordTypeKind, addUserArea, indexflag, &amp;
<SPAN         addMask, varname, coordNames, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateFrmNCFileDG
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> 
<SPAN      character(len=*),       intent(in)             :: filename
<SPAN      type(ESMF_FileFormat_Flag), intent(in), optional :: fileformat
<SPAN      type(ESMF_DistGrid),    intent(in)             :: distgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),  optional  :: isSphere
<SPAN      type(ESMF_PoleKind_Flag),  intent(in),  optional :: polekindflag(2)
<SPAN      logical,                intent(in),  optional  :: addCornerStagger
<SPAN      type(ESMF_TypeKind_Flag),intent(in), optional  :: coordTypeKind
<SPAN      logical,                intent(in),  optional  :: addUserArea
<SPAN      type(ESMF_Index_Flag),  intent(in),  optional  :: indexflag
<SPAN      logical,                intent(in),  optional  :: addMask
<SPAN      character(len=*),       intent(in),  optional  :: varname
<SPAN      character(len=*),       intent(in),  optional  :: coordNames(:)
<SPAN      integer,                intent(out), optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate()
<SPAN       function ESMF_GridCreateFrmNCFile(filename, fileformat, regDecomp, &amp;
<SPAN         decompflag, delayout, isSphere, polekindflag, addCornerStagger, coordTypeKind, &amp;
<SPAN         addUserArea, indexflag, addMask, varname, coordNames, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateFrmNCFile
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> 
<SPAN      character(len=*),       intent(in)                :: filename
<SPAN      type(ESMF_FileFormat_Flag), intent(in), optional  :: fileformat
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(in),  optional     :: regDecomp(:)
<SPAN      type(ESMF_Decomp_Flag), intent(in),  optional     :: decompflag(:)
<SPAN      type(ESMF_DELayout),    intent(in),  optional     :: delayout
<SPAN      logical,                intent(in),  optional     :: isSphere
<SPAN      type(ESMF_PoleKind_Flag),  intent(in),  optional  :: polekindflag(2)
<SPAN      logical,                intent(in),  optional     :: addCornerStagger 
<SPAN      type(ESMF_TypeKind_Flag),intent(in), optional     :: coordTypeKind
<SPAN      logical,                intent(in),  optional     :: addUserArea
<SPAN      type(ESMF_Index_Flag),  intent(in),  optional     :: indexflag
<SPAN      logical,                intent(in),  optional     :: addMask
<SPAN      character(len=*),       intent(in),  optional     :: varname
<SPAN      character(len=*),       intent(in),  optional     :: coordNames(:)
<SPAN      integer,                intent(out), optional     :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate1PeriDim()
<SPAN        function ESMF_GridCreate1PeriDimI(minIndex,         &amp;
<SPAN          countsPerDEDim1,countsPerDeDim2,                  &amp;
<SPAN          countsPerDEDim3,                                  &amp;
<SPAN          polekindflag, periodicDim, poleDim,                   &amp;
<SPAN          coordSys, coordTypeKind,                          &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                  &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign,        &amp;
<SPAN          gridMemLBound, indexflag, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreate1PeriDimI
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: minIndex(:)
<SPAN         integer,                   intent(in)            :: countsPerDEDim1(:)
<SPAN         integer,                   intent(in)            :: countsPerDEDim2(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,                   intent(in),  optional :: countsPerDEDim3(:)
<SPAN         type(ESMF_PoleKind_Flag),  intent(in),  optional :: polekindflag(2)
<SPAN         integer,                   intent(in),  optional :: periodicDim
<SPAN         integer,                   intent(in),  optional :: poleDim
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag),  intent(in),  optional :: coordTypeKind
<SPAN         integer,                   intent(in),  optional :: coordDep1(:)
<SPAN         integer,                   intent(in),  optional :: coordDep2(:)
<SPAN         integer,                   intent(in),  optional :: coordDep3(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridAlign(:)
<SPAN         integer,                   intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),     intent(in),  optional :: indexflag
<SPAN         integer,                   intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate1PeriDim()
<SPAN        function ESMF_GridCreate1PeriDimR(regDecomp, decompFlag, &amp;
<SPAN          minIndex, maxIndex,                                    &amp;
<SPAN          polekindflag, periodicDim, poleDim,                        &amp;
<SPAN          coordSys, coordTypeKind,                               &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                       &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign,             &amp;
<SPAN          gridMemLBound, indexflag, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreate1PeriDimR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: regDecomp(:)
<SPAN         type(ESMF_Decomp_Flag),    intent(in),  optional :: decompflag(:)
<SPAN         integer,                   intent(in),  optional :: minIndex(:)
<SPAN         integer,                   intent(in)            :: maxIndex(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_PoleKind_Flag),  intent(in),  optional :: polekindflag(2)
<SPAN         integer,                   intent(in),  optional :: periodicDim
<SPAN         integer,                   intent(in),  optional :: poleDim
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag),  intent(in),  optional :: coordTypeKind
<SPAN         integer,                   intent(in),  optional :: coordDep1(:)
<SPAN         integer,                   intent(in),  optional :: coordDep2(:)
<SPAN         integer,                   intent(in),  optional :: coordDep3(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridAlign(:)
<SPAN         integer,                   intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),     intent(in),  optional :: indexflag
<SPAN         integer,                   intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate1PeriDim()
<SPAN        function ESMF_GridCreate1PeriDimA(minIndex, maxIndex,  &amp;
<SPAN          arbIndexCount, arbIndexList,                         &amp;
<SPAN          polekindflag, periodicDim, poleDim,                      &amp;
<SPAN          coordSys, coordTypeKind,                             &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                     &amp;
<SPAN          distDim, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreate1PeriDimA
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: minIndex(:)
<SPAN          integer,                   intent(in)            :: maxIndex(:)
<SPAN         integer,                   intent(in)                    :: arbIndexCount
<SPAN         integer,                   intent(in)            :: arbIndexList(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_PoleKind_Flag),  intent(in),  optional :: polekindflag(2)
<SPAN         integer,                   intent(in),  optional :: periodicDim
<SPAN         integer,                   intent(in),  optional :: poleDim
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag),  intent(in),  optional :: coordTypeKind
<SPAN         integer,                   intent(in),  optional :: coordDep1(:)
<SPAN         integer,                   intent(in),  optional :: coordDep2(:)
<SPAN         integer,                   intent(in),  optional :: coordDep3(:)
<SPAN         integer,                   intent(in),  optional :: distDim(:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate2PeriDim()
<SPAN        function ESMF_GridCreate2PeriDimI(minIndex,         &amp;
<SPAN          countsPerDEDim1,countsPerDeDim2,                  &amp;
<SPAN          countsPerDEDim3,                                  &amp;
<SPAN          coordSys, coordTypeKind,                          &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                  &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign,        &amp;
<SPAN          gridMemLBound, indexflag, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreate2PeriDimI
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: minIndex(:)
<SPAN         integer,                   intent(in)            :: countsPerDEDim1(:)
<SPAN         integer,                   intent(in)            :: countsPerDEDim2(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,                   intent(in),  optional :: countsPerDEDim3(:)
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag),  intent(in),  optional :: coordTypeKind
<SPAN         integer,                   intent(in),  optional :: coordDep1(:)
<SPAN         integer,                   intent(in),  optional :: coordDep2(:)
<SPAN         integer,                   intent(in),  optional :: coordDep3(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridAlign(:)
<SPAN         integer,                   intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),     intent(in),  optional :: indexflag
<SPAN         integer,                   intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate2PeriDim()
<SPAN        function ESMF_GridCreate2PeriDimR(regDecomp, decompFlag, &amp;
<SPAN          minIndex, maxIndex,                                    &amp;
<SPAN          coordSys, coordTypeKind,                               &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                       &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign,             &amp;
<SPAN          gridMemLBound, indexflag, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreate2PeriDimR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: regDecomp(:)
<SPAN         type(ESMF_Decomp_Flag),    intent(in),  optional :: decompflag(:)
<SPAN         integer,                   intent(in),  optional :: minIndex(:)
<SPAN         integer,                   intent(in)            :: maxIndex(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag),  intent(in),  optional :: coordTypeKind
<SPAN         integer,                   intent(in),  optional :: coordDep1(:)
<SPAN         integer,                   intent(in),  optional :: coordDep2(:)
<SPAN         integer,                   intent(in),  optional :: coordDep3(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridAlign(:)
<SPAN         integer,                   intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),     intent(in),  optional :: indexflag
<SPAN         integer,                   intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate2PeriDim()
<SPAN        function ESMF_GridCreate2PeriDimA(minIndex, maxIndex, &amp;
<SPAN          arbIndexCount, arbIndexList,                        &amp;
<SPAN          coordSys, coordTypeKind,                            &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                    &amp;
<SPAN          distDim, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreate2PeriDimA
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: minIndex(:)
<SPAN         integer,                   intent(in)            :: maxIndex(:)
<SPAN         integer,                   intent(in)                    :: arbIndexCount
<SPAN          integer,                   intent(in)            :: arbIndexList(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag),  intent(in),  optional :: coordTypeKind
<SPAN         integer,                   intent(in),  optional :: coordDep1(:)
<SPAN         integer,                   intent(in),  optional :: coordDep2(:)
<SPAN         integer,                   intent(in),  optional :: coordDep3(:)
<SPAN         integer,                   intent(in),  optional :: distDim(:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreateNoPeriDim()
<SPAN        function ESMF_GridCreateNoPeriDimI(minIndex,        &amp;
<SPAN          countsPerDEDim1,countsPerDeDim2,                  &amp;
<SPAN          countsPerDEDim3,                                  &amp;
<SPAN          coordSys, coordTypeKind,                          &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                  &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign,        &amp;
<SPAN          gridMemLBound, indexflag, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateNoPeriDimI
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: minIndex(:)
<SPAN         integer,                   intent(in)            :: countsPerDEDim1(:)
<SPAN         integer,                   intent(in)            :: countsPerDEDim2(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,                   intent(in),  optional :: countsPerDEDim3(:)
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag),  intent(in),  optional :: coordTypeKind
<SPAN         integer,                   intent(in),  optional :: coordDep1(:)
<SPAN         integer,                   intent(in),  optional :: coordDep2(:)
<SPAN         integer,                   intent(in),  optional :: coordDep3(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridAlign(:)
<SPAN         integer,                   intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),     intent(in),  optional :: indexflag
<SPAN         integer,                   intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreateNoPeriDim()
<SPAN        function ESMF_GridCreateNoPeriDimR(regDecomp, decompFlag, &amp;
<SPAN          minIndex, maxIndex,                                     &amp;
<SPAN          coordSys, coordTypeKind,                                &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                        &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign,              &amp;
<SPAN          gridMemLBound, indexflag, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateNoPeriDimR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: regDecomp(:)
<SPAN         type(ESMF_Decomp_Flag),    intent(in),  optional :: decompflag(:)
<SPAN         integer,                   intent(in),  optional :: minIndex(:)
<SPAN         integer,                   intent(in)            :: maxIndex(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag),  intent(in),  optional :: coordTypeKind
<SPAN         integer,                   intent(in),  optional :: coordDep1(:)
<SPAN         integer,                   intent(in),  optional :: coordDep2(:)
<SPAN         integer,                   intent(in),  optional :: coordDep3(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                   intent(in),  optional :: gridAlign(:)
<SPAN         integer,                   intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),     intent(in),  optional :: indexflag
<SPAN          integer,                   intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreateNoPeriodic()
<SPAN        function ESMF_GridCreateNoPeriDimA(minIndex, maxIndex, &amp;
<SPAN          arbIndexCount, arbIndexList,                         &amp;
<SPAN          coordSys, coordTypeKind,                             &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                     &amp;
<SPAN          distDim, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>        type(ESMF_Grid) :: ESMF_GridCreateNoPeriDimA
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: minIndex(:)
<SPAN         integer,                   intent(in)            :: maxIndex(:)
<SPAN         integer,                   intent(in)                    :: arbIndexCount
<SPAN         integer,                   intent(in)            :: arbIndexList(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag),  intent(in),  optional :: coordTypeKind
<SPAN         integer,                   intent(in),  optional :: coordDep1(:)
<SPAN         integer,                   intent(in),  optional :: coordDep2(:)
<SPAN         integer,                   intent(in),  optional :: coordDep3(:)
<SPAN         integer,                   intent(in),  optional :: distDim(:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate1PeriDimUfrm()
<SPAN        function ESMF_GridCreate1PeriDimUfrmR(minIndex, maxIndex, &amp;
<SPAN             minCornerCoord, maxCornerCoord, &amp;
<SPAN             regDecomp, decompFlag, &amp;
<SPAN             polekindflag, coordSys, staggerLocList, &amp;
<SPAN             ignoreNonPeriCoord, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>        type(ESMF_Grid) :: ESMF_GridCreate1PeriDimUfrmR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: minIndex(:)
<SPAN         integer,                   intent(in)            :: maxIndex(:)
<SPAN         real(ESMF_KIND_R8),        intent(in)            :: minCornerCoord(:)
<SPAN         real(ESMF_KIND_R8),        intent(in)            :: maxCornerCoord(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,                   intent(in),  optional :: regDecomp(:)
<SPAN         type(ESMF_Decomp_Flag),    intent(in),  optional :: decompflag(:)
<SPAN         type(ESMF_PoleKind_Flag),  intent(in),  optional :: polekindflag(2)
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_StaggerLoc),     intent(in),  optional :: staggerLocList(:)
<SPAN         logical,                   intent(in),  optional :: ignoreNonPeriCoord
<SPAN         integer,                   intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreate1PeriDimUfrm()
<SPAN    function ESMF_GridCreate1PeriDimUfrmB(minIndex, maxIndex, &amp;
<SPAN              minCornerCoord, maxCornerCoord, &amp;
<SPAN              deBlockList, deLabelList, &amp;
<SPAN              polekindflag, coordSys, staggerLocList, &amp;
<SPAN              ignoreNonPeriCoord, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Grid) :: ESMF_GridCreate1PeriDimUfrmB
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                   intent(in),  optional :: minIndex(:)
<SPAN      integer,                   intent(in)            :: maxIndex(:)
<SPAN      real(ESMF_KIND_R8),        intent(in)            :: minCornerCoord(:)
<SPAN      real(ESMF_KIND_R8),        intent(in)            :: maxCornerCoord(:)
<SPAN      integer,                   intent(in)            :: deBlockList(:,:,:)
<SPAN      integer,                   intent(in),  optional :: deLabelList(:)
<SPAN      type(ESMF_PoleKind_Flag),  intent(in),  optional :: polekindflag(2)
<SPAN      type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN      type(ESMF_StaggerLoc),     intent(in),  optional :: staggerLocList(:)
<SPAN      logical,                   intent(in),  optional :: ignoreNonPeriCoord
<SPAN      integer,                   intent(in),  optional :: petMap(:,:,:)
<SPAN      character (len=*),         intent(in),  optional :: name
<SPAN      integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>  ! Private name; call using ESMF_GridCreateNoPeriDimUfrm()
<SPAN        function ESMF_GridCreateNoPeriDimUfrmR(minIndex, maxIndex, &amp;
<SPAN          minCornerCoord, maxCornerCoord, &amp;
<SPAN          regDecomp, decompFlag, &amp;
<SPAN          coordSys, staggerLocList, petMap, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Grid) :: ESMF_GridCreateNoPeriDimUfrmR
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        integer,                   intent(in),  optional :: minIndex(:)
<SPAN         integer,                   intent(in)            :: maxIndex(:)
<SPAN         real(ESMF_KIND_R8),        intent(in)            :: minCornerCoord(:)
<SPAN         real(ESMF_KIND_R8),        intent(in)            :: maxCornerCoord(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,                   intent(in),  optional :: regDecomp(:)
<SPAN         type(ESMF_Decomp_Flag),    intent(in),  optional :: decompflag(:)
<SPAN         type(ESMF_CoordSys_Flag),  intent(in),  optional :: coordSys
<SPAN         type(ESMF_StaggerLoc),     intent(in),  optional :: staggerLocList(:)
<SPAN         integer,                   intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),         intent(in),  optional :: name
<SPAN         integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreateCubedSphere()
<SPAN    function ESMF_GridCreateCubedSphereReg(tileSize,&amp;
<SPAN          regDecompPTile, decompflagPTile,                        &amp;
<SPAN          coordSys, coordTypeKind,                                &amp;
<SPAN          deLabelList, staggerLocList,                            &amp;
<SPAN          delayout, indexflag, name, transformArgs, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Grid) :: ESMF_GridCreateCubedSphereReg
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                        intent(in)            :: tilesize
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                        intent(in),  optional :: regDecompPTile(:,:)
<SPAN      type(ESMF_Decomp_Flag), target, intent(in),  optional :: decompflagPTile(:,:)
<SPAN      type(ESMF_CoordSys_Flag),       intent(in),  optional :: coordSys
<SPAN      type(ESMF_TypeKind_Flag),       intent(in),  optional :: coordTypeKind
<SPAN      integer,                        intent(in),  optional :: deLabelList(:)
<SPAN      type(ESMF_StaggerLoc),          intent(in),  optional :: staggerLocList(:)
<SPAN      type(ESMF_DELayout),            intent(in),  optional :: delayout
<SPAN      type(ESMF_Index_Flag),          intent(in),  optional :: indexflag
<SPAN      character(len=*),               intent(in),  optional :: name
<SPAN      type(ESMF_CubedSphereTransform_Args), intent(in),  optional :: transformArgs
<SPAN      integer,                        intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridCreateCubedSphere()
<SPAN    function ESMF_GridCreateCubedSphereIReg(tileSize,             &amp;
<SPAN          countsPerDEDim1PTile, countsPerDEDim2PTile,             &amp;
<SPAN                                                 &amp;        
<SPAN          coordSys, coordTypeKind,                                &amp;
<SPAN          deLabelList, staggerLocList,                            &amp;
<SPAN          delayout, indexflag, name, transformArgs, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Grid) :: ESMF_GridCreateCubedSphereIReg
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                        intent(in)            :: tilesize
<SPAN      integer,                        intent(in)            :: countsPerDEDim1PTile(:,:)
<SPAN      integer,                        intent(in)            :: countsPerDEDim2PTile(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_CoordSys_Flag),       intent(in),  optional :: coordSys
<SPAN      type(ESMF_TypeKind_Flag),       intent(in),  optional :: coordTypeKind
<SPAN      integer,                        intent(in),  optional :: deLabelList(:)
<SPAN      type(ESMF_StaggerLoc),          intent(in),  optional :: staggerLocList(:)
<SPAN      type(ESMF_DELayout),            intent(in),  optional :: delayout
<SPAN      type(ESMF_Index_Flag),          intent(in),  optional :: indexflag
<SPAN      character(len=*),               intent(in),  optional :: name
<SPAN      type(ESMF_CubedSphereTransform_Args), intent(in),  optional :: transformArgs
<SPAN      integer,                        intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_GridCreateMosaicReg(filename,regDecompPTile, decompflagPTile, &amp;
<SPAN          coordTypeKind, deLabelList, staggerLocList, delayout, indexflag, name, tileFilePath, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Grid) :: ESMF_GridCreateMosaicReg
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(len=*),               intent(in)            :: filename
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                        intent(in),  optional :: regDecompPTile(:,:)
<SPAN      type(ESMF_Decomp_Flag), target, intent(in),  optional :: decompflagPTile(:,:)
<SPAN      type(ESMF_TypeKind_Flag),       intent(in),  optional :: coordTypeKind
<SPAN      integer,                        intent(in),  optional :: deLabelList(:)
<SPAN      type(ESMF_StaggerLoc),          intent(in),  optional :: staggerLocList(:)
<SPAN      type(ESMF_DELayout),            intent(in),  optional :: delayout
<SPAN      type(ESMF_Index_Flag),          intent(in),  optional :: indexflag
<SPAN      character(len=*),               intent(in),  optional :: name
<SPAN      character(len=*),               intent(in),  optional :: tileFilePath
<SPAN      integer,                        intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_GridCreateMosaicIReg(filename,                  &amp;
<SPAN            countsPerDEDim1PTile, countsPerDEDim2PTile,           &amp;
<SPAN                                                 &amp;
<SPAN            coordTypeKind,                                        &amp;
<SPAN            deLabelList, staggerLocList,                          &amp;
<SPAN            delayout, indexflag, name, tileFilePath, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Grid) :: ESMF_GridCreateMosaicIReg
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(len=*),               intent(in)            :: filename
<SPAN      integer,                        intent(in)            :: countsPerDEDim1PTile(:,:)
<SPAN      integer,                        intent(in)            :: countsPerDEDim2PTile(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_TypeKind_Flag),       intent(in),  optional :: coordTypeKind
<SPAN      integer,                        intent(in),  optional :: deLabelList(:)
<SPAN      type(ESMF_StaggerLoc),          intent(in),  optional :: staggerLocList(:)
<SPAN      type(ESMF_DELayout),            intent(in),  optional :: delayout
<SPAN      type(ESMF_Index_Flag),          intent(in),  optional :: indexflag
<SPAN      character(len=*),               intent(in),  optional :: name
<SPAN      character(len=*),               intent(in),  optional :: tileFilePath
<SPAN      integer,                        intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_GridDestroy(grid, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid), intent(inout)         :: grid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,         intent(in),  optional :: noGarbage
<SPAN        integer,         intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridEmptyComplete()
<SPAN        subroutine ESMF_GridEmptyCompleteEConnI(grid, minIndex,         &amp;
<SPAN          countsPerDEDim1,countsPerDeDim2,                  &amp;
<SPAN          countsPerDEDim3,                                  &amp;
<SPAN          connDim1, connDim2, connDim3,                     &amp;
<SPAN          coordSys, coordTypeKind,                          &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                  &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign,        &amp;
<SPAN          gridMemLBound, indexflag, petMap, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type (ESMF_Grid)                                :: grid
<SPAN         integer,                  intent(in),  optional :: minIndex(:)
<SPAN         integer,                  intent(in)            :: countsPerDEDim1(:)
<SPAN         integer,                  intent(in)            :: countsPerDEDim2(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,                  intent(in),  optional :: countsPerDEDim3(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connDim1(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connDim2(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connDim3(:)
<SPAN         type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag), intent(in),  optional :: coordTypeKind
<SPAN         integer,                  intent(in),  optional :: coordDep1(:)
<SPAN         integer,                  intent(in),  optional :: coordDep2(:)
<SPAN         integer,                  intent(in),  optional :: coordDep3(:)
<SPAN         integer,                  intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                  intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                  intent(in),  optional :: gridAlign(:)
<SPAN         integer,                  intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),    intent(in),  optional :: indexflag
<SPAN         integer,                  intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),        intent(in),  optional :: name
<SPAN         integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridEmptyComplete()
<SPAN       subroutine ESMF_GridEmptyCompleteEConnR(grid, regDecomp, decompFlag, &amp;
<SPAN          minIndex, maxIndex,                                    &amp;
<SPAN          connDim1, connDim2, connDim3,                       &amp;
<SPAN          coordSys, coordTypeKind,                            &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                    &amp;
<SPAN          gridEdgeLWidth, gridEdgeUWidth, gridAlign,          &amp;
<SPAN          gridMemLBound, indexflag, petMap, name, rc)
<SPAN  
<SPAN   !
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type (ESMF_Grid)                                :: grid
<SPAN         integer,                  intent(in),  optional :: regDecomp(:)
<SPAN         type(ESMF_Decomp_Flag),   intent(in),  optional :: decompflag(:)
<SPAN         integer,                  intent(in),  optional :: minIndex(:)
<SPAN         integer,                  intent(in)            :: maxIndex(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connDim1(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connDim2(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connDim3(:)
<SPAN         type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag), intent(in),  optional :: coordTypeKind
<SPAN         integer,                  intent(in),  optional :: coordDep1(:)
<SPAN         integer,                  intent(in),  optional :: coordDep2(:)
<SPAN         integer,                  intent(in),  optional :: coordDep3(:)
<SPAN         integer,                  intent(in),  optional :: gridEdgeLWidth(:)
<SPAN         integer,                  intent(in),  optional :: gridEdgeUWidth(:)
<SPAN         integer,                  intent(in),  optional :: gridAlign(:)
<SPAN         integer,                  intent(in),  optional :: gridMemLBound(:)
<SPAN         type(ESMF_Index_Flag),    intent(in),  optional :: indexflag
<SPAN         integer,                  intent(in),  optional :: petMap(:,:,:)
<SPAN         character (len=*),        intent(in),  optional :: name
<SPAN         integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_GridEmptyComplete()
<SPAN        subroutine ESMF_GridEmptyCompleteEConnA(grid, minIndex, maxIndex,  &amp;
<SPAN          arbIndexCount, arbIndexList,                         &amp;
<SPAN          connDim1, connDim2, connDim3,                     &amp;
<SPAN          coordSys, coordTypeKind,                          &amp;
<SPAN          coordDep1, coordDep2, coordDep3,                  &amp;
<SPAN          distDim, name, rc)
<SPAN   !
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type (ESMF_Grid)                                :: grid
<SPAN         integer,                  intent(in),  optional :: minIndex(:)
<SPAN         integer,                  intent(in)            :: maxIndex(:)
<SPAN         integer,                  intent(in)            :: arbIndexCount
<SPAN         integer,                  intent(in)            :: arbIndexList(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connDim1(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connDim2(:)
<SPAN         type(ESMF_GridConn_Flag), intent(in),  optional :: connDim3(:)
<SPAN         type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN         type(ESMF_TypeKind_Flag), intent(in),  optional :: coordTypeKind
<SPAN         integer,                  intent(in),  optional :: coordDep1(:)
<SPAN         integer,                  intent(in),  optional :: coordDep2(:)
<SPAN         integer,                  intent(in),  optional :: coordDep3(:)
<SPAN         integer,                  intent(in),  optional :: distDim(:)
<SPAN         character (len=*),        intent(in),  optional :: name
<SPAN         integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>      function ESMF_GridEmptyCreate(vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>      type(ESMF_Grid) :: ESMF_GridEmptyCreate
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         type(ESMF_VM),           intent(in),  optional :: vm
<SPAN         integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>vm</TT> to support object creation on a
<SPAN                  different VM than that of the current context.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGet()
<SPAN        subroutine ESMF_GridGetDefault(grid, coordTypeKind, &amp;
<SPAN          dimCount, tileCount, staggerlocCount, localDECount, distgrid, &amp;
<SPAN          distgridToGridMap, coordSys, coordDimCount, coordDimMap, arbDim, &amp;
<SPAN          rank, arbDimCount, gridEdgeLWidth, gridEdgeUWidth, gridAlign,  &amp;
<SPAN          indexFlag, status, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),            intent(in)            :: grid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_TypeKind_Flag),  intent(out), optional :: coordTypeKind
<SPAN        integer,                   intent(out), optional :: dimCount
<SPAN        integer,                   intent(out), optional :: tileCount
<SPAN        integer,                   intent(out), optional :: staggerlocCount
<SPAN        integer,                   intent(out), optional :: localDECount
<SPAN        type(ESMF_DistGrid),       intent(out), optional :: distgrid
<SPAN        integer,       target,     intent(out), optional :: distgridToGridMap(:)
<SPAN        type(ESMF_CoordSys_Flag),  intent(out), optional :: coordSys
<SPAN        integer,       target,     intent(out), optional :: coordDimCount(:)
<SPAN        integer,       target,     intent(out), optional :: coordDimMap(:,:)
<SPAN        integer,                   intent(out), optional :: arbDim
<SPAN        integer,                   intent(out), optional :: rank
<SPAN        integer,                   intent(out), optional :: arbDimCount
<SPAN        integer,       target,     intent(out), optional :: gridEdgeLWidth(:)
<SPAN        integer,       target,     intent(out), optional :: gridEdgeUWidth(:)
<SPAN        integer,       target,     intent(out), optional :: gridAlign(:)
<SPAN        type(ESMF_Index_Flag),     intent(out), optional :: indexflag
<SPAN        type(ESMF_GridStatus_Flag),intent(out), optional :: status
<SPAN        character (len=*),         intent(out), optional :: name
<SPAN        integer,                   intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGet()
<SPAN        subroutine ESMF_GridGetPLocalDe(grid, localDE, &amp;
<SPAN          isLBound,isUBound, arbIndexCount, arbIndexList, tile, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN        integer,                intent(in)            :: localDE
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,                intent(out), optional :: isLBound(:)
<SPAN        logical,                intent(out), optional :: isUBound(:)
<SPAN        integer,                intent(out), optional :: arbIndexCount
<SPAN        integer,        target, intent(out), optional :: arbIndexList(:,:)
<SPAN        integer,                intent(out), optional :: tile
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>tile</TT>. This new argument allows the user to 
<SPAN                  query the tile within which the localDE is contained. 
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGet()
<SPAN        subroutine ESMF_GridGetPLocalDePSloc(grid, staggerloc, localDE, &amp;
<SPAN          exclusiveLBound, exclusiveUBound, exclusiveCount,  &amp;
<SPAN          computationalLBound, computationalUBound, computationalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN        type (ESMF_StaggerLoc), intent(in)            :: staggerloc
<SPAN        integer,                intent(in)            :: localDE
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,        target, intent(out), optional :: exclusiveLBound(:)
<SPAN        integer,        target, intent(out), optional :: exclusiveUBound(:)
<SPAN        integer,        target, intent(out), optional :: exclusiveCount(:)
<SPAN        integer,        target, intent(out), optional :: computationalLBound(:)
<SPAN        integer,        target, intent(out), optional :: computationalUBound(:)
<SPAN        integer,        target, intent(out), optional :: computationalCount(:)
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGet()
<SPAN        subroutine ESMF_GridGetPSloc(grid, staggerloc, &amp;
<SPAN          distgrid, &amp;
<SPAN          staggerEdgeLWidth, staggerEdgeUWidth, &amp;
<SPAN          staggerAlign, staggerLBound, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN        type (ESMF_StaggerLoc), intent(in)            :: staggerloc
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_DistGrid),    intent(out), optional :: distgrid
<SPAN        integer,                intent(out), optional :: staggerEdgeLWidth(:)
<SPAN        integer,                intent(out), optional :: staggerEdgeUWidth(:)
<SPAN        integer,                intent(out), optional :: staggerAlign(:)
<SPAN        integer,                intent(out), optional :: staggerLBound(:)
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added arguments <TT>staggerEdgeLWidth</TT>, <TT>staggerEdgeUWidth</TT>,
<SPAN                  <TT>staggerAlign</TT>, and <TT>staggerLBound</TT>. These new arguments 
<SPAN                   allow the user to get width, alignment, and bound information for
<SPAN                   the given stagger location. 
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGet()
<SPAN        subroutine ESMF_GridGetPSlocPTile(grid, tile, staggerloc, &amp;
<SPAN          minIndex, maxIndex, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN        integer,                intent(in)            :: tile
<SPAN        type (ESMF_StaggerLoc), intent(in)            :: staggerloc
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,        target, intent(out), optional :: minIndex(:)
<SPAN        integer,        target, intent(out), optional :: maxIndex(:)
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>        subroutine ESMF_GridGetCoord&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(grid, coordDim,    &amp;
<SPAN           staggerloc, localDE, farrayPtr, datacopyflag,                  &amp;
<SPAN           exclusiveLBound, exclusiveUBound, exclusiveCount,              &amp;
<SPAN           computationalLBound, computationalUBound, computationalCount,  &amp;
<SPAN           totalLBound, totalUBound, totalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),       intent(in)              :: grid
<SPAN        integer,               intent(in)              :: coordDim
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type (ESMF_StaggerLoc) intent(in),    optional :: staggerloc
<SPAN        integer,               intent(in),    optional :: localDE
<SPAN        &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer             :: farrayPtr(&lt;rank&gt;)
<SPAN        type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
<SPAN        integer,               intent(out),   optional :: exclusiveLBound(:)
<SPAN        integer,               intent(out),   optional :: exclusiveUBound(:)
<SPAN        integer,               intent(out),   optional :: exclusiveCount(:)
<SPAN        integer,               intent(out),   optional :: computationalLBound(:)
<SPAN        integer,               intent(out),   optional :: computationalUBound(:)
<SPAN        integer,               intent(out),   optional :: computationalCount(:)
<SPAN        integer,               intent(out),   optional :: totalLBound(:)
<SPAN        integer,               intent(out),   optional :: totalUBound(:)
<SPAN        integer,               intent(out),   optional :: totalCount(:)
<SPAN        integer,               intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGetCoord()
<SPAN        subroutine ESMF_GridGetCoordIntoArray(grid, coordDim, staggerloc, &amp;
<SPAN          array, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN        integer,                intent(in)            :: coordDim
<SPAN        type (ESMF_StaggerLoc), intent(in),  optional :: staggerloc
<SPAN        type(ESMF_Array),       intent(out)           :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGetCoord()
<SPAN        subroutine ESMF_GridGetCoordR4(grid, staggerloc, localDE, &amp;
<SPAN          index, coord, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN        type (ESMF_StaggerLoc), intent(in),  optional :: staggerloc
<SPAN        integer,                intent(in),  optional :: localDE
<SPAN        integer,                intent(in)            :: index(:)
<SPAN        real(ESMF_KIND_R4),     intent(out)           :: coord(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGetCoord()
<SPAN        subroutine ESMF_GridGetCoordR8(grid, staggerloc, localDE, &amp;
<SPAN          index, coord, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN        type (ESMF_StaggerLoc), intent(in),  optional :: staggerloc
<SPAN        integer,                intent(in),  optional :: localDE
<SPAN        integer,                intent(in)            :: index(:)
<SPAN        real(ESMF_KIND_R8),     intent(out)           :: coord(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGetCoord()
<SPAN        subroutine ESMF_GridGetCoordInfo(grid, &amp;
<SPAN          staggerloc, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),           intent(in)            :: grid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type (ESMF_StaggerLoc),    intent(in),  optional :: staggerloc
<SPAN        logical,                   intent(out), optional :: isPresent
<SPAN        integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_GridGetCoordBounds(grid, coordDim,   &amp;
<SPAN          staggerloc, localDE, exclusiveLBound, exclusiveUBound, &amp;
<SPAN          exclusiveCount, computationalLBound, computationalUBound , &amp;
<SPAN          computationalCount, totalLBound, totalUBound, totalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN        integer,                intent(in)            :: coordDim
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type (ESMF_StaggerLoc), intent(in),  optional :: staggerloc
<SPAN        integer,                intent(in),  optional :: localDE
<SPAN        integer,        target, intent(out), optional :: exclusiveLBound(:)
<SPAN        integer,        target, intent(out), optional :: exclusiveUBound(:)
<SPAN        integer,        target, intent(out), optional :: exclusiveCount(:)
<SPAN        integer,        target, intent(out), optional :: computationalLBound(:)
<SPAN        integer,        target, intent(out), optional :: computationalUBound(:)
<SPAN        integer,        target, intent(out), optional :: computationalCount(:)
<SPAN        integer,        target, intent(out), optional :: totalLBound(:)
<SPAN        integer,        target, intent(out), optional :: totalUBound(:)
<SPAN        integer,        target, intent(out), optional :: totalCount(:)
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>        subroutine ESMF_GridGetItem&lt;rank&gt;&lt;type&gt;&lt;kind&gt;(grid, itemflag,  &amp;
<SPAN           staggerloc, localDE, farrayPtr, datacopyflag,                  &amp;
<SPAN           exclusiveLBound, exclusiveUBound, exclusiveCount,              &amp;
<SPAN           computationalLBound, computationalUBound, computationalCount,  &amp;
<SPAN           totalLBound, totalUBound, totalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),      intent(in)               :: grid
<SPAN        type (ESMF_GridItem_Flag),intent(in)           :: itemflag
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type (ESMF_StaggerLoc), intent(in),  optional  :: staggerloc
<SPAN        integer,              intent(in),    optional  :: localDE
<SPAN        &lt;type&gt; (ESMF_KIND_&lt;kind&gt;), pointer             :: farrayPtr(&lt;rank&gt;)
<SPAN        type(ESMF_DataCopy_Flag),intent(in), optional  :: datacopyflag
<SPAN        integer,              intent(out),   optional  :: exclusiveLBound(:)
<SPAN        integer,              intent(out),   optional  :: exclusiveUBound(:)
<SPAN        integer,              intent(out),   optional  :: exclusiveCount(:)
<SPAN        integer,              intent(out),   optional  :: computationalLBound(:)
<SPAN        integer,              intent(out),   optional  :: computationalUBound(:)
<SPAN        integer,              intent(out),   optional  :: computationalCount(:)
<SPAN        integer,              intent(out),   optional  :: totalLBound(:)
<SPAN        integer,              intent(out),   optional  :: totalUBound(:)
<SPAN        integer,              intent(out),   optional  :: totalCount(:)
<SPAN        integer,              intent(out),   optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGetItem()
<SPAN        subroutine ESMF_GridGetItemIntoArray(grid, itemflag,  staggerloc, &amp;
<SPAN          array, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),           intent(in)            :: grid
<SPAN        type (ESMF_GridItem_Flag), intent(in)            :: itemflag
<SPAN        type (ESMF_StaggerLoc),    intent(in),  optional :: staggerloc
<SPAN        type(ESMF_Array),          intent(out)           :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                   intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridGetItem()
<SPAN        subroutine ESMF_GridGetItemInfo(grid, itemflag, &amp;
<SPAN          staggerloc, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),           intent(in)            :: grid
<SPAN        type (ESMF_GridItem_Flag), intent(in)            :: itemflag
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type (ESMF_StaggerLoc),    intent(in),  optional :: staggerloc
<SPAN        logical,                   intent(out), optional :: isPresent
<SPAN        integer,                   intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_GridGetItemBounds(grid, itemflag,  &amp;
<SPAN          staggerloc, localDE, &amp;
<SPAN          exclusiveLBound, exclusiveUBound, exclusiveCount, &amp;
<SPAN          computationalLBound, computationalUBound, computationalCount,  &amp;
<SPAN          totalLBound, totalUBound, totalCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN        type (ESMF_GridItem_Flag), intent(in)         :: itemflag
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type (ESMF_StaggerLoc), intent(in),  optional :: staggerloc
<SPAN        integer,                intent(in),  optional :: localDE
<SPAN        integer,        target, intent(out), optional :: exclusiveLBound(:)
<SPAN        integer,        target, intent(out), optional :: exclusiveUBound(:)
<SPAN        integer,        target, intent(out), optional :: exclusiveCount(:)
<SPAN        integer,        target, intent(out), optional :: computationalLBound(:)
<SPAN        integer,        target, intent(out), optional :: computationalUBound(:)
<SPAN        integer,        target, intent(out), optional :: computationalCount(:)
<SPAN        integer,        target, intent(out), optional :: totalLBound(:)
<SPAN        integer,        target, intent(out), optional :: totalUBound(:)
<SPAN        integer,        target, intent(out), optional :: totalCount(:)
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_GridIsCreated(grid, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_GridIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid), intent(in)            :: grid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_GridMatch(grid1, grid2, globalflag, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_GridMatch_Flag) :: ESMF_GridMatch
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid),  intent(in)              :: grid1
<SPAN      type(ESMF_Grid),  intent(in)              :: grid2
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,          intent(in),   optional  :: globalflag
<SPAN      integer,          intent(out),  optional  :: rc
<SPAN </PRE>

<SPAN <PRE>     subroutine ESMF_GridRedist(srcGrid, dstGrid, routehandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_Grid),       intent(in)              :: srcGrid
<SPAN         type(ESMF_Grid),       intent(inout)           :: dstGrid
<SPAN         type(ESMF_RouteHandle),intent(inout)           :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,               intent(out),  optional  :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_GridSetCoordFromArray(grid, coordDim, staggerloc, &amp;
<SPAN          array, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),        intent(in)            :: grid
<SPAN        integer,                intent(in)            :: coordDim
<SPAN        type (ESMF_StaggerLoc), intent(in),  optional :: staggerloc
<SPAN        type(ESMF_Array),       intent(in)            :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_GridSetItem()
<SPAN        subroutine ESMF_GridSetItemFromArray(grid, itemflag,  staggerloc, &amp;
<SPAN          array, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Grid),           intent(in)            :: grid
<SPAN        type (ESMF_GridItem_Flag), intent(in)            :: itemflag
<SPAN        type (ESMF_StaggerLoc),    intent(in),  optional :: staggerloc
<SPAN        type(ESMF_Array),          intent(in)            :: array
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                   intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_GridValidate(grid, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid), intent(in)              :: grid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,         intent(out),  optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_StaggerLocGet() 
<SPAN        subroutine ESMF_StaggerLocGetDim(staggerloc, dim, loc, &amp;
<SPAN             rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type (ESMF_StaggerLoc), intent(in)  :: staggerloc
<SPAN        integer,                intent(in)  :: dim
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, optional,      intent(out) :: loc
<SPAN        integer, optional                   :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_StaggerLocSet() 
<SPAN       subroutine ESMF_StaggerLocSetAllDim(staggerloc, loc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type (ESMF_StaggerLoc), intent(inout) :: staggerloc
<SPAN        integer,                intent(in)    :: loc(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, optional                     :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_StaggerLocSet() 
<SPAN         subroutine ESMF_StaggerLocSetDim(staggerloc, dim, loc, &amp;
<SPAN              rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type (ESMF_StaggerLoc), intent(inout) :: staggerloc
<SPAN        integer,                intent(in)    :: dim
<SPAN        integer,                intent(in)    :: loc
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, optional                     :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_StaggerLocString(staggerloc, string, &amp;
<SPAN             rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_StaggerLoc), intent(in)  :: staggerloc
<SPAN        character (len = *),   intent(out) :: string
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, optional,     intent(out) :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_StaggerLocPrint(staggerloc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type (ESMF_StaggerLoc), intent(in)  :: staggerloc
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, optional,      intent(out) :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     interface assignment(=)
<SPAN      locstream1 = locstream2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocStream) :: locstream1
<SPAN      type(ESMF_LocStream) :: locstream2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN      if (locstream1 == locstream2) then ... endif
<SPAN                OR
<SPAN      result = (locstream1 == locstream2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocStream), intent(in) :: locstream1
<SPAN      type(ESMF_LocStream), intent(in) :: locstream2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (locstream1 /= locstream2) then ... endif
<SPAN                OR
<SPAN      result = (locstream1 /= locstream2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocStream), intent(in) :: locstream1
<SPAN      type(ESMF_LocStream), intent(in) :: locstream2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_LocStreamAddKey()
<SPAN    subroutine ESMF_LocStreamAddKeyAlloc(locstream, keyName, &amp;
<SPAN                 keyTypeKind, keyUnits, keyLongName, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Locstream),     intent(in)            :: locstream
<SPAN      character (len=*),        intent(in)            :: keyName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_TypeKind_Flag), intent(in),  optional :: keyTypeKind
<SPAN      character (len=*),        intent(in),  optional :: keyUnits 
<SPAN      character (len=*),        intent(in),  optional :: keyLongName 
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_LocStreamAddKey()
<SPAN    subroutine ESMF_LocStreamAddKeyArray(locstream, keyName, keyArray, &amp;
<SPAN                 destroyKey, keyUnits, keyLongName, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Locstream), intent(in)             :: locstream
<SPAN      character (len=*),    intent(in)             :: keyName
<SPAN      type(ESMF_Array),     intent(in)             :: keyArray
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,              intent(in),  optional  :: destroyKey
<SPAN      character (len=*),    intent(in),  optional  :: keyUnits 
<SPAN      character (len=*),    intent(in),  optional  :: keyLongName 
<SPAN      integer,              intent(out), optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_LocStreamAddKey()
<SPAN     subroutine ESMF_LocStreamAddKeyI4(locstream, keyName, farray, &amp;
<SPAN                  datacopyflag, keyUnits, keyLongName, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_Locstream), intent(in) :: locstream
<SPAN       character (len=*), intent(in) :: keyName
<SPAN       &lt;farray&gt;
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
<SPAN       character (len=*), intent(in), optional :: keyUnits
<SPAN       character (len=*), intent(in), optional :: keyLongName
<SPAN       integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_LocStreamCreate()
<SPAN        function ESMF_LocStreamCreateByBkgGrid(locstream, &amp;
<SPAN                   background, maskValues, &amp;
<SPAN                   unmappedaction, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_LocStream) :: ESMF_LocStreamCreateByBkgGrid
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_LocStream),           intent(in)            :: locstream
<SPAN        type(ESMF_Grid),                intent(in)            :: background
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),          intent(in),  optional :: maskValues(:)
<SPAN        type(ESMF_UnmappedAction_Flag), intent(in),  optional :: unmappedaction
<SPAN        character (len=*),              intent(in),  optional :: name
<SPAN        integer,                        intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_LocStreamCreate()
<SPAN        function ESMF_LocStreamCreateByBkgMesh(locstream, &amp;
<SPAN                   background, unmappedaction, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_LocStream) :: ESMF_LocStreamCreateByBkgMesh
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_LocStream),           intent(in)           :: locstream
<SPAN        type(ESMF_Mesh),                intent(in)           :: background
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_UnmappedAction_Flag), intent(in), optional :: unmappedaction
<SPAN        character (len=*),              intent(in), optional :: name
<SPAN        integer,                        intent(out),optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name: call using ESMF_LocStreamCreate()
<SPAN        function ESMF_LocStreamCreateFromDG(distgrid, &amp;
<SPAN          indexflag, coordSys, name, vm, rc )
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_LocStream) :: ESMF_LocStreamCreateFromDG
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_DistGrid),      intent(in)            :: distgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_Index_Flag),    intent(in),  optional :: indexflag    
<SPAN        type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN        character (len=*),        intent(in),  optional :: name
<SPAN        type(ESMF_VM),            intent(in),  optional :: vm
<SPAN        integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name: call using ESMF_LocStreamCreate()
<SPAN        function ESMF_LocStreamCreateIrreg(minIndex, countsPerDE, &amp;
<SPAN                    indexflag, coordSys, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_LocStream) :: ESMF_LocStreamCreateIrreg
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       integer, intent(in), optional                   :: minIndex
<SPAN        integer, intent(in)                             :: countsPerDE(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_Index_Flag), intent(in), optional     :: indexflag
<SPAN        type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN        character (len=*), intent(in), optional         :: name
<SPAN        integer, intent(out), optional                  :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name: call using ESMF_LocStreamCreate()
<SPAN        function ESMF_LocStreamCreateFromLocal(localCount, &amp;
<SPAN                    indexflag, coordSys, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_LocStream) :: ESMF_LocStreamCreateFromLocal
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       integer, intent(in)                             :: localCount
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_Index_Flag), intent(in), optional     :: indexflag
<SPAN        type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN        character (len=*), intent(in), optional         :: name
<SPAN        integer, intent(out), optional                  :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name: call using ESMF_LocStreamCreate()
<SPAN        function ESMF_LocStreamCreateFromNewDG(locstream, distgrid, &amp;
<SPAN             name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_LocStream) :: ESMF_LocStreamCreateFromNewDG
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_LocStream), intent(in)                :: locstream
<SPAN        type(ESMF_DistGrid),  intent(in)                :: distgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character (len=*),    intent(in), optional      :: name
<SPAN        integer,              intent(out), optional     :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name: call using ESMF_LocStreamCreate()
<SPAN        function ESMF_LocStreamCreateReg(regDecomp, decompFlag, &amp;
<SPAN                      minIndex, maxIndex, &amp;
<SPAN                      coordSys, indexflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_LocStream) :: ESMF_LocStreamCreateReg
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       integer,                  intent(in),  optional  :: regDecomp
<SPAN        type(ESMF_Decomp_Flag),   intent(in),  optional  :: decompflag
<SPAN        integer,                  intent(in),  optional  :: minIndex
<SPAN        integer,                  intent(in)             :: maxIndex
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_CoordSys_Flag), intent(in),  optional  :: coordSys
<SPAN        type(ESMF_Index_Flag),    intent(in),  optional  :: indexflag
<SPAN        character (len=*),        intent(in),  optional  :: name
<SPAN        integer,                  intent(out), optional  :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name: call using ESMF_LocStreamCreate()
<SPAN        function ESMF_LocStreamCreateFromFile(filename, &amp;
<SPAN             fileformat, varname, indexflag, centerflag, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_LocStream) :: ESMF_LocStreamCreateFromFile
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       character (len=*),          intent(in)           :: filename
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_FileFormat_Flag), intent(in), optional :: fileformat
<SPAN        character(len=*),           intent(in), optional :: varname
<SPAN        type(ESMF_Index_Flag),      intent(in), optional :: indexflag
<SPAN        logical,                    intent(in), optional :: centerflag
<SPAN        character (len=*),          intent(in), optional :: name
<SPAN        integer,                    intent(out),optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_LocStreamDestroy(locstream, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_LocStream), intent(inout)          :: locstream 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,              intent(in),   optional :: noGarbage
<SPAN        integer,              intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_LocStreamGet(locstream, &amp;
<SPAN         distgrid, keyCount, keyNames, localDECount, indexflag, &amp;
<SPAN         coordSys, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Locstream),         intent(in)            :: locstream
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_DistGrid),          intent(out), optional :: distgrid
<SPAN      integer,                      intent(out), optional :: keyCount
<SPAN      character(len=ESMF_MAXSTR),                optional :: keyNames(:) 
<SPAN      integer,                      intent(out), optional :: localDECount
<SPAN      type(ESMF_Index_Flag),        intent(out), optional :: indexflag
<SPAN      type(ESMF_CoordSys_Flag),     intent(out), optional :: coordSys
<SPAN      character(len=*),             intent(out), optional :: name
<SPAN      integer,                      intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_LocStreamGetBounds(locstream,   &amp;
<SPAN            localDE, exclusiveLBound, exclusiveUBound, exclusiveCount,   &amp;
<SPAN            computationalLBound, computationalUBound, computationalCount,&amp;
<SPAN            rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_LocStream),   intent(in) :: locstream
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                intent(in),  optional :: localDE
<SPAN        integer,                intent(out), optional :: exclusiveLBound
<SPAN        integer,                intent(out), optional :: exclusiveUBound
<SPAN        integer,                intent(out), optional :: exclusiveCount
<SPAN        integer,                intent(out), optional :: computationalLBound
<SPAN        integer,                intent(out), optional :: computationalUBound
<SPAN        integer,                intent(out), optional :: computationalCount
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_LocStreamGetKey()
<SPAN    subroutine ESMF_LocStreamGetKeyArray(locstream, keyName, keyArray, &amp;
<SPAN         rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Locstream), intent(in)            :: locstream
<SPAN      character (len=*),    intent(in)            :: keyName
<SPAN      type(ESMF_Array),     intent(out)           :: keyArray
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_LocStreamGetKey()
<SPAN    subroutine ESMF_LocStreamGetKeyInfo(locstream, keyName, &amp;
<SPAN         keyUnits, keyLongName, typekind, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Locstream),     intent(in)            :: locstream
<SPAN      character (len=*),        intent(in)            :: keyName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character (len=*),        intent(out), optional :: keyUnits 
<SPAN      character (len=*),        intent(out), optional :: keyLongName 
<SPAN      type(ESMF_TypeKind_Flag), intent(out), optional :: typekind
<SPAN      logical,                  intent(out), optional :: isPresent
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_LocStreamGetKey()
<SPAN         subroutine ESMF_LocStreamGetKey(locstream, keyName, &amp;
<SPAN             localDE, exclusiveLBound, exclusiveUBound, exclusiveCount,       &amp;
<SPAN             computationalLBound, computationalUBound, computationalCount,    &amp;
<SPAN             totalLBound, totalUBound, totalCount,                            &amp;
<SPAN             farray, datacopyflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_LocStream),   intent(in)            :: locstream
<SPAN         character (len=*),      intent(in)            :: keyName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,                intent(in),  optional :: localDE
<SPAN         integer,                intent(out), optional :: exclusiveLBound
<SPAN         integer,                intent(out), optional :: exclusiveUBound
<SPAN         integer,                intent(out), optional :: exclusiveCount
<SPAN         integer,                intent(out), optional :: computationalLBound
<SPAN         integer,                intent(out), optional :: computationalUBound
<SPAN         integer,                intent(out), optional :: computationalCount
<SPAN         integer,                intent(out), optional :: totalLBound
<SPAN         integer,                intent(out), optional :: totalUBound
<SPAN         integer,                intent(out), optional :: totalCount
<SPAN         &lt;farray&gt;
<SPAN         type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag
<SPAN         integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_LocStreamIsCreated(locstream, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_LocStreamIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_LocStream), intent(in)            :: locstream
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_LocStreamPrint(locstream, options, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_LocStream), intent(in)             :: locstream 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character (len = *),  intent(in),   optional :: options
<SPAN        integer,              intent(out),  optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_LocStreamValidate(locstream, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_LocStream), intent(in)            :: locstream 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,              intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     interface assignment(=)
<SPAN      mesh1 = mesh2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh) :: mesh1
<SPAN      type(ESMF_Mesh) :: mesh2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    interface operator(==)
<SPAN      if (mesh1 == mesh2) then ... endif
<SPAN                OR
<SPAN      result = (mesh1 == mesh2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh), intent(in) :: mesh1
<SPAN      type(ESMF_Mesh), intent(in) :: mesh2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (mesh1 /= mesh2) then ... endif
<SPAN                OR
<SPAN      result = (mesh1 /= mesh2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh), intent(in) :: mesh1
<SPAN      type(ESMF_Mesh), intent(in) :: mesh2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_MeshAddElements(mesh, elementIds, elementTypes, &amp;
<SPAN                   elementConn, elementMask, elementArea, elementCoords, &amp;
<SPAN                   elementDistgrid, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh),    intent(inout)         :: mesh
<SPAN      integer,            intent(in)            :: elementIds(:)
<SPAN      integer,            intent(in)            :: elementTypes(:)
<SPAN      integer,            intent(in)            :: elementConn(:)
<SPAN      integer,            intent(in),  optional :: elementMask(:)
<SPAN      real(ESMF_KIND_R8), intent(in),  optional :: elementArea(:)
<SPAN      real(ESMF_KIND_R8), intent(in),  optional :: elementCoords(:)
<SPAN      type(ESMF_DistGrid), intent(in), optional :: elementDistgrid
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     subroutine ESMF_MeshAddNodes(mesh, nodeIds, nodeCoords, nodeOwners, &amp;
<SPAN                                   nodeMask, nodalDistgrid, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh),    intent(inout)         :: mesh
<SPAN      integer,            intent(in)            :: nodeIds(:)
<SPAN      real(ESMF_KIND_R8), intent(in)            :: nodeCoords(:)
<SPAN      integer,            intent(in),  optional :: nodeOwners(:)
<SPAN      integer,            intent(in),  optional :: nodeMask(:)
<SPAN      type(ESMF_DistGrid), intent(in), optional :: nodalDistgrid
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MeshCreate()
<SPAN      function ESMF_MeshCreate3Part(parametricDim, spatialDim, coordSys, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Mesh)                                 :: ESMF_MeshCreate3Part
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                  intent(in)            :: parametricDim
<SPAN      integer,                  intent(in)            :: spatialDim
<SPAN      type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN      character(len=*),         intent(in),  optional :: name
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MeshCreate()
<SPAN      function ESMF_MeshCreate1Part(parametricDim, spatialDim, &amp;
<SPAN                     nodeIds, nodeCoords, nodeOwners, nodeMask, nodalDistgrid, &amp;
<SPAN                     elementIds, elementTypes, elementConn, &amp;
<SPAN                     elementMask, elementArea, elementCoords, &amp;
<SPAN                     elementDistgrid, coordSys, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Mesh)                                 :: ESMF_MeshCreate1Part
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                  intent(in)            :: parametricDim
<SPAN      integer,                  intent(in)            :: spatialDim
<SPAN      integer,                  intent(in)            :: nodeIds(:)
<SPAN      real(ESMF_KIND_R8),       intent(in)            :: nodeCoords(:)
<SPAN      integer,                  intent(in),  optional :: nodeOwners(:)
<SPAN      integer,                  intent(in),  optional :: nodeMask(:)
<SPAN      type(ESMF_DistGrid),      intent(in),  optional :: nodalDistgrid
<SPAN      integer,                  intent(in)            :: elementIds(:)
<SPAN      integer,                  intent(in)            :: elementTypes(:)
<SPAN      integer,                  intent(in)            :: elementConn(:)
<SPAN      integer,                  intent(in),  optional :: elementMask(:)
<SPAN      real(ESMF_KIND_R8),       intent(in),  optional :: elementArea(:)
<SPAN      real(ESMF_KIND_R8),       intent(in),  optional :: elementCoords(:)
<SPAN      type(ESMF_DistGrid),      intent(in),  optional :: elementDistgrid
<SPAN      type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN      character(len=*),         intent(in),  optional :: name
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MeshCreate()
<SPAN      function ESMF_MeshCreateFromGrid(grid, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Mesh)         :: ESMF_MeshCreateFromGrid
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Grid),        intent(in)            :: grid
<SPAN      character(len=*),       intent(in),  optional :: name
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MeshCreate()
<SPAN      function ESMF_MeshCreateFromFile(filename, fileformat, &amp;
<SPAN                   convertToDual, addUserArea, maskFlag, varname, &amp;
<SPAN                   nodalDistgrid, elementDistgrid, &amp;
<SPAN                   coordSys, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Mesh)         :: ESMF_MeshCreateFromFile
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(len=*),           intent(in)            :: filename
<SPAN      type(ESMF_FileFormat_Flag), intent(in)            :: fileformat
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                    intent(in),  optional :: convertToDual
<SPAN      logical,                    intent(in),  optional :: addUserArea
<SPAN      type(ESMF_MeshLoc),         intent(in),  optional :: maskFlag
<SPAN      character(len=*),           intent(in),  optional :: varname
<SPAN      type(ESMF_DistGrid),        intent(in),  optional :: nodalDistgrid
<SPAN      type(ESMF_DistGrid),        intent(in),  optional :: elementDistgrid
<SPAN      type(ESMF_CoordSys_Flag),   intent(in),  optional :: coordSys
<SPAN      character(len=*),           intent(in),  optional :: name
<SPAN      integer,                    intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MeshCreate()
<SPAN      function ESMF_MeshCreateRedist(mesh, nodalDistgrid, &amp;
<SPAN        elementDistgrid, vm, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Mesh)                            :: ESMF_MeshCreateRedist
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh),          intent(in)            :: mesh
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_DistGrid),      intent(in),  optional :: nodalDistgrid
<SPAN      type(ESMF_DistGrid),      intent(in),  optional :: elementDistgrid
<SPAN      type(ESMF_VM),            intent(in),  optional :: vm
<SPAN      character(len=*),         intent(in),  optional :: name
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MeshCreate()
<SPAN      function  ESMF_MeshCreateEasyElems1Type(parametricDim, coordSys, &amp;
<SPAN                     elementIds, elementType, elementCornerCoords, &amp;
<SPAN                     elementMask, elementArea, elementCoords, &amp;
<SPAN                     elementDistgrid, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Mesh) :: ESMF_MeshCreateEasyElems1Type
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                  intent(in)            :: parametricDim
<SPAN      type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN      integer,                  intent(in),  optional :: elementIds(:)
<SPAN      integer,                  intent(in)            :: elementType
<SPAN      real(ESMF_KIND_R8),       intent(in)            :: elementCornerCoords(:,:,:)
<SPAN      integer,                  intent(in),  optional :: elementMask(:)
<SPAN      real(ESMF_KIND_R8),       intent(in),  optional :: elementArea(:)
<SPAN      real(ESMF_KIND_R8),       intent(in),  optional :: elementCoords(:,:)
<SPAN      type(ESMF_DistGrid),      intent(in),  optional :: elementDistgrid
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_MeshCreate()
<SPAN      function  ESMF_MeshCreateEasyElemsGen(parametricDim, coordSys, &amp;
<SPAN                     elementIds, elementTypes, elementCornerCoords, &amp;
<SPAN                     elementMask, elementArea, elementCoords, &amp;
<SPAN                     elementDistgrid, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Mesh) :: ESMF_MeshCreateEasyElemsGen
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                  intent(in)            :: parametricDim
<SPAN      type(ESMF_CoordSys_Flag), intent(in),  optional :: coordSys
<SPAN      integer,                  intent(in),  optional :: elementIds(:)
<SPAN      integer,                  intent(in)            :: elementTypes(:)
<SPAN      real(ESMF_KIND_R8),       intent(in)            :: elementCornerCoords(:,:)
<SPAN      integer,                  intent(in),  optional :: elementMask(:)
<SPAN      real(ESMF_KIND_R8),       intent(in),  optional :: elementArea(:)
<SPAN      real(ESMF_KIND_R8),       intent(in),  optional :: elementCoords(:,:)
<SPAN      type(ESMF_DistGrid),      intent(in),  optional :: elementDistgrid
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE> function ESMF_MeshCreateCubedSphere(tileSize, nx, ny, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Mesh)         :: ESMF_MeshCreateCubedSphere
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                  intent(in)            :: tileSize
<SPAN      integer,                  intent(in)            :: nx
<SPAN      integer,                  intent(in)            :: ny
<SPAN      character(len=*),         intent(in),  optional :: name
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_MeshDestroy(mesh, noGarbage, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh), intent(inout)          :: mesh
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,         intent(in),   optional :: noGarbage
<SPAN      integer,         intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     function ESMF_MeshEmptyCreate(nodalDistgrid, elementDistgrid, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_Mesh)         :: ESMF_MeshEmptyCreate
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid),      intent(in),  optional :: elementdistgrid
<SPAN      type(ESMF_DistGrid),      intent(in),  optional :: nodalDistgrid
<SPAN      character(len=*),         intent(in),  optional :: name
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_MeshFreeMemory(mesh, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh), intent(inout)        :: mesh
<SPAN      integer,        intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_MeshGet(mesh, parametricDim, spatialDim, &amp;
<SPAN                     nodeCount, nodeIds, nodeCoords, nodeOwners, &amp;
<SPAN                     nodeMaskIsPresent, nodeMask,&amp;
<SPAN                     elementCount, elementIds, elementTypes, &amp;
<SPAN                     elementConnCount, elementConn, &amp;
<SPAN                     elementMaskIsPresent,elementMask, &amp;
<SPAN                     elementAreaIsPresent, elementArea, &amp;
<SPAN                     elementCoordsIsPresent, elementCoords, &amp;
<SPAN                     nodalDistgridIsPresent, nodalDistgrid, &amp;
<SPAN                     elementDistgridIsPresent, elementDistgrid, &amp;
<SPAN                     numOwnedNodes, ownedNodeCoords, &amp;
<SPAN                     numOwnedElements, ownedElemCoords, &amp;
<SPAN                     elemMaskArray, elemAreaArray, &amp;
<SPAN                     isMemFreed, coordSys, status, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh),          intent(in)            :: mesh
<SPAN      integer,                  intent(out), optional :: parametricDim
<SPAN      integer,                  intent(out), optional :: spatialDim
<SPAN      integer,                  intent(out), optional :: nodeCount
<SPAN      integer,                  intent(out), optional :: nodeIds(:)
<SPAN      real(ESMF_KIND_R8),       intent(out), optional :: nodeCoords(:)
<SPAN      integer,                  intent(out), optional :: nodeOwners(:)
<SPAN      logical,                  intent(out), optional :: nodeMaskIsPresent
<SPAN      integer,                  intent(out), optional :: nodeMask(:)
<SPAN      integer,                  intent(out), optional :: elementCount
<SPAN      integer,                  intent(out), optional :: elementIds(:)
<SPAN      integer,                  intent(out), optional :: elementTypes(:)
<SPAN      integer,                  intent(out), optional :: elementConnCount
<SPAN      integer,                  intent(out), optional :: elementConn(:)
<SPAN      logical,                  intent(out), optional :: elementMaskIsPresent
<SPAN      integer,                  intent(out), optional :: elementMask(:)
<SPAN      logical,                  intent(out), optional :: elementAreaIsPresent
<SPAN      real(ESMF_KIND_R8),       intent(out), optional :: elementArea(:)
<SPAN      logical,                  intent(out), optional :: elementCoordsIsPresent
<SPAN      real(ESMF_KIND_R8),       intent(out), optional :: elementCoords(:)
<SPAN      logical,                  intent(out), optional :: nodalDistgridIsPresent
<SPAN      type(ESMF_DistGrid),      intent(out), optional :: nodalDistgrid
<SPAN      logical,                  intent(out), optional :: elementDistgridIsPresent
<SPAN      type(ESMF_DistGrid),      intent(out), optional :: elementDistgrid
<SPAN      integer,                  intent(out), optional :: numOwnedNodes
<SPAN      real(ESMF_KIND_R8),       intent(out), optional :: ownedNodeCoords(:)
<SPAN      integer,                  intent(out), optional :: numOwnedElements
<SPAN      real(ESMF_KIND_R8),       intent(out), optional :: ownedElemCoords(:)
<SPAN      logical,                  intent(out), optional :: isMemFreed
<SPAN      type(ESMF_Array),         intent(inout), optional :: elemMaskArray
<SPAN      type(ESMF_Array),         intent(inout), optional :: elemAreaArray
<SPAN      type(ESMF_CoordSys_Flag), intent(out), optional :: coordSys
<SPAN      type(ESMF_MeshStatus_Flag),intent(out), optional :: status
<SPAN      character(len=*),         intent(out), optional :: name
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>    subroutine ESMF_MeshGetMOAB(moabOn, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     logical, intent(out)                      :: moabOn
<SPAN      integer, intent(out), optional            :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_MeshIsCreated(mesh, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_MeshIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh), intent(in)            :: mesh
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_MeshSet(mesh, &amp;
<SPAN             elementMask, elementArea, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Mesh),          intent(in)            :: mesh
<SPAN      integer,                  intent(in), optional :: elementMask(:)
<SPAN      real(ESMF_KIND_R8),       intent(in), optional :: elementArea(:)
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>    subroutine ESMF_MeshSetMOAB(moabOn, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     logical, intent(in)                        :: moabOn
<SPAN      integer, intent(out) , optional            :: rc
<SPAN </PRE>

<SPAN <PRE>     interface assignment(=)
<SPAN      xgrid1 = xgrid2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_XGrid) :: xgrid1
<SPAN      type(ESMF_XGrid) :: xgrid2
<SPAN </PRE>

<SPAN <PRE>     interface operator(==)
<SPAN      if (xgrid1 == xgrid2) then ... endif
<SPAN                OR
<SPAN      result = (xgrid1 == xgrid2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_XGrid), intent(in) :: xgrid1
<SPAN      type(ESMF_XGrid), intent(in) :: xgrid2
<SPAN </PRE>

<SPAN <PRE>     interface operator(/=)
<SPAN      if (xgrid1 /= xgrid2) then ... endif
<SPAN                OR
<SPAN      result = (xgrid1 /= xgrid2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_XGrid), intent(in) :: xgrid1
<SPAN      type(ESMF_XGrid), intent(in) :: xgrid2
<SPAN </PRE>

<SPAN <PRE> 
<SPAN  function ESMF_XGridCreate(&amp;
<SPAN      sideAGrid,              sideAMesh, &amp;
<SPAN      sideBGrid,              sideBMesh, &amp;
<SPAN      sideAGridPriority,      sideAMeshPriority, &amp;
<SPAN      sideBGridPriority,      sideBMeshPriority, &amp;
<SPAN      sideAMaskValues,        sideBMaskValues, &amp;
<SPAN      storeOverlay, &amp;
<SPAN      name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_XGrid)                           :: ESMF_XGridCreate
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_Grid),      intent(in), optional :: sideAGrid(:)
<SPAN    type(ESMF_Mesh),      intent(in), optional :: sideAMesh(:)
<SPAN    type(ESMF_Grid),      intent(in), optional :: sideBGrid(:)
<SPAN    type(ESMF_Mesh),      intent(in), optional :: sideBMesh(:)
<SPAN    integer,              intent(in), optional :: sideAGridPriority(:)
<SPAN    integer,              intent(in), optional :: sideAMeshPriority(:)
<SPAN    integer,              intent(in), optional :: sideBGridPriority(:)
<SPAN    integer,              intent(in), optional :: sideBMeshPriority(:)
<SPAN    integer(ESMF_KIND_I4),intent(in), optional :: sideAMaskValues(:)
<SPAN    integer(ESMF_KIND_I4),intent(in), optional :: sideBMaskValues(:)
<SPAN    logical,              intent(in), optional :: storeOverlay
<SPAN    character(len=*),     intent(in), optional :: name
<SPAN    integer,              intent(out),optional :: rc
<SPAN </PRE>

<SPAN <PRE> 
<SPAN  function ESMF_XGridCreateFromSparseMat(&amp;
<SPAN      sideAGrid,              sideAMesh, &amp;
<SPAN      sideBGrid,              sideBMesh, &amp;
<SPAN      sideAGridPriority,      sideAMeshPriority, &amp;
<SPAN      sideBGridPriority,      sideBMeshPriority, &amp;
<SPAN      sparseMatA2X, sparseMatX2A, sparseMatB2X, sparseMatX2B, &amp;
<SPAN      area, centroid, &amp;
<SPAN      name, &amp;
<SPAN      rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_XGrid) :: ESMF_XGridCreateFromSparseMat
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN  type(ESMF_Grid),      intent(in), optional :: sideAGrid(:)
<SPAN  type(ESMF_Mesh),      intent(in), optional :: sideAMesh(:)
<SPAN  type(ESMF_Grid),      intent(in), optional :: sideBGrid(:)
<SPAN  type(ESMF_Mesh),      intent(in), optional :: sideBMesh(:)
<SPAN  integer,              intent(in), optional :: sideAGridPriority(:)
<SPAN  integer,              intent(in), optional :: sideAMeshPriority(:)
<SPAN  integer,              intent(in), optional :: sideBGridPriority(:)
<SPAN  integer,              intent(in), optional :: sideBMeshPriority(:)
<SPAN  type(ESMF_XGridSpec), intent(in), optional :: sparseMatA2X(:)
<SPAN  type(ESMF_XGridSpec), intent(in), optional :: sparseMatX2A(:)
<SPAN  type(ESMF_XGridSpec), intent(in), optional :: sparseMatB2X(:)
<SPAN  type(ESMF_XGridSpec), intent(in), optional :: sparseMatX2B(:)
<SPAN  real(ESMF_KIND_R8),   intent(in), optional :: area(:)
<SPAN  real(ESMF_KIND_R8),   intent(in), optional :: centroid(:,:)
<SPAN  character (len=*),    intent(in), optional :: name
<SPAN  integer,              intent(out),optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_XGridIsCreated(xgrid, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_XGridIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_XGrid), intent(in)            :: xgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE> 
<SPAN    subroutine ESMF_XGridDestroy(xgrid, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_XGrid), intent(inout)          :: xgrid       
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,          intent(in),   optional :: noGarbage
<SPAN      integer,          intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_XGridGet()
<SPAN  
<SPAN  subroutine ESMF_XGridGetDefault(xgrid, &amp;
<SPAN      sideAGridCount, sideBGridCount, sideAMeshCount, sideBMeshCount, &amp;
<SPAN      coordSys, &amp;
<SPAN      dimCount, elementCount, &amp;
<SPAN      sideAGrid, sideBGrid, sideAMesh, sideBMesh, &amp;
<SPAN      mesh, &amp;
<SPAN      area, centroid, &amp;
<SPAN      distgridA, distgridB, distgridM, &amp;
<SPAN      sparseMatA2X, sparseMatX2A, sparseMatB2X, sparseMatX2B, &amp;
<SPAN      name, &amp;
<SPAN      rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> type(ESMF_XGrid),     intent(in)            :: xgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN  integer,              intent(out), optional :: sideAGridCount, sideBGridCount
<SPAN  integer,              intent(out), optional :: sideAMeshCount, sideBMeshCount
<SPAN  type(ESMF_CoordSys_Flag), intent(out), optional :: coordSys
<SPAN  integer,              intent(out), optional :: dimCount
<SPAN  integer,              intent(out), optional :: elementCount
<SPAN  type(ESMF_Grid),      intent(out), optional :: sideAGrid(:), sideBGrid(:)
<SPAN  type(ESMF_Mesh),      intent(out), optional :: sideAMesh(:), sideBMesh(:)
<SPAN  type(ESMF_Mesh),      intent(out), optional :: mesh
<SPAN  real(ESMF_KIND_R8),   intent(out), optional :: area(:)
<SPAN  real(ESMF_KIND_R8),   intent(out), optional :: centroid(:,:)
<SPAN  type(ESMF_DistGrid),  intent(out), optional :: distgridA(:)
<SPAN  type(ESMF_DistGrid),  intent(out), optional :: distgridB(:)
<SPAN  type(ESMF_DistGrid),  intent(out), optional :: distgridM
<SPAN  type(ESMF_XGridSpec), intent(out), optional :: sparseMatA2X(:)
<SPAN  type(ESMF_XGridSpec), intent(out), optional :: sparseMatX2A(:)
<SPAN  type(ESMF_XGridSpec), intent(out), optional :: sparseMatB2X(:)
<SPAN  type(ESMF_XGridSpec), intent(out), optional :: sparseMatX2B(:)
<SPAN  character (len=*),    intent(out), optional :: name
<SPAN  integer,              intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     interface assignment(=)
<SPAN      distgrid1 = distgrid2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: distgrid1
<SPAN      type(ESMF_DistGrid) :: distgrid2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN      if (distgrid1 == distgrid2) then ... endif
<SPAN                OR
<SPAN      result = (distgrid1 == distgrid2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid), intent(in) :: distgrid1
<SPAN      type(ESMF_DistGrid), intent(in) :: distgrid2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (distgrid1 /= distgrid2) then ... endif
<SPAN                OR
<SPAN      result = (distgrid1 /= distgrid2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid), intent(in) :: distgrid1
<SPAN      type(ESMF_DistGrid), intent(in) :: distgrid2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridCreate()
<SPAN    function ESMF_DistGridCreateDG(distgrid, &amp;
<SPAN      firstExtra, lastExtra, indexflag, connectionList, balanceflag, &amp;
<SPAN      delayout, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: ESMF_DistGridCreateDG
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid),           intent(in)            :: distgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, target,               intent(in),  optional :: firstExtra(:)
<SPAN      integer, target,               intent(in),  optional :: lastExtra(:)
<SPAN      type(ESMF_Index_Flag),         intent(in),  optional :: indexflag
<SPAN      type(ESMF_DistGridConnection), intent(in),  optional :: connectionList(:)
<SPAN      logical,                       intent(in),  optional :: balanceflag
<SPAN      type(ESMF_DELayout),           intent(in),  optional :: delayout
<SPAN      type(ESMF_VM),                 intent(in),  optional :: vm
<SPAN      integer,                       intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.3.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>vm</TT> to support object creation on a
<SPAN                  different VM than that of the current context.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>delayout</TT> to support changing the layout of
<SPAN                 DEs across PETs.
<SPAN <BR>
<SPAN Added argument <TT>balanceflag</TT> to support rebalancing of the
<SPAN                 incoming DistGrids decomposition.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridCreate()
<SPAN    function ESMF_DistGridCreateDGT(distgrid, firstExtraPTile, &amp;
<SPAN      lastExtraPTile, indexflag, connectionList, balanceflag, &amp;
<SPAN      delayout, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: ESMF_DistGridCreateDGT
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid),           intent(in)            :: distgrid
<SPAN      integer, target,               intent(in)            :: firstExtraPTile(:,:)
<SPAN      integer, target,               intent(in)            :: lastExtraPTile(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Index_Flag),         intent(in),  optional :: indexflag
<SPAN      type(ESMF_DistGridConnection), intent(in),  optional :: connectionList(:)
<SPAN      logical,                       intent(in),  optional :: balanceflag
<SPAN      type(ESMF_DELayout),           intent(in),  optional :: delayout
<SPAN      type(ESMF_VM),                 intent(in),  optional :: vm
<SPAN      integer,                       intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.3.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>vm</TT> to support object creation on a
<SPAN                  different VM than that of the current context.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>delayout</TT> to support changing the layout of
<SPAN                 DEs across PETs.
<SPAN <BR>
<SPAN Added argument <TT>balanceflag</TT> to support rebalancing of the
<SPAN                 incoming DistGrids decomposition.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridCreate()
<SPAN    function ESMF_DistGridCreateRD(minIndex, maxIndex, regDecomp, &amp;
<SPAN      decompflag, regDecompFirstExtra, regDecompLastExtra, deLabelList, &amp;
<SPAN      indexflag, connectionList, delayout, vm, indexTK, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: ESMF_DistGridCreateRD
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                        intent(in)            :: minIndex(:)
<SPAN      integer,                        intent(in)            :: maxIndex(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                target, intent(in),  optional :: regDecomp(:)
<SPAN      type(ESMF_Decomp_Flag), target, intent(in),  optional :: decompflag(:)
<SPAN      integer,                target, intent(in),  optional :: regDecompFirstExtra(:)
<SPAN      integer,                target, intent(in),  optional :: regDecompLastExtra(:)
<SPAN      integer,                target, intent(in),  optional :: deLabelList(:)
<SPAN      type(ESMF_Index_Flag),          intent(in),  optional :: indexflag
<SPAN      type(ESMF_DistGridConnection),  intent(in),  optional :: connectionList(:)
<SPAN      type(ESMF_DELayout),            intent(in),  optional :: delayout
<SPAN      type(ESMF_VM),                  intent(in),  optional :: vm
<SPAN      type(ESMF_TypeKind_Flag),       intent(in),  optional :: indexTK
<SPAN      integer,                        intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>indexTK</TT> to support explicit selection
<SPAN                 between 32-bit and 64-bit sequence indices.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridCreate()
<SPAN    function ESMF_DistGridCreateRDT(minIndexPTile, maxIndexPTile, &amp;
<SPAN      regDecompPTile, decompflagPTile, regDecompFirstExtraPTile,&amp;
<SPAN      regDecompLastExtraPTile, deLabelList, indexflag, connectionList, &amp;
<SPAN      delayout, vm, indexTK, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: ESMF_DistGridCreateRDT
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                        intent(in)            :: minIndexPTile(:,:)
<SPAN      integer,                        intent(in)            :: maxIndexPTile(:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                        intent(in),  optional :: regDecompPTile(:,:)
<SPAN      type(ESMF_Decomp_Flag), target, intent(in),  optional :: decompflagPTile(:,:)
<SPAN      integer,                target, intent(in),  optional :: regDecompFirstExtraPTile(:,:)
<SPAN      integer,                target, intent(in),  optional :: regDecompLastExtraPTile(:,:)
<SPAN      integer,                        intent(in),  optional :: deLabelList(:)
<SPAN      type(ESMF_Index_Flag),          intent(in),  optional :: indexflag
<SPAN      type(ESMF_DistGridConnection),  intent(in),  optional :: connectionList(:)
<SPAN      type(ESMF_DELayout),            intent(in),  optional :: delayout
<SPAN      type(ESMF_VM),                  intent(in),  optional :: vm
<SPAN      type(ESMF_TypeKind_Flag),       intent(in),  optional :: indexTK
<SPAN      integer,                        intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>indexTK</TT> to support explicit selection
<SPAN                 between 32-bit and 64-bit sequence indices.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridCreate()
<SPAN    function ESMF_DistGridCreateDB(minIndex, maxIndex, deBlockList, &amp;
<SPAN      deLabelList, indexflag, connectionList, delayout, vm, &amp;
<SPAN      indexTK, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: ESMF_DistGridCreateDB
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                       intent(in)            :: minIndex(:)
<SPAN      integer,                       intent(in)            :: maxIndex(:)
<SPAN      integer,                       intent(in)            :: deBlockList(:,:,:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                       intent(in),  optional :: deLabelList(:)
<SPAN      type(ESMF_Index_Flag),         intent(in),  optional :: indexflag
<SPAN      type(ESMF_DistGridConnection), intent(in),  optional :: connectionList(:)
<SPAN      type(ESMF_DELayout),           intent(in),  optional :: delayout
<SPAN      type(ESMF_VM),                 intent(in),  optional :: vm
<SPAN      type(ESMF_TypeKind_Flag),      intent(in),  optional :: indexTK
<SPAN      integer,                       intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.1.0r</STRONG></DT>
<SPAN <DD>Added argument <TT>indexTK</TT> to support selecting between
<SPAN                  32-bit and 64-bit sequence indices.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridCreate()
<SPAN    function ESMF_DistGridCreateDBT(minIndexPTile, maxIndexPTile, deBlockList, &amp;
<SPAN      deToTileMap, deLabelList, indexflag, connectionList, &amp;
<SPAN      delayout, vm, indexTK, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: ESMF_DistGridCreateDBT
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                       intent(in)            :: minIndexPTile(:,:)
<SPAN      integer,                       intent(in)            :: maxIndexPTile(:,:)
<SPAN      integer,                       intent(in)            :: deBlockList(:,:,:)
<SPAN      integer,                       intent(in)            :: deToTileMap(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                       intent(in),  optional :: deLabelList(:)
<SPAN      type(ESMF_Index_Flag),         intent(in),  optional :: indexflag
<SPAN      type(ESMF_DistGridConnection), intent(in),  optional :: connectionList(:)
<SPAN      type(ESMF_DELayout),           intent(in),  optional :: delayout
<SPAN      type(ESMF_VM),                 intent(in),  optional :: vm
<SPAN      type(ESMF_TypeKind_Flag),      intent(in),  optional :: indexTK
<SPAN      integer,                       intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridCreate()
<SPAN    function ESMF_DistGridCreateDBAI1D1DE(arbSeqIndexList, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: ESMF_DistGridCreateDBAI1D1DE
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer, intent(in)            :: arbSeqIndexList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridCreate()
<SPAN    function ESMF_DistGridCreateDBAI1D1DEI8(arbSeqIndexList, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: ESMF_DistGridCreateDBAI1D1DEI8
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer(ESMF_KIND_I8),  intent(in)            :: arbSeqIndexList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridCreate()
<SPAN    function ESMF_DistGridCreateDBAI1D(arbSeqIndexList, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: ESMF_DistGridCreateDBAI1D
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_PtrInt1D), intent(in) :: arbSeqIndexList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridCreate()
<SPAN    function ESMF_DistGridCreateDBAI(arbSeqIndexList, arbDim, &amp;
<SPAN      minIndexPTile, maxIndexPTile, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGrid) :: ESMF_DistGridCreateDBAI
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer, intent(in)            :: arbSeqIndexList(:)
<SPAN      integer, intent(in)            :: arbDim
<SPAN      integer, intent(in)            :: minIndexPTile(:)
<SPAN      integer, intent(in)            :: maxIndexPTile(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_DistGridDestroy(distgrid, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid), intent(inout)          :: distgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,             intent(in),   optional :: noGarbage
<SPAN      integer,             intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridGet()
<SPAN    subroutine ESMF_DistGridGetDefault(distgrid, delayout, &amp;
<SPAN      dimCount, tileCount, deCount, localDeCount, minIndexPTile, maxIndexPTile, &amp;
<SPAN      elementCountPTile, elementCountPTileI8, minIndexPDe, maxIndexPDe, &amp;
<SPAN      elementCountPDe, elementCountPDeI8, localDeToDeMap, deToTileMap, &amp;
<SPAN      indexCountPDe, collocation, regDecompFlag, indexTK, indexflag, &amp;
<SPAN      connectionCount, connectionList, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid),      intent(in)            :: distgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_DELayout),      intent(out), optional :: delayout
<SPAN      integer,                  intent(out), optional :: dimCount
<SPAN      integer,                  intent(out), optional :: tileCount
<SPAN      integer,                  intent(out), optional :: deCount
<SPAN      integer,                  intent(out), optional :: localDeCount
<SPAN      integer,          target, intent(out), optional :: minIndexPTile(:,:)
<SPAN      integer,          target, intent(out), optional :: maxIndexPTile(:,:)
<SPAN      integer,          target, intent(out), optional :: elementCountPTile(:)
<SPAN  integer(ESMF_KIND_I8),target, intent(out), optional :: elementCountPTileI8(:)
<SPAN      integer,          target, intent(out), optional :: minIndexPDe(:,:)
<SPAN      integer,          target, intent(out), optional :: maxIndexPDe(:,:)
<SPAN      integer,          target, intent(out), optional :: elementCountPDe(:)
<SPAN  integer(ESMF_KIND_I8),target, intent(out), optional :: elementCountPDeI8(:)
<SPAN      integer,          target, intent(out), optional :: localDeToDeMap(:)
<SPAN      integer,          target, intent(out), optional :: deToTileMap(:)
<SPAN      integer,          target, intent(out), optional :: indexCountPDe(:,:)
<SPAN      integer,          target, intent(out), optional :: collocation(:)
<SPAN      logical,                  intent(out), optional :: regDecompFlag
<SPAN      type(ESMF_TypeKind_Flag), intent(out), optional :: indexTK
<SPAN      type(ESMF_Index_Flag),    intent(out), optional :: indexflag
<SPAN      integer,                  intent(out), optional :: connectionCount
<SPAN      type(ESMF_DistGridConnection), &amp;
<SPAN                        target, intent(out), optional :: connectionList(:)
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>deCount</TT> to simplify access to this 
<SPAN                 variable. <BR>
<SPAN Added arguments <TT>connectionCount</TT> and <TT>connectionList</TT>
<SPAN                 to provide user access to the explicitly defined connections in
<SPAN                 a DistGrid.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added arguments <TT>localDeCount</TT> and <TT>localDeToDeMap</TT>
<SPAN                 to simplify access to these variables.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>indexTK</TT> to allow query of the sequence index
<SPAN                 typekind.
<SPAN <BR>
<SPAN Added arguments <TT>elementCountPTileI8</TT> and
<SPAN                 <TT>elementCountPDeI8</TT> to provide 64-bit access.
<SPAN <BR>
<SPAN Added argument <TT>indexflag</TT> to allow user to query this
<SPAN                 setting.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridGet()
<SPAN    subroutine ESMF_DistGridGetPLocalDe(distgrid, localDe, &amp;
<SPAN      de, tile, collocation, arbSeqIndexFlag, seqIndexList, seqIndexListI8, &amp;
<SPAN      elementCount, elementCountI8, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid),      intent(in)            :: distgrid
<SPAN      integer,                  intent(in)            :: localDe
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                  intent(out), optional :: de
<SPAN      integer,                  intent(out), optional :: tile
<SPAN      integer,                  intent(in),  optional :: collocation
<SPAN      logical,                  intent(out), optional :: arbSeqIndexFlag
<SPAN      integer,          target, intent(out), optional :: seqIndexList(:)
<SPAN  integer(ESMF_KIND_I8),target, intent(out), optional :: seqIndexListI8(:)
<SPAN      integer,                  intent(out), optional :: elementCount
<SPAN      integer,                  intent(out), optional :: elementCountI8
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added arguments <TT>de</TT> and <TT>tile</TT> to simplify usage.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added arguments <TT>seqIndexListI8</TT> and <TT>elementCountI8</TT>
<SPAN                 to provide 64-bit access.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridGet()
<SPAN    subroutine ESMF_DistGridGetPLocalDePDim(distgrid, localDe, dim, &amp;
<SPAN             indexList, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid),    intent(in)            :: distgrid
<SPAN      integer,                intent(in)            :: localDe
<SPAN      integer,                intent(in)            :: dim
<SPAN      integer,        target, intent(out)           :: indexList(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_DistGridIsCreated(distgrid, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_DistGridIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid), intent(in)            :: distgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_DistGridMatch(distgrid1, distgrid2, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DistGridMatch_Flag) :: ESMF_DistGridMatch
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid),  intent(in)            :: distgrid1
<SPAN      type(ESMF_DistGrid),  intent(in)            :: distgrid2
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_DistGridPrint(distgrid, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid),  intent(in)            :: distgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DistGridSet()
<SPAN    subroutine ESMF_DistGridSetPLocalDe(distgrid, localDe, collocation, &amp;
<SPAN      seqIndexList, seqIndexListI8, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid),      intent(inout)         :: distgrid
<SPAN      integer,                  intent(in)            :: localDe
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                  intent(in),  optional :: collocation
<SPAN      integer,          target, intent(in),  optional :: seqIndexList(:)
<SPAN  integer(ESMF_KIND_I8),target, intent(in),  optional :: seqIndexListI8(:)
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_DistGridValidate(distgrid, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGrid),  intent(in)            :: distgrid
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_DistGridConnectionGet(connection, &amp;
<SPAN      tileIndexA, tileIndexB, dimCount, positionVector, orientationVector, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGridConnection), intent(in)            :: connection
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                       intent(out), optional :: tileIndexA
<SPAN      integer,                       intent(out), optional :: tileIndexB
<SPAN      integer,                       intent(out), optional :: dimCount
<SPAN      integer,                       intent(out), optional :: positionVector(:)
<SPAN      integer,                       intent(out), optional :: orientationVector(:)
<SPAN      integer,                       intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_DistGridConnectionSet(connection, tileIndexA, tileIndexB, &amp;
<SPAN      positionVector, orientationVector, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DistGridConnection),intent(out)         :: connection
<SPAN      integer,                     intent(in)           :: tileIndexA
<SPAN      integer,                     intent(in)           :: tileIndexB
<SPAN      integer,                     intent(in)           :: positionVector(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                     intent(in), optional :: orientationVector(:)
<SPAN      integer,                     intent(out), optional:: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_DistGridRegDecompSetCubic(regDecomp, deCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,        target, intent(out)           :: regDecomp(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(in),  optional :: deCount
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_RouteHandleCreate()
<SPAN    function ESMF_RouteHandleCreateRH(routehandle, &amp;
<SPAN      originPetList, targetPetList, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle) :: ESMF_RouteHandleCreateRH
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(in)            :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(in),  optional :: originPetList(:)
<SPAN      integer,                intent(in),  optional :: targetPetList(:)
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_RouteHandleCreate()
<SPAN    function ESMF_RouteHandleCreateFile(fileName, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle) :: ESMF_RouteHandleCreateFile
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(*),           intent(in)            :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_RouteHandleDestroy(routehandle, &amp;
<SPAN      noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(inout)          :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                intent(in),   optional :: noGarbage
<SPAN      integer,                intent(out),  optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_RouteHandleGet()
<SPAN    subroutine ESMF_RouteHandleGetP(routehandle, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(in)            :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*),       intent(out), optional :: name
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_RouteHandleIsCreated(routehandle, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_RouteHandleIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(in)            :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_RouteHandlePrint(routehandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(in)            :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_RouteHandleSet()
<SPAN    subroutine ESMF_RouteHandleSetP(routehandle, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(inout)         :: routehandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len = *),     intent(in),  optional :: name
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_RouteHandleWrite(routehandle, fileName, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_RouteHandle), intent(inout)         :: routehandle
<SPAN      character(*),           intent(in)            :: fileName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     interface assignment(=)
<SPAN      info1 = info2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Info) :: info1
<SPAN      type(ESMF_Info) :: info2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE> interface operator(==)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_Info), intent(in) :: info1
<SPAN       type(ESMF_Info), intent(in) :: info2
<SPAN </PRE>

<SPAN <PRE> interface operator(/=)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_Info), intent(in) :: info1
<SPAN       type(ESMF_Info), intent(in) :: info2
<SPAN </PRE>

<SPAN <PRE> subroutine ESMF_InfoBroadcast(info, rootPet, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(inout) :: info
<SPAN    integer, intent(in) :: rootPet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_InfoCreate()
<SPAN  function ESMF_InfoCreateEmpty(rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   integer, intent(out), optional :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Info) :: ESMF_InfoCreateEmpty
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_InfoCreate()
<SPAN  function ESMF_InfoCreateByKey(info, key, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(in) :: info
<SPAN    character(len=*), intent(in) :: key
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Info) :: ESMF_InfoCreateByKey
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_InfoCreate()
<SPAN  function ESMF_InfoCreateFromInfo(info, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(in) :: info
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Info) :: ESMF_InfoCreateFromInfo
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_InfoCreate()
<SPAN  function ESMF_InfoCreateByParse(jsonString, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   character(len=*), intent(in) :: jsonString
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Info) :: ESMF_InfoCreateByParse
<SPAN </PRE>

<SPAN <PRE> subroutine ESMF_InfoDestroy(info, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(inout) :: info
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE> function ESMF_InfoDump(info, key, indent, rc) result(output)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(in) :: info
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    character(*), intent(in), optional :: key
<SPAN    integer, intent(in), optional :: indent
<SPAN    integer, intent(out), optional :: rc
<SPAN    RESULT:
<SPAN    character(:), allocatable :: output
<SPAN </PRE>

<SPAN <PRE>  subroutine ESMF_InfoGet(info, key, value, default, idx, attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>    type(ESMF_Info), intent(in) :: info
<SPAN     character(len=*), intent(in) :: key
<SPAN     &lt;value&gt;, see below for supported value
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN     &lt;default, optional&gt; see below for supported default value
<SPAN     integer, intent(in), optional :: idx
<SPAN     type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag
<SPAN     integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>  subroutine ESMF_InfoGetCharAlloc(info, key, value, default, idx, attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>    type(ESMF_Info), intent(in) :: info
<SPAN     character(len=*), intent(in) :: key
<SPAN     character(:), allocatable, intent(out) :: value
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN     character(len=*), intent(in), optional :: default
<SPAN     integer, intent(in), optional :: idx
<SPAN     type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag
<SPAN     integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>  subroutine ESMF_InfoGet(info, key, values, itemCount, attnestflag, scalarToArray, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>    type(ESMF_Info), intent(in) :: info
<SPAN     character(len=*), intent(in) :: key
<SPAN     &lt;values&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN     integer, intent(out), optional :: itemCount
<SPAN     type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag
<SPAN     logical, intent(in), optional :: scalarToArray
<SPAN     integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>  subroutine ESMF_InfoGetAlloc(info, key, values, itemCount, attnestflag, scalarToArray, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>    type(ESMF_Info), intent(in) :: info
<SPAN     character(len=*), intent(in) :: key
<SPAN     &lt;values&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN     integer, intent(out), optional :: itemCount
<SPAN     type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag
<SPAN     logical, intent(in), optional :: scalarToArray
<SPAN     integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_InfoGet()
<SPAN   subroutine ESMF_InfoInquire(info, size, key, jsonType, isArray, &amp;
<SPAN     isDirty, idx, typekind, ikey, isPresent, isStructured, isNull, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>    type(ESMF_Info), intent(in) :: info
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN     integer, intent(out), optional :: size
<SPAN     character(len=*), intent(in), optional :: key
<SPAN     character(len=*), intent(out), optional :: jsonType
<SPAN     logical, intent(out), optional :: isArray
<SPAN     logical, intent(out), optional :: isDirty
<SPAN     integer, intent(in), optional :: idx
<SPAN     type(ESMF_TypeKind_Flag), intent(out), optional :: typekind
<SPAN     character(len=*), intent(out), optional :: ikey
<SPAN     logical, intent(out), optional :: isPresent
<SPAN     logical, intent(out), optional :: isStructured
<SPAN     logical, intent(out), optional :: isNull
<SPAN     integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>  subroutine ESMF_InfoGetFromHost(host, info, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>    type(ESMF_*), intent(inout) :: host
<SPAN     type(ESMF_Info), intent(out) :: info
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN     integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE> function ESMF_InfoGetTK(info, key, attnestflag, rc) result(typekind)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(in) :: info
<SPAN    character(len=*), intent(in) :: key
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_TypeKind_Flag) :: typekind
<SPAN </PRE>

<SPAN <PRE> subroutine ESMF_InfoGetArrayMeta(info, key, isArray, size, attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(in) :: info
<SPAN    character(len=*), intent(in) :: key
<SPAN    logical, intent(out) :: isArray
<SPAN    integer(C_INT), intent(out) :: size
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE> function ESMF_InfoIsPresent(info, key, attnestflag, isPointer, rc) result(is_present)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(in) :: info
<SPAN    character(len=*), intent(in) :: key
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag
<SPAN    logical, intent(in), optional :: isPointer
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: is_present
<SPAN </PRE>

<SPAN <PRE> function ESMF_InfoIsSet(info, key, rc) result(is_set)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(in) :: info
<SPAN    character(len=*), intent(in) :: key
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: is_set
<SPAN </PRE>

<SPAN <PRE> subroutine ESMF_InfoPrint(info, indent, preString, unit, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(in) :: info
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    character(*), intent(in), optional :: preString
<SPAN    character(*), intent(out), optional :: unit
<SPAN    integer, intent(in), optional :: indent
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE> function ESMF_InfoReadJSON(filename, rc) result(info_r)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   character(len=*), intent(in) :: filename
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   type(ESMF_Info) :: info_r
<SPAN </PRE>

<SPAN <PRE> subroutine ESMF_InfoRemove(info, keyParent, keyChild, attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(inout) :: info
<SPAN    character(len=*), intent(in) :: keyParent
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    character(len=*), intent(in), optional :: keyChild
<SPAN    type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>  subroutine ESMF_InfoSet(info, key, value, force, idx, pkey, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>    type(ESMF_Info), intent(inout) :: info
<SPAN     character(len=*), intent(in) :: key
<SPAN     &lt;value&gt;, see below for supported value
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN     logical, intent(in), optional :: force
<SPAN     integer, intent(in), optional :: idx
<SPAN     character(len=*), intent(in), optional :: pkey
<SPAN     integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_InfoSet
<SPAN  subroutine ESMF_InfoSetINFO(info, key, value, force, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(inout) :: info
<SPAN    character(len=*), intent(in) :: key
<SPAN    type(ESMF_Info), intent(in) :: value
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    logical, intent(in), optional :: force
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>  subroutine ESMF_InfoSet(info, key, values, force, pkey, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>    type(ESMF_Info), intent(inout) :: info
<SPAN     character(len=*), intent(in) :: key
<SPAN     &lt;values&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN     logical, intent(in), optional :: force
<SPAN     character(len=*), intent(in), optional :: pkey
<SPAN     integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE> subroutine ESMF_InfoSetNULL(info, key, force, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(inout) :: info
<SPAN    character(len=*), intent(in) :: key
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    logical, intent(in), optional :: force
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>  subroutine ESMF_InfoSync(host, rootPet, vm, markClean, &amp;
<SPAN      rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>    type(ESMF_*), intent(inout) :: host
<SPAN     integer, intent(in) :: rootPet
<SPAN     type(ESMF_VM), intent(in) :: vm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN     logical, intent(in), optional :: markClean
<SPAN     integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE> subroutine ESMF_InfoUpdate(lhs, rhs, recursive, overwrite, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(inout) :: lhs
<SPAN    type(ESMF_Info), intent(in) :: rhs
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    logical, intent(in), optional :: recursive
<SPAN    logical, intent(in), optional :: overwrite
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE> subroutine ESMF_InfoWriteJSON(info, filename, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   type(ESMF_Info), intent(in) :: info
<SPAN    character(len=*), intent(in) :: filename
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       interface assignment(=)
<SPAN        calendar1 = calendar2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Calendar) :: calendar1
<SPAN        type(ESMF_Calendar) :: calendar2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(==)
<SPAN        if (&lt;calendar argument 1&gt; == &lt;calendar argument 2&gt;) then ... endif
<SPAN                                    OR
<SPAN        result = (&lt;calendar argument 1&gt; == &lt;calendar argument 2&gt;)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       &lt;calendar argument 1&gt;, see below for supported values
<SPAN        &lt;calendar argument 2&gt;, see below for supported values
<SPAN </PRE>

<SPAN <PRE>       interface operator(/=)
<SPAN        if (&lt;calendar argument 1&gt; /= &lt;calendar argument 2&gt;) then ... endif
<SPAN                                    OR
<SPAN        result = (&lt;calendar argument 1&gt; /= &lt;calendar argument 2&gt;)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       &lt;calendar argument 1&gt;, see below for supported values
<SPAN        &lt;calendar argument 2&gt;, see below for supported values
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_CalendarCreate()
<SPAN        function ESMF_CalendarCreateBuiltIn(calkindflag, &amp;
<SPAN          name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Calendar) :: ESMF_CalendarCreateBuiltIn
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_CalKind_Flag), intent(in)            :: calkindflag
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character (len=*),       intent(in),  optional :: name
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_CalendarCreate()
<SPAN        function ESMF_CalendarCreateCopy(calendar, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Calendar) :: ESMF_CalendarCreateCopy
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Calendar), intent(in)            :: calendar
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_CalendarCreate()
<SPAN        function ESMF_CalendarCreateCustom(&amp;
<SPAN          daysPerMonth, secondsPerDay, &amp;
<SPAN          daysPerYear, daysPerYearDn, daysPerYearDd, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Calendar) :: ESMF_CalendarCreateCustom
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,               intent(in),  optional :: daysPerMonth(:)
<SPAN        integer(ESMF_KIND_I4), intent(in),  optional :: secondsPerDay
<SPAN        integer(ESMF_KIND_I4), intent(in),  optional :: daysPerYear
<SPAN        integer(ESMF_KIND_I4), intent(in),  optional :: daysPerYearDn
<SPAN        integer(ESMF_KIND_I4), intent(in),  optional :: daysPerYearDd
<SPAN        character (len=*),     intent(in),  optional :: name
<SPAN        integer,               intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_CalendarDestroy(calendar, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Calendar), intent(inout)          :: calendar
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,             intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_CalendarGet(calendar, &amp;
<SPAN          name, calkindflag, daysPerMonth, monthsPerYear, &amp;
<SPAN          secondsPerDay, secondsPerYear, &amp;
<SPAN          daysPerYear, daysPerYearDn, daysPerYearDd, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Calendar),    intent(in)            :: calendar
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_CalKind_Flag),intent(out), optional :: calkindflag
<SPAN        integer,                intent(out), optional :: daysPerMonth(:)
<SPAN        integer,                intent(out), optional :: monthsPerYear
<SPAN        integer(ESMF_KIND_I4),  intent(out), optional :: secondsPerDay
<SPAN        integer(ESMF_KIND_I4),  intent(out), optional :: secondsPerYear
<SPAN        integer(ESMF_KIND_I4),  intent(out), optional :: daysPerYear
<SPAN        integer(ESMF_KIND_I4),  intent(out), optional :: daysPerYearDn
<SPAN        integer(ESMF_KIND_I4),  intent(out), optional :: daysPerYearDd
<SPAN        character (len=*),      intent(out), optional :: name
<SPAN        integer,                intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_CalendarIsCreated(calendar, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_CalendarIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Calendar), intent(in)            :: calendar
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_CalendarIsLeapYear()
<SPAN        function ESMF_CalendarIsLeapYear&lt;kind&gt;(calendar, yy, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_CalendarIsLeapYear&lt;kind&gt;
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Calendar),       intent(in)            :: calendar
<SPAN        integer(ESMF_KIND_&lt;kind&gt;), intent(in)            :: yy
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                   intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_CalendarPrint(calendar, options, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Calendar), intent(in)            :: calendar
<SPAN        character (len=*),   intent(in),  optional :: options
<SPAN        integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_CalendarSet()
<SPAN        subroutine ESMF_CalendarSetBuiltIn(calendar, calkindflag, &amp;
<SPAN          name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Calendar),     intent(inout)         :: calendar
<SPAN        type(ESMF_CalKind_Flag), intent(in)            :: calkindflag
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character (len=*),       intent(in),  optional :: name
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_CalendarSet()
<SPAN        subroutine ESMF_CalendarSetCustom(calendar, &amp;
<SPAN          daysPerMonth, secondsPerDay, &amp;
<SPAN          daysPerYear, daysPerYearDn, daysPerYearDd, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Calendar),  intent(inout)         :: calendar
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,              intent(in),  optional :: daysPerMonth(:)
<SPAN        integer(ESMF_KIND_I4),intent(in),  optional :: secondsPerDay
<SPAN        integer(ESMF_KIND_I4),intent(in),  optional :: daysPerYear
<SPAN        integer(ESMF_KIND_I4),intent(in),  optional :: daysPerYearDn
<SPAN        integer(ESMF_KIND_I4),intent(in),  optional :: daysPerYearDd
<SPAN        character (len=*),    intent(in),  optional :: name
<SPAN        integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_CalendarSetDefault()
<SPAN        subroutine ESMF_CalendarSetDefaultKind(calkindflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_CalKind_Flag), intent(in)            :: calkindflag
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_CalendarSetDefault()
<SPAN        subroutine ESMF_CalendarSetDefaultCal(calendar, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Calendar),     intent(in)            :: calendar
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_CalendarValidate(calendar, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Calendar), intent(in)            :: calendar
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface assignment(=)
<SPAN        time1 = time2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time) :: time1
<SPAN        type(ESMF_Time) :: time2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(+)
<SPAN        time2 = time1 + timeinterval
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Time) :: time2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time),         intent(in) :: time1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(-)
<SPAN        time2 = time1 - timeinterval
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Time) :: time2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time),         intent(in) :: time1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(-)
<SPAN        timeinterval = time1 - time2
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval) :: timeinterval
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time),         intent(in) :: time1
<SPAN        type(ESMF_Time),         intent(in) :: time2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(==)
<SPAN        if (time1 == time2) then ... endif
<SPAN                     OR
<SPAN        result = (time1 == time2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time), intent(in) :: time1
<SPAN        type(ESMF_Time), intent(in) :: time2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(/=)
<SPAN        if (time1 /= time2) then ... endif
<SPAN                     OR
<SPAN        result = (time1 /= time2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time), intent(in) :: time1
<SPAN        type(ESMF_Time), intent(in) :: time2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(&lt;)
<SPAN        if (time1 &lt; time2) then ... endif
<SPAN                     OR
<SPAN        result = (time1 &lt; time2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time), intent(in) :: time1
<SPAN        type(ESMF_Time), intent(in) :: time2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(&lt;=)
<SPAN        if (time1 &lt;= time2) then ... endif
<SPAN                     OR
<SPAN        result = (time1 &lt;= time2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time), intent(in) :: time1
<SPAN        type(ESMF_Time), intent(in) :: time2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(&gt;)
<SPAN        if (time1 &gt; time2) then ... endif
<SPAN                     OR
<SPAN        result = (time1 &gt; time2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time), intent(in) :: time1
<SPAN        type(ESMF_Time), intent(in) :: time2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(&gt;=)
<SPAN        if (time1 &gt;= time2) then ... endif
<SPAN                     OR
<SPAN        result = (time1 &gt;= time2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time), intent(in) :: time1
<SPAN        type(ESMF_Time), intent(in) :: time2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_TimeGet(time, &amp;
<SPAN          yy, yy_i8, &amp;
<SPAN          mm, dd, &amp;
<SPAN          d, d_i8, &amp;
<SPAN          h, m, &amp;
<SPAN          s, s_i8, &amp;
<SPAN          ms, us, ns, &amp;
<SPAN          d_r8, h_r8, m_r8, s_r8, &amp;
<SPAN          ms_r8, us_r8, ns_r8, &amp;
<SPAN          sN, sN_i8, sD, sD_i8, &amp;
<SPAN          calendar, calkindflag, timeZone, &amp;
<SPAN          timeString, timeStringISOFrac, &amp;
<SPAN          dayOfWeek, midMonth, &amp;
<SPAN          dayOfYear,  dayOfYear_r8, &amp;
<SPAN          dayOfYear_intvl, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time),         intent(in)            :: time
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: yy
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: yy_i8
<SPAN        integer,                 intent(out), optional :: mm
<SPAN        integer,                 intent(out), optional :: dd
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: d
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: d_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: h
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: m
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: s
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: s_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: ms
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: us
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: ns
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: d_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: h_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: m_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: s_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: ms_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: us_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: ns_r8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: sN
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: sN_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: sD
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: sD_i8
<SPAN        type(ESMF_Calendar),     intent(out), optional :: calendar
<SPAN        type(ESMF_CalKind_Flag), intent(out), optional :: calkindflag
<SPAN        integer,                 intent(out), optional :: timeZone ! not imp
<SPAN        character (len=*),       intent(out), optional :: timeString
<SPAN        character (len=*),       intent(out), optional :: timeStringISOFrac
<SPAN        integer,                 intent(out), optional :: dayOfWeek
<SPAN        type(ESMF_Time),         intent(out), optional :: midMonth
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: dayOfYear
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: dayOfYear_r8
<SPAN        type(ESMF_TimeInterval), intent(out), optional :: dayOfYear_intvl
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_TimeIsLeapYear(time, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_TimeIsLeapYear
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time), intent(in)            :: time
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,         intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_TimeIsSameCalendar(time1, time2, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_TimeIsSameCalendar
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time), intent(in)            :: time1
<SPAN        type(ESMF_Time), intent(in)            :: time2
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,         intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_TimePrint(time, options, preString, unit, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time),   intent(in)            :: time
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character (len=*), intent(in),  optional :: options
<SPAN        character(*),      intent(in),  optional :: preString
<SPAN        character(*),      intent(out), optional :: unit
<SPAN        integer,           intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_TimeSet()
<SPAN        subroutine ESMF_TimeSetDefault(time, &amp;
<SPAN          yy, yy_i8, &amp;
<SPAN          mm, dd, &amp;
<SPAN          d, d_i8, &amp;
<SPAN          h, m, &amp;
<SPAN          s, s_i8, &amp;
<SPAN          ms, us, ns, &amp;
<SPAN          d_r8, h_r8, m_r8, s_r8, &amp;
<SPAN          ms_r8, us_r8, ns_r8, &amp;
<SPAN          sN, sN_i8, sD, sD_i8, &amp;
<SPAN          calendar, calkindflag, &amp;
<SPAN          timeZone, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time),         intent(inout)         :: time
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: yy
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: yy_i8
<SPAN        integer,                 intent(in),  optional :: mm
<SPAN        integer,                 intent(in),  optional :: dd
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: d
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: d_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: h
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: m
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: s
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: s_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: ms
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: us
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: ns
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: d_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: h_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: m_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: s_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: ms_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: us_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: ns_r8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: sN
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: sN_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: sD
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: sD_i8
<SPAN        type(ESMF_Calendar),     intent(in),  optional :: calendar
<SPAN        type(ESMF_CalKind_Flag), intent(in),  optional :: calkindflag
<SPAN        integer,                 intent(in),  optional :: timeZone ! not imp
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_TimeSet()
<SPAN        subroutine ESMF_TimeSetString(time, timeString, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time),         intent(inout)         :: time
<SPAN        character(*),            intent(in)            :: timeString
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_TimeSyncToRealTime(time, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time), intent(inout) :: time
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_TimeValidate(time, options, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Time),   intent(in)            :: time
<SPAN        character (len=*), intent(in),  optional :: options
<SPAN        integer,           intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       interface assignment(=)
<SPAN        timeinterval1 = timeinterval2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval) :: timeinterval1
<SPAN        type(ESMF_TimeInterval) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(+)
<SPAN        sum = timeinterval1 + timeinterval2
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval) :: sum
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(-)
<SPAN        difference = timeinterval1 - timeinterval2
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval) :: difference
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(-)
<SPAN        timeinterval = -timeinterval
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval) :: -timeInterval
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(/)
<SPAN        quotient = timeinterval1 / timeinterval2
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       real(ESMF_KIND_R8) :: quotient
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(/)
<SPAN        quotient = timeinterval / divisor
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval) :: quotient
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval
<SPAN        integer(ESMF_KIND_I4),   intent(in) :: divisor
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface MOD
<SPAN        function MOD(timeinterval1, timeinterval2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval) :: MOD
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(*)
<SPAN        product = timeinterval * multiplier
<SPAN                      OR
<SPAN        product = multiplier * timeinterval
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval) :: product
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval
<SPAN        integer(ESMF_KIND_I4),   intent(in) :: multiplier
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(==)
<SPAN        if (timeinterval1 == timeinterval2) then ... endif
<SPAN                     OR
<SPAN        result = (timeinterval1 == timeinterval2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(/=)
<SPAN        if (timeinterval1 /= timeinterval2) then ... endif
<SPAN                     OR
<SPAN        result = (timeinterval1 /= timeinterval2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(&lt;)
<SPAN        if (timeinterval1 &lt; timeinterval2) then ... endif
<SPAN                     OR
<SPAN        result = (timeinterval1 &lt; timeinterval2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(&lt;=)
<SPAN        if (timeinterval1 &lt;= timeinterval2) then ... endif
<SPAN                     OR
<SPAN        result = (timeinterval1 &lt;= timeinterval2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(&gt;)
<SPAN        if (timeinterval1 &gt; timeinterval2) then ... endif
<SPAN                     OR
<SPAN        result = (timeinterval1 &gt; timeinterval2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(&gt;=)
<SPAN        if (timeinterval1 &gt;= timeinterval2) then ... endif
<SPAN                     OR
<SPAN        result = (timeinterval1 &gt;= timeinterval2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval1
<SPAN        type(ESMF_TimeInterval), intent(in) :: timeinterval2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_TimeIntervalAbsValue(timeinterval)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval) :: ESMF_TimeIntervalAbsValue
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_TimeIntervalGet()
<SPAN        subroutine ESMF_TimeIntervalGetDur(timeinterval, &amp;
<SPAN          yy, yy_i8, &amp;
<SPAN          mm, mm_i8, &amp;
<SPAN          d, d_i8, &amp;
<SPAN          h, m, &amp;
<SPAN          s, s_i8, &amp;
<SPAN          ms, us, ns, &amp;
<SPAN          d_r8, h_r8, m_r8, s_r8, &amp;
<SPAN          ms_r8, us_r8, ns_r8, &amp;
<SPAN          sN, sN_i8, sD, sD_i8, &amp;
<SPAN          startTime, calendar, calkindflag, &amp;
<SPAN          timeString, timeStringISOFrac, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in)            :: timeinterval
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: yy
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: yy_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: mm
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: mm_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: d
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: d_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: h
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: m
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: s
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: s_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: ms
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: us
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: ns
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: d_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: h_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: m_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: s_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: ms_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: us_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: ns_r8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: sN
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: sN_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: sD
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: sD_i8
<SPAN        type(ESMF_Time),         intent(out), optional :: startTime
<SPAN        type(ESMF_Calendar),     intent(out), optional :: calendar
<SPAN        type(ESMF_CalKind_Flag), intent(out), optional :: calkindflag
<SPAN        character (len=*),       intent(out), optional :: timeString
<SPAN        character (len=*),       intent(out), optional :: timeStringISOFrac
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_TimeIntervalGet()
<SPAN        subroutine ESMF_TimeIntervalGetDurStart(timeinterval, startTimeIn, &amp;
<SPAN          &amp;
<SPAN          yy, yy_i8, &amp;
<SPAN          mm, mm_i8, &amp;
<SPAN          d, d_i8, &amp;
<SPAN          h, m, &amp;
<SPAN          s, s_i8, &amp;
<SPAN          ms, us, ns, &amp;
<SPAN          d_r8, h_r8, m_r8, s_r8, &amp;
<SPAN          ms_r8, us_r8, ns_r8, &amp;
<SPAN          sN, sN_i8, sD, sD_i8, &amp;
<SPAN          startTime, &amp;
<SPAN          calendar, calkindflag, &amp;
<SPAN          timeString, timeStringISOFrac, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in)            :: timeinterval
<SPAN        type(ESMF_Time),         intent(in)            :: startTimeIn ! Input
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: yy
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: yy_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: mm
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: mm_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: d
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: d_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: h
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: m
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: s
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: s_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: ms
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: us
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: ns
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: d_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: h_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: m_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: s_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: ms_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: us_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: ns_r8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: sN
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: sN_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: sD
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: sD_i8
<SPAN        type(ESMF_Time),         intent(out), optional :: startTime
<SPAN        type(ESMF_Calendar),     intent(out), optional :: calendar
<SPAN        type(ESMF_CalKind_Flag), intent(out), optional :: calkindflag
<SPAN        character (len=*),       intent(out), optional :: timeString
<SPAN        character (len=*),       intent(out), optional :: timeStringISOFrac
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_TimeIntervalGet()
<SPAN        subroutine ESMF_TimeIntervalGetDurCal(timeinterval, calendarIn, &amp;
<SPAN          &amp;
<SPAN          yy, yy_i8, &amp;
<SPAN          mm, mm_i8, &amp;
<SPAN          d, d_i8, &amp;
<SPAN          h, m, &amp;
<SPAN          s, s_i8, &amp;
<SPAN          ms, us, ns, &amp;
<SPAN          d_r8, h_r8, m_r8, s_r8, &amp;
<SPAN          ms_r8, us_r8, ns_r8, &amp;
<SPAN          sN, sN_i8, sD, sD_i8, &amp;
<SPAN          startTime, &amp;
<SPAN          calendar, calkindflag, &amp;
<SPAN          timeString, timeStringISOFrac, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in)            :: timeinterval
<SPAN        type(ESMF_Calendar),     intent(in)            :: calendarIn ! Input
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: yy
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: yy_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: mm
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: mm_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: d
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: d_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: h
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: m
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: s
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: s_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: ms
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: us
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: ns
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: d_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: h_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: m_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: s_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: ms_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: us_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: ns_r8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: sN
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: sN_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: sD
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: sD_i8
<SPAN        type(ESMF_Time),         intent(out), optional :: startTime
<SPAN        type(ESMF_Calendar),     intent(out), optional :: calendar
<SPAN        type(ESMF_CalKind_Flag), intent(out), optional :: calkindflag
<SPAN        character (len=*),       intent(out), optional :: timeString
<SPAN        character (len=*),       intent(out), optional :: timeStringISOFrac
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_TimeIntervalGet()
<SPAN        subroutine ESMF_TimeIntervalGetDurCalTyp(timeinterval, calkindflagIn, &amp;
<SPAN          &amp;
<SPAN          yy, yy_i8, &amp;
<SPAN          mm, mm_i8, &amp;
<SPAN          d, d_i8, &amp;
<SPAN          h, m, &amp;
<SPAN          s, s_i8, &amp;
<SPAN          ms, us, ns, &amp;
<SPAN          d_r8, h_r8, m_r8, s_r8, &amp;
<SPAN          ms_r8, us_r8, ns_r8, &amp;
<SPAN          sN, sN_i8, sD, sD_i8, &amp;
<SPAN          startTime, &amp;
<SPAN          calendar, calkindflag, &amp;
<SPAN          timeString, &amp;
<SPAN          timeStringISOFrac, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in)            :: timeinterval
<SPAN        type(ESMF_CalKind_Flag), intent(in)            :: calkindflagIn ! Input
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: yy
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: yy_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: mm
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: mm_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: d
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: d_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: h
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: m
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: s
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: s_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: ms
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: us
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: ns
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: d_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: h_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: m_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: s_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: ms_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: us_r8
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: ns_r8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: sN
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: sN_i8
<SPAN        integer(ESMF_KIND_I4),   intent(out), optional :: sD
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: sD_i8
<SPAN        type(ESMF_Time),         intent(out), optional :: startTime
<SPAN        type(ESMF_Calendar),     intent(out), optional :: calendar
<SPAN        type(ESMF_CalKind_Flag), intent(out), optional :: calkindflag
<SPAN        character (len=*),       intent(out), optional :: timeString
<SPAN        character (len=*),       intent(out), optional :: timeStringISOFrac
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_TimeIntervalNegAbsValue(timeinterval)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval) :: ESMF_TimeIntervalNegAbsValue
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in) :: timeinterval
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_TimeIntervalPrint(timeinterval, options, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in)            :: timeinterval
<SPAN        character (len=*),       intent(in),  optional :: options
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_TimeIntervalSet()
<SPAN        subroutine ESMF_TimeIntervalSetDur(timeinterval, &amp;
<SPAN          yy, yy_i8, &amp;
<SPAN          mm, mm_i8, &amp;
<SPAN          d, d_i8, &amp;
<SPAN          h, m, &amp;
<SPAN          s, s_i8, &amp;
<SPAN          ms, us, ns, &amp;
<SPAN          d_r8, h_r8, m_r8, s_r8, &amp;
<SPAN          ms_r8, us_r8, ns_r8, &amp;
<SPAN          sN, sN_i8, sD, sD_i8, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(inout)         :: timeinterval
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: yy
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: yy_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: mm
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: mm_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: d
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: d_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: h
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: m
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: s
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: s_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: ms
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: us
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: ns
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: d_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: h_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: m_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: s_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: ms_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: us_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: ns_r8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: sN
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: sN_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: sD
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: sD_i8
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_TimeIntervalSet()
<SPAN        subroutine ESMF_TimeIntervalSetDurStart(timeinterval, startTime, &amp;
<SPAN          &amp;
<SPAN          yy, yy_i8, &amp;
<SPAN          mm, mm_i8, &amp;
<SPAN          d, d_i8, &amp;
<SPAN          h, m, &amp;
<SPAN          s, s_i8, &amp;
<SPAN          ms, us, ns, &amp;
<SPAN          d_r8, h_r8, m_r8, s_r8, &amp;
<SPAN          ms_r8, us_r8, ns_r8, &amp;
<SPAN          sN, sN_i8, sD, sD_i8, &amp;
<SPAN          rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(inout)         :: timeinterval
<SPAN        type(ESMF_Time),         intent(in)            :: startTime
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: yy
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: yy_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: mm
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: mm_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: d
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: d_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: h
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: m
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: s
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: s_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: ms
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: us
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: ns
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: d_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: h_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: m_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: s_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: ms_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: us_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: ns_r8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: sN
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: sN_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: sD
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: sD_i8
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_TimeIntervalSet()
<SPAN        subroutine ESMF_TimeIntervalSetDurCal(timeinterval, calendar, &amp;
<SPAN          &amp;
<SPAN          yy, yy_i8, &amp;
<SPAN          mm, mm_i8, &amp;
<SPAN          d, d_i8, &amp;
<SPAN          h, m, &amp;
<SPAN          s, s_i8, &amp;
<SPAN          ms, us, ns, &amp;
<SPAN          d_r8, h_r8, m_r8, s_r8, &amp;
<SPAN          ms_r8, us_r8, ns_r8, &amp;
<SPAN          sN, sN_i8, sD, sD_i8, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(inout)         :: timeinterval
<SPAN        type(ESMF_Calendar),     intent(in)            :: calendar
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: yy
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: yy_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: mm
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: mm_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: d
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: d_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: h
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: m
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: s
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: s_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: ms
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: us
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: ns
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: d_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: h_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: m_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: s_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: ms_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: us_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: ns_r8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: sN
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: sN_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: sD
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: sD_i8
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_TimeIntervalSet()
<SPAN        subroutine ESMF_TimeIntervalSetDurCalTyp(timeinterval, calkindflag, &amp;
<SPAN          &amp;
<SPAN          yy, yy_i8, &amp;
<SPAN          mm, mm_i8, &amp;
<SPAN          d, d_i8, &amp;
<SPAN          h, m, &amp;
<SPAN          s, s_i8, &amp;
<SPAN          ms, us, ns, &amp;
<SPAN          d_r8, h_r8, m_r8, s_r8, &amp;
<SPAN          ms_r8, us_r8, ns_r8, &amp;
<SPAN          sN, sN_i8, sD, sD_i8, &amp;
<SPAN          rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(inout)         :: timeinterval
<SPAN        type(ESMF_CalKind_Flag), intent(in)            :: calkindflag
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: yy
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: yy_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: mm
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: mm_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: d
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: d_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: h
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: m
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: s
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: s_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: ms
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: us
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: ns
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: d_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: h_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: m_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: s_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: ms_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: us_r8
<SPAN        real(ESMF_KIND_R8),      intent(in),  optional :: ns_r8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: sN
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: sN_i8
<SPAN        integer(ESMF_KIND_I4),   intent(in),  optional :: sD
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: sD_i8
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_TimeIntervalValidate(timeinterval, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in)            :: timeinterval
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface assignment(=)
<SPAN        clock1 = clock2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock) :: clock1
<SPAN        type(ESMF_Clock) :: clock2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(==)
<SPAN        if (clock1 == clock2) then ... endif
<SPAN                     OR
<SPAN        result = (clock1 == clock2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(in) :: clock1
<SPAN        type(ESMF_Clock), intent(in) :: clock2
<SPAN </PRE>

<SPAN <PRE>       interface operator(/=)
<SPAN        if (clock1 /= clock2) then ... endif
<SPAN                     OR
<SPAN        result = (clock1 /= clock2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(in) :: clock1
<SPAN        type(ESMF_Clock), intent(in) :: clock2
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_ClockAdvance(clock, &amp;
<SPAN          timeStep, ringingAlarmList, ringingAlarmCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock),        intent(inout)         :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: timeStep
<SPAN        type(ESMF_Alarm),        intent(out), optional :: ringingAlarmList(:)
<SPAN        integer,                 intent(out), optional :: ringingAlarmCount
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_ClockCreate()
<SPAN        function ESMF_ClockCreateNew(timeStep, startTime, &amp;
<SPAN          stopTime, runDuration, runTimeStepCount, refTime, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Clock) :: ESMF_ClockCreateNew
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_TimeInterval), intent(in)            :: timeStep
<SPAN        type(ESMF_Time),         intent(in)            :: startTime
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_Time),         intent(in),  optional :: stopTime
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: runDuration
<SPAN        integer,                 intent(in),  optional :: runTimeStepCount
<SPAN        type(ESMF_Time),         intent(in),  optional :: refTime
<SPAN        character (len=*),       intent(in),  optional :: name
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_ClockCreate()
<SPAN        function ESMF_ClockCreateCopy(clock, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Clock) :: ESMF_ClockCreateCopy
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(in)            :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ClockDestroy(clock, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(inout)          :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ClockGet(clock, &amp;
<SPAN          timeStep, startTime, stopTime, &amp;
<SPAN          runDuration, runTimeStepCount, refTime, currTime, prevTime, &amp;
<SPAN          currSimTime, prevSimTime, calendar, calkindflag, timeZone, &amp;
<SPAN          advanceCount, alarmCount, direction, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock),        intent(in)            :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_TimeInterval), intent(out), optional :: timeStep
<SPAN        type(ESMF_Time),         intent(out), optional :: startTime
<SPAN        type(ESMF_Time),         intent(out), optional :: stopTime
<SPAN        type(ESMF_TimeInterval), intent(out), optional :: runDuration
<SPAN        real(ESMF_KIND_R8),      intent(out), optional :: runTimeStepCount
<SPAN        type(ESMF_Time),         intent(out), optional :: refTime
<SPAN        type(ESMF_Time),         intent(out), optional :: currTime
<SPAN        type(ESMF_Time),         intent(out), optional :: prevTime
<SPAN        type(ESMF_TimeInterval), intent(out), optional :: currSimTime
<SPAN        type(ESMF_TimeInterval), intent(out), optional :: prevSimTime
<SPAN        type(ESMF_Calendar),     intent(out), optional :: calendar
<SPAN        type(ESMF_CalKind_Flag), intent(out), optional :: calkindflag
<SPAN        integer,                 intent(out), optional :: timeZone
<SPAN        integer(ESMF_KIND_I8),   intent(out), optional :: advanceCount
<SPAN        integer,                 intent(out), optional :: alarmCount
<SPAN        type(ESMF_Direction_Flag),    intent(out), optional :: direction
<SPAN        character (len=*),       intent(out), optional :: name
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ClockGetAlarm(clock, alarmname, alarm, &amp;
<SPAN          rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock),  intent(in)            :: clock
<SPAN        character (len=*), intent(in)            :: alarmname
<SPAN        type(ESMF_Alarm),  intent(out)           :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,           intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ClockGetAlarmList(clock, alarmlistflag, &amp;
<SPAN          timeStep, alarmList, alarmCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock),          intent(in)            :: clock
<SPAN        type(ESMF_AlarmList_Flag), intent(in)            :: alarmlistflag
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_TimeInterval),   intent(in),  optional :: timeStep
<SPAN        type(ESMF_Alarm),          intent(out), optional :: alarmList(:)
<SPAN        integer,                   intent(out), optional :: alarmCount
<SPAN        integer,                   intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ClockGetNextTime(clock, nextTime, &amp;
<SPAN          timeStep, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock),        intent(in)            :: clock
<SPAN        type(ESMF_Time),         intent(out)           :: nextTime
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: timeStep
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_ClockIsCreated(clock, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_ClockIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Clock), intent(in)            :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       function ESMF_ClockIsDone(clock, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_ClockIsDone
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(in)            :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_ClockIsReverse(clock, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_ClockIsReverse
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(in)            :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_ClockIsStopTime(clock, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_ClockIsStopTime
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(in)            :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_ClockIsStopTimeEnabled(clock, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_ClockIsStopTimeEnabled
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(in)            :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ClockPrint(clock, options, preString, unit, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock),  intent(in)            :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character (len=*), intent(in),  optional :: options
<SPAN        character(*),      intent(in),  optional :: preString
<SPAN        character(*),      intent(out), optional :: unit
<SPAN        integer,           intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_ClockSet(clock, &amp;
<SPAN          timeStep, startTime, stopTime, &amp;
<SPAN          runDuration, runTimeStepCount, refTime, currTime, advanceCount, &amp;
<SPAN          direction, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock),        intent(inout)         :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: timeStep
<SPAN        type(ESMF_Time),         intent(in),  optional :: startTime
<SPAN        type(ESMF_Time),         intent(in),  optional :: stopTime
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: runDuration
<SPAN        integer,                 intent(in),  optional :: runTimeStepCount
<SPAN        type(ESMF_Time),         intent(in),  optional :: refTime
<SPAN        type(ESMF_Time),         intent(in),  optional :: currTime
<SPAN        integer(ESMF_KIND_I8),   intent(in),  optional :: advanceCount
<SPAN        type(ESMF_Direction_Flag),    intent(in),  optional :: direction
<SPAN        character (len=*),       intent(in),  optional :: name
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ClockStopTimeDisable(clock, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(inout)         :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ClockStopTimeEnable(clock, stopTime, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(inout)         :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_Time),  intent(in),  optional :: stopTime
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ClockSyncToRealTime(clock, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock), intent(inout)         :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ClockValidate(clock, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock),  intent(in)            :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,           intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface assignment(=)
<SPAN        alarm1 = alarm2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm) :: alarm1
<SPAN        type(ESMF_Alarm) :: alarm2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       interface operator(==)
<SPAN        if (alarm1 == alarm2) then ... endif
<SPAN                     OR
<SPAN        result = (alarm1 == alarm2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(in) :: alarm1
<SPAN        type(ESMF_Alarm), intent(in) :: alarm2
<SPAN </PRE>

<SPAN <PRE>       interface operator(/=)
<SPAN        if (alarm1 /= alarm2) then ... endif
<SPAN                     OR
<SPAN        result = (alarm1 /= alarm2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(in) :: alarm1
<SPAN        type(ESMF_Alarm), intent(in) :: alarm2
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_AlarmCreate()
<SPAN        function ESMF_AlarmCreateNew(clock, &amp;
<SPAN          ringTime, ringInterval, stopTime, ringDuration, ringTimeStepCount, &amp;
<SPAN          refTime, enabled, sticky, name, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Alarm) :: ESMF_AlarmCreateNew
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Clock),        intent(in)            :: clock
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_Time),         intent(in),  optional :: ringTime
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: ringInterval
<SPAN        type(ESMF_Time),         intent(in),  optional :: stopTime
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: ringDuration
<SPAN        integer,                 intent(in),  optional :: ringTimeStepCount
<SPAN        type(ESMF_Time),         intent(in),  optional :: refTime
<SPAN        logical,                 intent(in),  optional :: enabled
<SPAN        logical,                 intent(in),  optional :: sticky
<SPAN        character (len=*),       intent(in),  optional :: name
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_AlarmCreate()
<SPAN        function ESMF_AlarmCreateCopy(alarm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       type(ESMF_Alarm) :: ESMF_AlarmCreateCopy
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(in)            :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AlarmDestroy(alarm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(inout)          :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AlarmDisable(alarm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(inout)         :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AlarmEnable(alarm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(inout)         :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AlarmGet(alarm, &amp;
<SPAN          clock, ringTime, prevRingTime, ringInterval, stopTime, ringDuration, &amp;
<SPAN          ringTimeStepCount, timeStepRingingCount, ringBegin, ringEnd, &amp;
<SPAN          refTime, ringing, ringingOnPrevTimeStep, enabled, sticky, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm),        intent(in)            :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_Clock),        intent(out), optional :: clock
<SPAN        type(ESMF_Time),         intent(out), optional :: ringTime
<SPAN        type(ESMF_Time),         intent(out), optional :: prevRingTime
<SPAN        type(ESMF_TimeInterval), intent(out), optional :: ringInterval
<SPAN        type(ESMF_Time),         intent(out), optional :: stopTime
<SPAN        type(ESMF_TimeInterval), intent(out), optional :: ringDuration
<SPAN        integer,                 intent(out), optional :: ringTimeStepCount
<SPAN        integer,                 intent(out), optional :: timeStepRingingCount
<SPAN        type(ESMF_Time),         intent(out), optional :: ringBegin
<SPAN        type(ESMF_Time),         intent(out), optional :: ringEnd
<SPAN        type(ESMF_Time),         intent(out), optional :: refTime
<SPAN        logical,                 intent(out), optional :: ringing
<SPAN        logical,                 intent(out), optional :: ringingOnPrevTimeStep
<SPAN        logical,                 intent(out), optional :: enabled
<SPAN        logical,                 intent(out), optional :: sticky
<SPAN        character (len=*),       intent(out), optional :: name
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_AlarmIsCreated(alarm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_AlarmIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Alarm), intent(in)            :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       function ESMF_AlarmIsEnabled(alarm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_AlarmIsEnabled
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(in)            :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_AlarmIsRinging(alarm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_AlarmIsRinging
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(in)            :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_AlarmIsSticky(alarm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_AlarmIsSticky
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(in)            :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AlarmNotSticky(alarm, &amp;
<SPAN          ringDuration, ringTimeStepCount, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm),        intent(inout)         :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: ringDuration
<SPAN        integer,                 intent(in),  optional :: ringTimeStepCount
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AlarmPrint(alarm, options, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm),  intent(in)            :: alarm
<SPAN        character (len=*), intent(in),  optional :: options
<SPAN        integer,           intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_AlarmRingerOff(alarm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(inout)         :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AlarmRingerOn(alarm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(inout)         :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AlarmSet(alarm, &amp;
<SPAN          clock, ringTime, ringInterval, stopTime, ringDuration, &amp;
<SPAN          ringTimeStepCount, refTime, ringing, enabled, sticky, name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm),        intent(inout)         :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_Clock),        intent(in),  optional :: clock
<SPAN        type(ESMF_Time),         intent(in),  optional :: ringTime
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: ringInterval
<SPAN        type(ESMF_Time),         intent(in),  optional :: stopTime
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: ringDuration
<SPAN        integer,                 intent(in),  optional :: ringTimeStepCount
<SPAN        type(ESMF_Time),         intent(in),  optional :: refTime
<SPAN        logical,                 intent(in),  optional :: ringing
<SPAN        logical,                 intent(in),  optional :: enabled
<SPAN        logical,                 intent(in),  optional :: sticky
<SPAN        character (len=*),       intent(in),  optional :: name
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AlarmSticky(alarm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(inout)         :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AlarmValidate(alarm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm),  intent(in)            :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,           intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_AlarmWasPrevRinging(alarm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_AlarmWasPrevRinging
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm), intent(in)            :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_AlarmWillRingNext(alarm, timeStep, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: ESMF_AlarmWillRingNext
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Alarm),        intent(in)            :: alarm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_TimeInterval), intent(in),  optional :: timeStep
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     interface assignment(=)
<SPAN      config1 = config2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Config) :: config1
<SPAN      type(ESMF_Config) :: config2
<SPAN </PRE>

<SPAN <PRE>       interface operator(==)
<SPAN        if (config1 == config2) then ... endif
<SPAN                     OR
<SPAN        result = (config1 == config2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       configical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(in) :: config1
<SPAN        type(ESMF_Config), intent(in) :: config2
<SPAN </PRE>

<SPAN <PRE>       interface operator(/=)
<SPAN        if (config1 /= config2) then ... endif
<SPAN                     OR
<SPAN        result = (config1 /= config2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       configical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(in) :: config1
<SPAN        type(ESMF_Config), intent(in) :: config2
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_ConfigCreate()
<SPAN        type(ESMF_Config) function ESMF_ConfigCreateEmpty(rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       integer,intent(out), optional              :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     ! Private name; call using ESMF_ConfigCreate()
<SPAN      type(ESMF_Config) function ESMF_ConfigCreateFromSection(config, &amp;
<SPAN        openlabel, closelabel, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config)             :: config
<SPAN        character(len=*),  intent(in) :: openlabel, closelabel
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     subroutine ESMF_ConfigDestroy(config, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(inout)          :: config
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,           intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ConfigFindLabel(config, label, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(inout)           :: config 
<SPAN        character(len=*),  intent(in)              :: label
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,           intent(out),  optional  :: isPresent
<SPAN        integer,           intent(out),  optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>6.1.0</STRONG></DT>
<SPAN <DD>Added the <TT>isPresent</TT> argument.  Allows detection of
<SPAN     end-of-line condition to be separate from the <TT>rc</TT>.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ConfigFindNextLabel(config, label, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(inout)           :: config
<SPAN        character(len=*),  intent(in)              :: label
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,           intent(out),  optional  :: isPresent
<SPAN        integer,           intent(out),  optional  :: rc
<SPAN </PRE>

<SPAN <PRE>        subroutine ESMF_ConfigGetAttribute(config, &lt;value&gt;, &amp;
<SPAN           label, default, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_Config), intent(inout)         :: config     
<SPAN         &lt;value argument&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         character(len=*),  intent(in),  optional :: label 
<SPAN         character(len=*),  intent(in),  optional :: default 
<SPAN         integer,           intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>        subroutine ESMF_ConfigGetAttribute(config, &lt;value list argument&gt;, &amp;
<SPAN           count, label, default, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>        type(ESMF_Config), intent(inout)         :: config     
<SPAN         &lt;value list argument&gt;, see below for values      
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN         integer,           intent(in)   optional :: count
<SPAN         character(len=*),  intent(in),  optional :: label 
<SPAN         character(len=*),  intent(in),  optional :: default 
<SPAN         integer,           intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_ConfigGetChar(config, value, &amp;
<SPAN          label, default, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(inout)         :: config 
<SPAN        character,         intent(out)           :: value
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character(len=*),  intent(in),  optional :: label   
<SPAN        character,         intent(in),  optional :: default
<SPAN        integer,           intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ConfigGetDim(config, lineCount, columnCount, &amp;
<SPAN        label, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(inout)         :: config
<SPAN        integer,           intent(out)           :: lineCount
<SPAN        integer,           intent(out)           :: columnCount
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character(len=*),  intent(in),  optional :: label
<SPAN        integer,           intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     integer function ESMF_ConfigGetLen(config, label, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(inout)          :: config 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character(len=*),  intent(in),   optional :: label
<SPAN        integer,           intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_ConfigIsCreated(config, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_ConfigIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Config), intent(in)            :: config
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     subroutine ESMF_ConfigLoadFile(config, filename, &amp;
<SPAN        delayout, unique, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config),   intent(inout)         :: config     
<SPAN        character(len=*),    intent(in)            :: filename 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_DELayout), intent(in),  optional :: delayout 
<SPAN        logical,             intent(in),  optional :: unique 
<SPAN        integer,             intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ConfigNextLine(config, tableEnd, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(inout)          :: config 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,           intent(out),  optional :: tableEnd
<SPAN        integer,           intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ConfigPrint(config, unit, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(in)  :: config
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, optional, intent(in)  :: unit
<SPAN        integer, optional, intent(out) :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_ConfigSetAttribute(config, &lt;value argument&gt;, &amp;
<SPAN          label, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(inout)           :: config     
<SPAN        &lt;value argument&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character(len=*),  intent(in),   optional  :: label 
<SPAN        integer,           intent(out),  optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     subroutine ESMF_ConfigValidate(config, &amp;
<SPAN        options, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Config), intent(inout)          :: config 
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character (len=*), intent(in),   optional :: options
<SPAN        integer,           intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     interface assignment(=)
<SPAN      log1 = log2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Log) :: log1
<SPAN      type(ESMF_Log) :: log2
<SPAN </PRE>

<SPAN <PRE>       interface operator(==)
<SPAN        if (log1 == log2) then ... endif
<SPAN                     OR
<SPAN        result = (log1 == log2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Log), intent(in) :: log1
<SPAN        type(ESMF_Log), intent(in) :: log2
<SPAN </PRE>

<SPAN <PRE>       interface operator(/=)
<SPAN        if (log1 /= log2) then ... endif
<SPAN                     OR
<SPAN        result = (log1 /= log2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Log), intent(in) :: log1
<SPAN        type(ESMF_Log), intent(in) :: log2
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_LogClose(log, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Log), intent(inout), optional :: log
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,        intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_LogFlush(log, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Log), intent(inout), optional :: log
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,        intent(out),   optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_LogFoundAllocError(statusToCheck,  &amp;
<SPAN                                         msg,line,file, &amp;
<SPAN                                         method,rcToReturn,log)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical                                    :: ESMF_LogFoundAllocError
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       integer,          intent(in)              :: statusToCheck
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character(len=*), intent(in),    optional :: msg
<SPAN        integer,          intent(in),    optional :: line
<SPAN        character(len=*), intent(in),    optional :: file
<SPAN        character(len=*), intent(in),    optional :: method
<SPAN        integer,          intent(inout), optional :: rcToReturn
<SPAN        type(ESMF_Log),   intent(inout), optional :: log
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       function ESMF_LogFoundDeallocError(statusToCheck,  &amp;
<SPAN                                           msg,line,file, &amp;
<SPAN                                           method,rcToReturn,log)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical ::ESMF_LogFoundDeallocError
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       integer,          intent(in)              :: statusToCheck
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character(len=*), intent(in),    optional :: msg
<SPAN        integer,          intent(in),    optional :: line
<SPAN        character(len=*), intent(in),    optional :: file
<SPAN        character(len=*), intent(in),    optional :: method
<SPAN        integer,          intent(inout), optional :: rcToReturn
<SPAN        type(ESMF_Log),   intent(inout), optional :: log
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive function ESMF_LogFoundError(rcToCheck,   &amp;
<SPAN                                    msg, line, file, method, &amp;
<SPAN                                    rcToReturn, log) result (LogFoundError)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       logical :: LogFoundError
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       integer,          intent(in),    optional :: rcToCheck
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character(len=*), intent(in),    optional :: msg
<SPAN        integer,          intent(in),    optional :: line
<SPAN        character(len=*), intent(in),    optional :: file
<SPAN        character(len=*), intent(in),    optional :: method
<SPAN        integer,          intent(inout), optional :: rcToReturn
<SPAN        type(ESMF_Log),   intent(inout), optional :: log
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE> function ESMF_LogFoundNetCDFError(ncerrToCheck, msg, line, &amp;
<SPAN                                    file, method, rcToReturn, log)
<SPAN  
<SPAN  #if defined ESMF_NETCDF
<SPAN    use netcdf
<SPAN  #elif defined ESMF_PNETCDF
<SPAN    use pnetcdf
<SPAN  #endif
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>   logical :: ESMF_LogFoundNetCDFError
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   integer,          intent(in)              :: ncerrToCheck
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN    character(len=*), intent(in),    optional :: msg
<SPAN    integer,          intent(in),    optional :: line
<SPAN    character(len=*), intent(in),    optional :: file
<SPAN    character(len=*), intent(in),    optional :: method
<SPAN    integer,          intent(inout), optional :: rcToReturn
<SPAN    type(ESMF_Log),   intent(inout), optional :: log
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_LogGet(log,  &amp;
<SPAN                               flush,    &amp;
<SPAN                               logmsgAbort, logkindflag, &amp;
<SPAN                               maxElements, trace, fileName,  &amp;
<SPAN                               highResTimestampFlag, indentCount,  &amp;
<SPAN                               noPrefix, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Log),          intent(in),  optional :: log
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,                 intent(out), optional :: flush
<SPAN        type(ESMF_LogMsg_Flag),  pointer,     optional :: logmsgAbort(:)
<SPAN        type(ESMF_LogKind_Flag), intent(out), optional :: logkindflag
<SPAN        integer,                 intent(out), optional :: maxElements
<SPAN        logical,                 intent(out), optional :: trace
<SPAN        character(*),            intent(out), optional :: fileName
<SPAN        logical,                 intent(out), optional :: highResTimestampFlag
<SPAN        integer,                 intent(out), optional :: indentCount
<SPAN        logical,                 intent(out), optional :: noPrefix
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     subroutine ESMF_LogOpen(log, filename,  &amp;
<SPAN          appendflag, logkindflag, noPrefix, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_Log),          intent(inout)         :: log
<SPAN      character(len=*),        intent(in)            :: filename
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                 intent(in),  optional :: appendFlag
<SPAN      type(ESMF_LogKind_Flag), intent(in),  optional :: logkindFlag
<SPAN      logical,                 intent(in),  optional :: noPrefix
<SPAN      integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   ! Private name; call using ESMF_LogOpen ()
<SPAN      subroutine ESMF_LogOpenDefault (filename,  &amp;
<SPAN          appendflag, logkindflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(len=*),        intent(in)            :: filename
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,                 intent(in),  optional :: appendflag
<SPAN      type(ESMF_LogKind_Flag), intent(in),  optional :: logkindflag
<SPAN      integer,                 intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     subroutine ESMF_LogSet(log,  &amp;
<SPAN          flush,  &amp;
<SPAN          logmsgAbort, maxElements, logmsgList,  &amp;
<SPAN          errorMask, trace, highResTimestampFlag, indentCount,  &amp;
<SPAN          noPrefix, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(ESMF_Log),         intent(inout), optional :: log
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        logical,                intent(in),    optional :: flush
<SPAN        type(ESMF_LogMsg_Flag), intent(in),    optional :: logmsgAbort(:)
<SPAN        integer,                intent(in),    optional :: maxElements
<SPAN        type(ESMF_LogMsg_Flag), intent(in),    optional :: logmsgList(:)
<SPAN        integer,                intent(in),    optional :: errorMask(:)
<SPAN        logical,                intent(in),    optional :: trace
<SPAN        logical,                intent(in),    optional :: highResTimestampFlag
<SPAN        integer,                intent(in),    optional :: indentCount
<SPAN        logical,                intent(in),    optional :: noPrefix
<SPAN        integer,                intent(out),   optional :: rc
<SPAN </PRE>

<SPAN <PRE>       subroutine ESMF_LogSetError(rcToCheck,  &amp;
<SPAN                                    msg, line, file, method, &amp;
<SPAN                                    rcToReturn, log)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       integer,          intent(in)              :: rcToCheck
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character(len=*), intent(in),    optional :: msg
<SPAN        integer,          intent(in),    optional :: line
<SPAN        character(len=*), intent(in),    optional :: file
<SPAN        character(len=*), intent(in),    optional :: method
<SPAN        integer,          intent(out),   optional :: rcToReturn
<SPAN        type(ESMF_Log),   intent(inout), optional :: log
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>       recursive subroutine ESMF_LogWrite(msg, logmsgFlag, &amp;
<SPAN                          logmsgList,      &amp; ! DEPRECATED ARGUMENT
<SPAN                          line, file, method, log, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       character(len=*),      intent(in)             :: msg
<SPAN        type(ESMF_LogMsg_Flag),intent(in),optional    :: logmsgFlag
<SPAN        type(ESMF_LogMsg_Flag),intent(in),optional::logmsgList ! DEPRECATED ARG
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,               intent(in),   optional :: line
<SPAN        character(len=*),      intent(in),   optional :: file
<SPAN        character(len=*),      intent(in),   optional :: method
<SPAN        type(ESMF_Log),        intent(inout),optional :: log
<SPAN        integer,               intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.2.0rp1</STRONG></DT>
<SPAN <DD>Added argument <TT>logmsgFlag</TT>.
<SPAN                    Started to deprecate argument <TT>logmsgList</TT>.
<SPAN                    This corrects inconsistent use of the <TT>List</TT> suffix on
<SPAN                    the argument name. In ESMF this suffix indicates
<SPAN                    one-dimensional array arguments.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     interface assignment(=)
<SPAN      delayout1 = delayout2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DELayout) :: delayout1
<SPAN      type(ESMF_DELayout) :: delayout2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN      if (delayout1 == delayout2) then ... endif
<SPAN                OR
<SPAN      result = (delayout1 == delayout2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DELayout), intent(in) :: delayout1
<SPAN      type(ESMF_DELayout), intent(in) :: delayout2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (delayout1 /= delayout2) then ... endif
<SPAN                OR
<SPAN      result = (delayout1 /= delayout2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DELayout), intent(in) :: delayout1
<SPAN      type(ESMF_DELayout), intent(in) :: delayout2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DELayoutCreate()
<SPAN    recursive function ESMF_DELayoutCreateDefault(deCount, &amp;
<SPAN      deGrouping, pinflag, petList, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DELayout) :: ESMF_DELayoutCreateDefault
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,                      intent(in),  optional :: deCount
<SPAN      integer, target,              intent(in),  optional :: deGrouping(:)
<SPAN      type(ESMF_Pin_Flag),          intent(in),  optional :: pinflag
<SPAN      integer, target,              intent(in),  optional :: petList(:)
<SPAN      type(ESMF_VM),                intent(in),  optional :: vm
<SPAN      integer,                      intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_DELayoutCreate()
<SPAN    recursive function ESMF_DELayoutCreateFromPetMap(petMap, &amp;
<SPAN      pinflag, vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_DELayout) :: ESMF_DELayoutCreateFromPetMap
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,                      intent(in)            :: petMap(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_Pin_Flag),          intent(in),  optional :: pinflag
<SPAN      type(ESMF_VM),                intent(in),  optional :: vm
<SPAN      integer,                      intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_DELayoutDestroy(delayout, noGarbage, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DELayout),  intent(inout)          :: delayout
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      logical,              intent(in),   optional :: noGarbage
<SPAN      integer,              intent(out),  optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>noGarbage</TT>.
<SPAN      The argument provides a mechanism to override the default garbage collection
<SPAN      mechanism when destroying an ESMF object.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_DELayoutGet(delayout, vm, deCount,&amp;
<SPAN      petMap, vasMap, oneToOneFlag, pinflag, localDeCount, localDeToDeMap, &amp;
<SPAN      localDeList, &amp;      ! DEPRECATED ARGUMENT
<SPAN      vasLocalDeCount, vasLocalDeToDeMap, &amp;
<SPAN      vasLocalDeList, &amp;   ! DEPRECATED ARGUMENT
<SPAN      rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DELayout),      intent(in)            :: delayout
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_VM),            intent(out), optional :: vm
<SPAN      integer,                  intent(out), optional :: deCount
<SPAN      integer, target,          intent(out), optional :: petMap(:)
<SPAN      integer, target,          intent(out), optional :: vasMap(:)
<SPAN      logical,                  intent(out), optional :: oneToOneFlag
<SPAN      type(ESMF_Pin_Flag),      intent(out), optional :: pinflag
<SPAN      integer,                  intent(out), optional :: localDeCount
<SPAN      integer, target,          intent(out), optional :: localDeToDeMap(:)
<SPAN      integer, target, intent(out), optional :: localDeList(:)  !DEPRECATED ARG
<SPAN      integer,                  intent(out), optional :: vasLocalDeCount
<SPAN      integer, target,          intent(out), optional :: vasLocalDeToDeMap(:)
<SPAN      integer, target, intent(out), optional :: vasLocalDeList(:) !DEPRECATED ARG
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>5.2.0rp1</STRONG></DT>
<SPAN <DD>Added arguments <TT>localDeToDeMap</TT> and <TT>vasLocalDeToDeMap</TT>.
<SPAN                    Started to deprecate arguments <TT>localDeList</TT> and 
<SPAN                    <TT>vasLocalDeList</TT>. 
<SPAN                    The new argument names correctly use the <TT>Map</TT> suffix and
<SPAN                    better describe the returned information.
<SPAN                    This was pointed out by user request.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_DELayoutIsCreated(delayout, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_DELayoutIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DELayout), intent(in)            :: delayout
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,             intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_DELayoutPrint(delayout, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DELayout),  intent(in)            :: delayout
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_DELayoutServiceComplete(delayout, de, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DELayout),  intent(in)            :: delayout
<SPAN      integer,              intent(in)            :: de
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive function ESMF_DELayoutServiceOffer(delayout, de, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     type(ESMF_ServiceReply_Flag) :: ESMF_DELayoutServiceOffer
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DELayout),  intent(in)            :: delayout
<SPAN      integer,              intent(in)            :: de
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_DELayoutValidate(delayout, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_DELayout),  intent(in)            :: delayout
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>     interface assignment(=)
<SPAN      vm1 = vm2
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM) :: vm1
<SPAN      type(ESMF_VM) :: vm2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(==)
<SPAN      if (vm1 == vm2) then ... endif
<SPAN                OR
<SPAN      result = (vm1 == vm2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM), intent(in) :: vm1
<SPAN      type(ESMF_VM), intent(in) :: vm2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   interface operator(/=)
<SPAN      if (vm1 /= vm2) then ... endif
<SPAN                OR
<SPAN      result = (vm1 /= vm2)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: result
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM), intent(in) :: vm1
<SPAN      type(ESMF_VM), intent(in) :: vm2
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMAllFullReduce(vm, sendData, recvData, &amp;
<SPAN       count, reduceflag, syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;),         intent(out)           :: recvData
<SPAN       integer,                          intent(in)            :: count
<SPAN       type(ESMF_Reduce_Flag),           intent(in)            :: reduceflag
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMAllGather(vm, sendData, recvData, count, &amp;
<SPAN       syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)
<SPAN       integer,                          intent(in)            :: count
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMAllGatherV(vm, sendData, sendCount, &amp;
<SPAN       recvData, recvCounts, recvOffsets, syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       integer,                          intent(in)            :: sendCount
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)
<SPAN       integer,                          intent(in)            :: recvCounts(:)
<SPAN       integer,                          intent(in)            :: recvOffsets(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMAllReduce(vm, sendData, recvData, count, &amp;
<SPAN       reduceflag, syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)
<SPAN       integer,                          intent(in)            :: count
<SPAN       type(ESMF_Reduce_Flag),           intent(in)            :: reduceflag
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMAllToAll(vm, sendData, sendCount, &amp;
<SPAN       recvData, recvCount, syncflag, &amp;
<SPAN       commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       integer,                          intent(in)            :: sendCount
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)
<SPAN       integer,                          intent(in)            :: recvCount
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.3.0r. If code using this interface compiles with any version of ESMF starting with 5.3.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMAllToAllV(vm, sendData, sendCounts, &amp;
<SPAN       sendOffsets, recvData, recvCounts, recvOffsets, syncflag, &amp;
<SPAN       commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       integer,                          intent(in)            :: sendCounts(:)
<SPAN       integer,                          intent(in)            :: sendOffsets(:)
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)
<SPAN       integer,                          intent(in)            :: recvCounts(:)
<SPAN       integer,                          intent(in)            :: recvOffsets(:)
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_VMBarrier(vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM),  intent(in),  optional :: vm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,        intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Made argument <TT>vm</TT> optional to simplify usage when calling
<SPAN      on the current VM.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMBroadcast(vm, bcstData, count, rootPet, &amp;
<SPAN       syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(inout)         :: bcstData(:)
<SPAN       integer,                          intent(in)            :: count
<SPAN       integer,                          intent(in)            :: rootPet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_VMCommWait(vm, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM),         intent(in)            :: vm
<SPAN      type(ESMF_CommHandle), intent(in)            :: commhandle
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,               intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_VMCommWaitAll(vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM), intent(in)            :: vm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,       intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_VMEpochEnter(vm, epoch, keepAlloc, throttle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_VM),            intent(in),  optional :: vm
<SPAN      type(ESMF_VMEpoch_Flag),  intent(in),  optional :: epoch
<SPAN      logical,                  intent(in),  optional :: keepAlloc
<SPAN      integer,                  intent(in),  optional :: throttle
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_VMEpochExit(vm, keepAlloc, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE> -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      type(ESMF_VM),            intent(in),  optional :: vm
<SPAN      logical,                  intent(in),  optional :: keepAlloc
<SPAN      integer,                  intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>    subroutine ESMF_VMGather(vm, sendData, recvData, count, rootPet, &amp;
<SPAN       syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)
<SPAN       integer,                          intent(in)            :: count
<SPAN       integer,                          intent(in)            :: rootPet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMGatherV(vm, sendData, sendCount, recvData, &amp;
<SPAN       recvCounts, recvOffsets, rootPet, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       integer,                          intent(in)            :: sendCount
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)
<SPAN       integer,                          intent(in)            :: recvCounts(:)
<SPAN       integer,                          intent(in)            :: recvOffsets(:)
<SPAN       integer,                          intent(in)            :: rootPet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_VMGet()
<SPAN    recursive subroutine ESMF_VMGetDefault(vm, localPet, &amp;
<SPAN      currentSsiPe, petCount, peCount, ssiCount, ssiMap, ssiMinPetCount, ssiMaxPetCount, &amp;
<SPAN      ssiLocalPetCount, mpiCommunicator, pthreadsEnabledFlag, openMPEnabledFlag, &amp;
<SPAN      ssiSharedMemoryEnabledFlag, esmfComm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM),        intent(in)            :: vm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,              intent(out), optional :: localPet
<SPAN      integer,              intent(out), optional :: currentSsiPe
<SPAN      integer,              intent(out), optional :: petCount
<SPAN      integer,              intent(out), optional :: peCount
<SPAN      integer,              intent(out), optional :: ssiCount
<SPAN      integer, allocatable, intent(out), optional :: ssiMap(:)
<SPAN      integer,              intent(out), optional :: ssiMinPetCount
<SPAN      integer,              intent(out), optional :: ssiMaxPetCount
<SPAN      integer,              intent(out), optional :: ssiLocalPetCount
<SPAN      integer,              intent(out), optional :: mpiCommunicator
<SPAN      logical,              intent(out), optional :: pthreadsEnabledFlag
<SPAN      logical,              intent(out), optional :: openMPEnabledFlag
<SPAN      logical,              intent(out), optional :: ssiSharedMemoryEnabledFlag
<SPAN      character(:), allocatable, intent(out), optional :: esmfComm
<SPAN      integer,              intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>8.0.0</STRONG></DT>
<SPAN <DD>Added arguments <TT>ssiCount</TT>, <TT>ssiMinPetCount</TT>, 
<SPAN      <TT>ssiMaxPetCount</TT>, and <TT>ssiLocalPetCount</TT> to provide access 
<SPAN      to information about how the VM is mapped across the single system images
<SPAN      (SSIs) - typically synonymous to nodes - of the compute environment. This
<SPAN      information is useful when constructing custom petLists. <BR>
<SPAN Added argument <TT>ssiSharedMemoryEnabledFlag</TT> that allows the user to 
<SPAN      query whether ESMF was compiled with support for shared memory 
<SPAN      access between PETs on the same SSI.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.1.0</STRONG></DT>
<SPAN <DD>Added argument <TT>currentSsiPe</TT> for easy query of the
<SPAN      current PE within the local SSI that is executing the request.
<SPAN <BR>
<SPAN Added argument <TT>ssiMap</TT> for a convenient way to obtain a view
<SPAN      of the mapping of PETs to single system images across the entire VM.
<SPAN    
<SPAN </DD>
<SPAN <DT><STRONG>8.2.0</STRONG></DT>
<SPAN <DD>Added argument <TT>esmfComm</TT> to provide easy access to the
<SPAN      <TT>ESMF_COMM</TT> setting used by the ESMF installation.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   ! Private name; call using ESMF_VMGet()
<SPAN    subroutine ESMF_VMGetPetSpecific(vm, pet, peCount, &amp;
<SPAN      accDeviceCount, ssiId, threadCount, threadId, vas, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM), intent(in)            :: vm
<SPAN      integer,       intent(in)            :: pet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,       intent(out), optional :: peCount
<SPAN      integer,       intent(out), optional :: accDeviceCount
<SPAN      integer,       intent(out), optional :: ssiId
<SPAN      integer,       intent(out), optional :: threadCount
<SPAN      integer,       intent(out), optional :: threadId
<SPAN      integer,       intent(out), optional :: vas
<SPAN      integer,       intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN </LI>
<SPAN <LI>This interface was modified since ESMF version 5.2.0r. The fact that code using this interface compiles with the current ESMF version does not guarantee that it compiles with previous versions of this interface. If user code compatibility with version 5.2.0r is desired then care must be taken to limit the use of this interface to features that were available in the 5.2.0r release. 
<SPAN <BR>
<SPAN Changes made after the 5.2.0r release:
<SPAN    <DL>
<SPAN <DT><STRONG>7.0.0</STRONG></DT>
<SPAN <DD>Added argument <TT>accDeviceCount</TT>.
<SPAN      The argument provides access to the number of available accelerator devices.
<SPAN    
<SPAN </DD>
<SPAN </DL>
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_VMGetGlobal(vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM), intent(out)            :: vm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,       intent(out), optional  :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_VMGetCurrent(vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM), intent(out)           :: vm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,       intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   function ESMF_VMIsCreated(vm, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     logical :: ESMF_VMIsCreated
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM), intent(in)            :: vm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,       intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_VMLog(vm, prefix, logMsgFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM),          intent(in)              :: vm
<SPAN      character(len=*),       intent(in),   optional  :: prefix
<SPAN      type(ESMF_LogMsg_Flag), intent(in),   optional  :: logMsgFlag
<SPAN      integer, intent(out),                 optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_VMLogSystem(prefix, logMsgFlag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(len=*),       intent(in),   optional  :: prefix
<SPAN      type(ESMF_LogMsg_Flag), intent(in),   optional  :: logMsgFlag
<SPAN      integer, intent(out),                 optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_VMPrint(vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM),  intent(in)            :: vm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,        intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMRecv(vm, recvData, count, srcPet, &amp;
<SPAN       syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                     intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target,  intent(out)           :: recvData(:)  
<SPAN       integer,                           intent(in)            :: count
<SPAN       integer,                           intent(in)            :: srcPet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),              intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),             intent(out), optional :: commhandle
<SPAN       integer,                           intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMReduce(vm, sendData, recvData, count, &amp;
<SPAN       reduceflag, rootPet, syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)
<SPAN       integer,                          intent(in)            :: count
<SPAN       type(ESMF_Reduce_Flag),           intent(in)            :: reduceflag
<SPAN       integer,                          intent(in)            :: rootPet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMScatter(vm, sendData, recvData, count, &amp;
<SPAN       rootPet, syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)
<SPAN       integer,                          intent(in)            :: count
<SPAN       integer,                          intent(in)            :: rootPet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMScatterV(vm, sendData, sendCounts, &amp;
<SPAN       sendOffsets, recvData, recvCount, rootPet, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)
<SPAN       integer,                          intent(in)            :: sendCounts(:)
<SPAN       integer,                          intent(in)            :: sendOffsets(:)
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)
<SPAN       integer,                          intent(in)            :: recvCount
<SPAN       integer,                          intent(in)            :: rootPet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMSend(vm, sendData, count, dstPet, &amp;
<SPAN       syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)  
<SPAN       integer,                          intent(in)            :: count
<SPAN       integer,                          intent(in)            :: dstPet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>    subroutine ESMF_VMSendRecv(vm, sendData, sendCount, dstPet, &amp;
<SPAN       recvData, recvCount, srcPet, syncflag, commhandle, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>      type(ESMF_VM),                    intent(in)            :: vm
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(in)            :: sendData(:)  
<SPAN       integer,                          intent(in)            :: sendCount
<SPAN       integer,                          intent(in)            :: dstPet
<SPAN       &lt;type&gt;(ESMF_KIND_&lt;kind&gt;), target, intent(out)           :: recvData(:)  
<SPAN       integer,                          intent(in)            :: recvCount
<SPAN       integer,                          intent(in)            :: srcPet
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       type(ESMF_Sync_Flag),             intent(in),  optional :: syncflag
<SPAN       type(ESMF_CommHandle),            intent(out), optional :: commhandle
<SPAN       integer,                          intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_VMValidate(vm, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     type(ESMF_VM), intent(in)            :: vm
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,       intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_VMWtime(time, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     real(ESMF_KIND_R8), intent(out)           :: time
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   recursive subroutine ESMF_VMWtimeDelay(delay, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     real(ESMF_KIND_R8), intent(in)            :: delay
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_VMWtimePrec(prec, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     real(ESMF_KIND_R8), intent(out)           :: prec
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,            intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_TraceRegionEnter(name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(len=*), intent(in) :: name
<SPAN      integer, intent(out), optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_TraceRegionExit(name, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(len=*), intent(in) :: name
<SPAN      integer, intent(out), optional  :: rc
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_UtilGetArg(argindex, argvalue, arglength, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer,      intent(in)            :: argindex
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(*), intent(out), optional :: argvalue
<SPAN      integer,      intent(out), optional :: arglength
<SPAN      integer,      intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_UtilGetArgC(count, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer, intent(out)           :: count
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_UtilGetArgIndex(argvalue, argindex, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(*), intent(in)            :: argvalue
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,      intent(out), optional :: argindex
<SPAN      integer,      intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_UtilIOGetCWD (pathName, rc)
<SPAN </PRE><EM>PARAMETERS:</EM>
<SPAN <PRE>     character(*), intent(out)           :: pathName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,      intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>    subroutine ESMF_UtilIOMkDir (pathName,  &amp;
<SPAN         mode, relaxedFlag,  &amp;
<SPAN         rc)
<SPAN </PRE><EM>PARAMETERS:</EM>
<SPAN <PRE>      character(*), intent(in)            :: pathName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       integer,      intent(in),  optional :: mode
<SPAN       logical,      intent(in),  optional :: relaxedFlag
<SPAN       integer,      intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>    subroutine ESMF_UtilIORmDir (pathName,  &amp;
<SPAN         relaxedFlag, rc)
<SPAN </PRE><EM>PARAMETERS:</EM>
<SPAN <PRE>      character(*), intent(in)            :: pathName
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN       logical,      intent(in),  optional :: relaxedFlag
<SPAN       integer,      intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_UtilString2Double(string, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     real(ESMF_KIND_R8) :: ESMF_UtilString2Double
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(len=*), intent(in)            :: string
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_UtilString2Int(string,  &amp;
<SPAN        specialStringList, specialValueList, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     integer :: ESMF_UtilString2Int
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(len=*), intent(in)            :: string
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      character(len=*), intent(in),  optional :: specialStringList(:)
<SPAN      integer,          intent(in),  optional :: specialValueList(:)
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>   function ESMF_UtilString2Real(string, rc)
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>     real :: ESMF_UtilString2Real
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     character(len=*), intent(in)            :: string
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer,          intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>     function ESMF_UtilStringInt2String (i, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       integer, intent(in) :: i
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, intent(out), optional  :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       character(int2str_len (i)) :: ESMF_UtilStringInt2String
<SPAN </PRE>

<SPAN <PRE>     function ESMF_UtilStringLowerCase(string, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       character(len=*), intent(in) :: string
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, intent(out), optional  :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       character(len (string)) :: ESMF_UtilStringLowerCase
<SPAN </PRE>

<SPAN <PRE>       function ESMF_UtilStringUpperCase(string, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       character(len=*), intent(in) :: string
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer, intent(out), optional  :: rc
<SPAN </PRE><EM>RETURN VALUE:</EM>
<SPAN <PRE>       character(len (string)) :: ESMF_UtilStringUpperCase
<SPAN </PRE>

<SPAN <PRE>   subroutine ESMF_UtilIOUnitFlush(unit, rc)
<SPAN </PRE><EM>PARAMETERS:</EM>
<SPAN <PRE>     integer, intent(in)            :: unit
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_UtilIOUnitGet(unit, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>     integer, intent(out)           :: unit
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN      integer, intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    
<SPAN <UL>
<SPAN <LI>This interface is backward compatible with ESMF versions starting at 5.2.0r. If code using this interface compiles with any version of ESMF starting with 5.2.0r, then it will compile with the current version.
<SPAN    
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>

<SPAN <PRE>   subroutine ESMF_UtilSort (list, direction, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>   &lt;list&gt;, see below for supported values 
<SPAN    type(ESMF_SortFlag), intent(in) :: direction 
<SPAN    integer, intent(out), optional :: rc
<SPAN </PRE>

<SPAN <PRE>       ! Private name; call using ESMF_AttributeAdd()
<SPAN        subroutine ESMF_AttAddPackInfo(info, convention, purpose, attrList, &amp;
<SPAN          nestConvention, nestPurpose, attpack, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;ESMF_Info&gt;),   intent(inout)           :: info
<SPAN        character (len = *), intent(in)              :: convention
<SPAN        character (len = *), intent(in)              :: purpose
<SPAN        character (len = *), intent(in),    optional :: attrList(:)
<SPAN        character (len = *), intent(in)     optional :: nestConvention
<SPAN        character (len = *), intent(in)     optional :: nestPurpose
<SPAN        type(ESMF_AttPack),  intent(out),   optional :: attpack
<SPAN        integer,             intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_AttributeAdd()
<SPAN        subroutine ESMF_AttAddPackStd(target, convention, purpose, attrList, &amp;
<SPAN          nestConvention, nestPurpose, attpack, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),      intent(inout)           :: target
<SPAN        character (len = *), intent(in)              :: convention
<SPAN        character (len = *), intent(in)              :: purpose
<SPAN        character (len = *), intent(in),    optional :: attrList(:)
<SPAN        character (len = *), intent(in)     optional :: nestConvention
<SPAN        character (len = *), intent(in)     optional :: nestPurpose
<SPAN        type(ESMF_AttPack),  intent(out),   optional :: attpack
<SPAN        integer,             intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_AttributeCopy()
<SPAN        subroutine ESMF_AttributeCopy(src, dst, attcopy, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),          intent(in)            :: src
<SPAN        type(&lt;object&gt;),          intent(inout)         :: dst
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_AttCopy_Flag), intent(in),  optional :: attcopy
<SPAN        integer,                 intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeGet(target, name, attpack, &lt;value&gt; &amp;
<SPAN          &lt;defaultvalue&gt;, attnestflag, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),         intent(in)              :: target
<SPAN        character (len = *),    intent(in)              :: name
<SPAN        type(ESMF_AttPack),     intent(inout)           :: attpack
<SPAN        &lt;value&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        &lt;defaultvalue&gt;, see below for supported values
<SPAN        type(ESMF_AttNest_Flag),intent(in),  optional   :: attnestflag
<SPAN        logical,                intent(out), optional   :: isPresent
<SPAN        integer,                intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeGet(target, name, attpack, &lt;valueList&gt;, &amp;
<SPAN          &lt;defaultvalueList&gt;, attnestflag, itemCount, &amp;
<SPAN          isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),         intent(in)              :: target
<SPAN        character (len = *),    intent(in)              :: name
<SPAN        type(ESMF_AttPack),     intent(inout)           :: attpack
<SPAN        &lt;valueList&gt;, see below for supported values
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        &lt;defaultvalueList&gt;, see below for supported values
<SPAN        type(ESMF_AttNest_Flag),intent(in),  optional   :: attnestflag
<SPAN        integer,                intent(out), optional   :: itemCount
<SPAN        logical,                intent(out), optional   :: isPresent
<SPAN        integer,                intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeGet(target, name, &lt;value&gt;, &lt;defaultvalue&gt;, &amp;
<SPAN          convention, purpose, attnestflag, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),         intent(in)              :: target
<SPAN        character (len = *),    intent(in)              :: name
<SPAN        &lt;value&gt;, see below for supported values
<SPAN        &lt;defaultvalue&gt;, see below for supported values
<SPAN        character (len = *),    intent(in),    optional :: convention
<SPAN        character (len = *),    intent(in),    optional :: purpose
<SPAN        type(ESMF_AttNest_Flag),intent(in),    optional :: attnestflag
<SPAN        logical,                intent(out),   optional :: isPresent
<SPAN        integer,                intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN        The following parameters were removed in ESMF version 8.1.0:
<SPAN        
<SPAN <UL>
<SPAN <LI><TT> attPackInstanceName </TT>
<SPAN        
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeGet(target, name, &lt;valueList&gt;, &lt;defaultvalueList&gt;, &amp;
<SPAN          convention, purpose, attnestflag, itemCount, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),         intent(in)              :: target
<SPAN        character (len = *),    intent(in)              :: name
<SPAN        &lt;valueList&gt;, see below for supported values
<SPAN        &lt;defaultvalueList&gt;, see below for supported values
<SPAN        character (len = *),    intent(in),    optional :: convention
<SPAN        character (len = *),    intent(in),    optional :: purpose
<SPAN        type(ESMF_AttNest_Flag),intent(in),    optional :: attnestflag
<SPAN        integer,                intent(out),   optional :: itemCount
<SPAN        logical,                intent(out),   optional :: isPresent
<SPAN        integer,                intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN        The following parameters were removed in ESMF version 8.1.0:
<SPAN        
<SPAN <UL>
<SPAN <LI><TT> attPackInstanceName </TT>
<SPAN        
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_AttributeGet()
<SPAN        subroutine ESMF_AttributeGetCount(target, attpack, count, &amp;
<SPAN                                          attcountflag, attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),             intent(in)              :: target
<SPAN        type(ESMF_AttPack),         intent(inout)           :: attpack
<SPAN        integer,                    intent(inout)           :: count
<SPAN        type(ESMF_AttGetCountFlag), intent(in),    optional :: attcountflag
<SPAN        type(ESMF_AttNest_Flag),    intent(in),    optional :: attnestflag
<SPAN        integer,                    intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_AttributeGet()
<SPAN        subroutine ESMF_AttributeGetCount(target, count, convention, purpose, &amp;
<SPAN          attcountflag, attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),             intent(in)              :: target
<SPAN        integer,                    intent(inout)           :: count
<SPAN        character (len=*),          intent(in),    optional :: convention
<SPAN        character (len=*),          intent(in),    optional :: purpose
<SPAN        type(ESMF_AttGetCountFlag), intent(in),    optional :: attcountflag
<SPAN        type(ESMF_AttNest_Flag),    intent(in),    optional :: attnestflag
<SPAN        integer,                    intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN        The following parameters were removed in ESMF version 8.1.0:
<SPAN        
<SPAN <UL>
<SPAN <LI><TT> attPackInstanceName </TT>
<SPAN        
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_AttributeGet()
<SPAN        subroutine ESMF_AttributeGetInfoByNamAP(target, name, attpack, &amp;
<SPAN          attnestflag, typekind, itemCount, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),           intent(in)              :: target
<SPAN        character (len = *),      intent(in)              :: name
<SPAN        type(ESMF_AttPack),       intent(inout)           :: attpack
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_AttNest_Flag),  intent(in),    optional :: attnestflag
<SPAN        type(ESMF_TypeKind_Flag), intent(out),   optional :: typekind
<SPAN        integer,                  intent(out),   optional :: itemCount
<SPAN        logical,                  intent(out),   optional :: isPresent
<SPAN        integer,                  intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_AttributeGet()
<SPAN        subroutine ESMF_AttributeGetInfoByNam(target, name, &amp;
<SPAN          convention, purpose, attnestflag, typekind, itemCount, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),           intent(in)              :: target
<SPAN        character (len = *),      intent(in)              :: name
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character (len=*),        intent(in),    optional :: convention
<SPAN        character (len=*),        intent(in),    optional :: purpose
<SPAN        type(ESMF_AttNest_Flag),  intent(in),    optional :: attnestflag
<SPAN        type(ESMF_TypeKind_Flag), intent(out),   optional :: typekind
<SPAN        integer,                  intent(out),   optional :: itemCount
<SPAN        logical,                  intent(out),   optional :: isPresent
<SPAN        integer,                  intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN        The following parameters were removed in ESMF version 8.1.0:
<SPAN        
<SPAN <UL>
<SPAN <LI><TT> attPackInstanceName </TT>
<SPAN        
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_AttributeGet()
<SPAN        subroutine ESMF_AttributeGetInfoByNum(target, attributeIndex, &amp;
<SPAN          name, convention, purpose, attnestflag, typekind, itemcount, isPresent, &amp;
<SPAN          rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),           intent(in)              :: target
<SPAN        integer,                  intent(in)              :: attributeIndex
<SPAN        character (len = *),      intent(out)             :: name
<SPAN        character (len = *),      intent(in),    optional :: convention
<SPAN        character (len = *),      intent(in),    optional :: purpose
<SPAN        type(ESMF_AttNest_Flag),  intent(in),    optional :: attnestflag
<SPAN        type(ESMF_TypeKind_Flag), intent(out),   optional :: typekind
<SPAN        integer,                  intent(out),   optional :: itemCount
<SPAN        logical,                  intent(out),   optional :: isPresent
<SPAN        integer,                  intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN        The following parameters were removed in ESMF version 8.1.0:
<SPAN        
<SPAN <UL>
<SPAN <LI><TT> attPackInstanceName </TT>
<SPAN        
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       ! Private name; call using ESMF_AttributeGetAttPack()
<SPAN        subroutine ESMF_AttGetAttPack(target, convention, purpose, &amp;
<SPAN          attpack, attnestflag, isPresent, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),          intent(in)               :: target
<SPAN        character (len = *),     intent(in)               :: convention
<SPAN        character (len = *),     intent(in)               :: purpose
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        type(ESMF_AttPack),      intent(inout),  optional :: attpack
<SPAN        type(ESMF_AttNest_Flag), intent(in),     optional :: attnestflag
<SPAN        logical,                 intent(out),    optional :: isPresent
<SPAN        integer,                 intent(out),    optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN        The following parameters were removed in ESMF version 8.1.0:
<SPAN        
<SPAN <UL>
<SPAN <LI><TT> attPackInstanceName </TT>
<SPAN        
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeRemove(target, name, &amp;
<SPAN          attpack, attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),          intent(inout)           :: target
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        character (len = *),     intent(in),    optional :: name
<SPAN        type(ESMF_AttPack),      intent(inout), optional :: attpack
<SPAN        type(ESMF_AttNest_Flag), intent(in),    optional :: attnestflag
<SPAN        integer,                 intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeRemove(target, name, convention, purpose, &amp;
<SPAN          attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),          intent(inout)           :: target
<SPAN        character (len = *),     intent(in),    optional :: name
<SPAN        character (len = *),     intent(in),    optional :: convention
<SPAN        character (len = *),     intent(in),    optional :: purpose
<SPAN        type(ESMF_AttNest_Flag), intent(in),    optional :: attnestflag
<SPAN        integer,                 intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN        The following parameters were removed in ESMF version 8.1.0:
<SPAN        
<SPAN <UL>
<SPAN <LI><TT> attPackInstanceName </TT>
<SPAN        
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeSet(target, name, &lt;value&gt;, attpack, &amp;
<SPAN          itemcount, attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),          intent(in)              :: target
<SPAN        character (len = *),     intent(in)              :: name
<SPAN        &lt;value&gt;, see below for supported values
<SPAN        type(ESMF_AttPack),      intent(inout)           :: attpack
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                 intent(in),    optional :: itemcount
<SPAN        type(ESMF_AttNest_Flag), intent(in),    optional :: attnestflag
<SPAN        integer,                 intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeSet(target, name, &lt;valueList&gt;, attpack, &amp;
<SPAN          itemCount,  attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),          intent(in)              :: target
<SPAN        character (len = *),     intent(in)              :: name
<SPAN        &lt;valueList&gt;, see below for supported values
<SPAN        type(ESMF_AttPack),      intent(inout)           :: attpack
<SPAN  -- The following arguments require argument keyword syntax (e.g. rc=rc). --
<SPAN        integer,                 intent(in),    optional :: itemcount
<SPAN        type(ESMF_AttNest_Flag), intent(in),    optional :: attnestflag
<SPAN        integer,                 intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeSet(target, name, &lt;value&gt;, &amp;
<SPAN          convention, purpose, itemcount, attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),          intent(inout)           :: target
<SPAN        character (len = *),     intent(in)              :: name
<SPAN        &lt;value&gt;, see below for supported values
<SPAN        character (len = *),     intent(in),    optional :: convention
<SPAN        character (len = *),     intent(in),    optional :: purpose
<SPAN        integer,                 intent(in),    optional :: itemcount
<SPAN        type(ESMF_AttNest_Flag), intent(in),    optional :: attnestflag
<SPAN        integer,                 intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN        The following parameters were removed in ESMF version 8.1.0:
<SPAN        
<SPAN <UL>
<SPAN <LI><TT> attPackInstanceName </TT>
<SPAN        
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeSet(target, name, &lt;valueList&gt;, &amp;
<SPAN          convention, purpose, itemCount, attnestflag, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       type(&lt;object&gt;),          intent(inout)           :: target
<SPAN        character (len = *),     intent(in)              :: name
<SPAN        &lt;valueList&gt;, see below for supported values
<SPAN        character (len = *),     intent(in),    optional :: convention
<SPAN        character (len = *),     intent(in),    optional :: purpose
<SPAN        integer,                 intent(in),    optional :: itemcount
<SPAN        type(ESMF_AttNest_Flag), intent(in),    optional :: attnestflag
<SPAN        integer,                 intent(inout), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN        The following parameters were removed in ESMF version 8.1.0:
<SPAN        
<SPAN <UL>
<SPAN <LI><TT> attPackInstanceName </TT>
<SPAN        
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

<SPAN <PRE>       subroutine ESMF_AttributeUpdate(target, vm, rootList, rc)
<SPAN </PRE><EM>ARGUMENTS:</EM>
<SPAN <PRE>       &lt;target&gt;, see below for supported values
<SPAN        type(ESMF_VM), intent(in)            :: vm
<SPAN        integer,       intent(in)            :: rootList(:)
<SPAN        integer,       intent(out), optional :: rc
<SPAN </PRE>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN        The following parameters were removed in ESMF version 8.1.0:
<SPAN        
<SPAN <UL>
<SPAN <LI><TT> reconcile </TT>
<SPAN        
<SPAN </LI>
<SPAN </UL>
<SPAN 
<SPAN <P>
<SPAN <I CLASS="sans">STATUS:</I>
<SPAN    <B>DEPRECATED CLASS!</B>
<SPAN <BR>
<SPAN The entire ESMF_Attribute class has been deprecated and is scheduled for removal with ESMF 9.0.0. This includes all of the class derived types, named constants, and methods. Please use the replacment class <TT>ESMF_Info</TT>, section <TT><A HREF="node6.html#esmf_info_class">39</A></TT> instead!
<SPAN <BR>
<SPAN <P>

